{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../base/Page'); /* jshint ignore:line */\nvar SinkTestList = require('./sink/sinkTest').SinkTestList;\nvar SinkValidateList = require('./sink/sinkValidate').SinkValidateList;\nvar deserialize = require('../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../base/values'); /* jshint ignore:line */\n\nvar SinkList;\nvar SinkPage;\nvar SinkInstance;\nvar SinkContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the SinkList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SinkList\n *\n * @param {Twilio.Events.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nSinkList = function SinkList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function sinks\n   * @memberof Twilio.Events.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Events.V1.SinkContext}\n   */\n  /* jshint ignore:end */\n  function SinkListInstance(sid) {\n    return SinkListInstance.get(sid);\n  }\n  SinkListInstance._version = version;\n  // Path Solution\n  SinkListInstance._solution = {};\n  SinkListInstance._uri = `/Sinks`;\n  /* jshint ignore:start */\n  /**\n   * create a SinkInstance\n   *\n   * @function create\n   * @memberof Twilio.Events.V1.SinkList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.description - Sink Description.\n   * @param {object} opts.sinkConfiguration - JSON Sink configuration.\n   * @param {sink.sink_type} opts.sinkType - Sink type.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SinkInstance\n   */\n  /* jshint ignore:end */\n  SinkListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.description)) {\n      throw new Error('Required parameter \"opts.description\" missing.');\n    }\n    if (_.isUndefined(opts.sinkConfiguration)) {\n      throw new Error('Required parameter \"opts.sinkConfiguration\" missing.');\n    }\n    if (_.isUndefined(opts.sinkType)) {\n      throw new Error('Required parameter \"opts.sinkType\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'Description': _.get(opts, 'description'),\n      'SinkConfiguration': serialize.object(_.get(opts, 'sinkConfiguration')),\n      'SinkType': _.get(opts, 'sinkType')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SinkInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams SinkInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Events.V1.SinkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.inUse] -\n   *          A boolean to return sinks used/not used by a subscription.\n   * @param {string} [opts.status] - A string to filter sinks by status.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  SinkListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists SinkInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Events.V1.SinkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.inUse] -\n   *          A boolean to return sinks used/not used by a subscription.\n   * @param {string} [opts.status] - A string to filter sinks by status.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SinkListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of SinkInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Events.V1.SinkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.inUse] -\n   *          A boolean to return sinks used/not used by a subscription.\n   * @param {string} [opts.status] - A string to filter sinks by status.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SinkListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'InUse': serialize.bool(_.get(opts, 'inUse')),\n      'Status': _.get(opts, 'status'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SinkPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of SinkInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Events.V1.SinkList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SinkListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SinkPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a sink\n   *\n   * @function get\n   * @memberof Twilio.Events.V1.SinkList#\n   *\n   * @param {string} sid - A string that uniquely identifies this Sink.\n   *\n   * @returns {Twilio.Events.V1.SinkContext}\n   */\n  /* jshint ignore:end */\n  SinkListInstance.get = function get(sid) {\n    return new SinkContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Events.V1.SinkList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  SinkListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  SinkListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return SinkListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the SinkPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SinkPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SinkSolution} solution - Path solution\n *\n * @returns SinkPage\n */\n/* jshint ignore:end */\nSinkPage = function SinkPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(SinkPage.prototype, Page.prototype);\nSinkPage.prototype.constructor = SinkPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of SinkInstance\n *\n * @function getInstance\n * @memberof Twilio.Events.V1.SinkPage#\n *\n * @param {SinkPayload} payload - Payload response from the API\n *\n * @returns SinkInstance\n */\n/* jshint ignore:end */\nSinkPage.prototype.getInstance = function getInstance(payload) {\n  return new SinkInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SinkPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSinkPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nSinkPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the SinkContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SinkInstance\n *\n * @property {Date} dateCreated - The date this Sink was created\n * @property {Date} dateUpdated - The date this Sink was updated\n * @property {string} description - Sink Description\n * @property {string} sid - A string that uniquely identifies this Sink.\n * @property {object} sinkConfiguration - JSON Sink configuration.\n * @property {sink.sink_type} sinkType - Sink type.\n * @property {sink.status} status - The Status of this Sink\n * @property {string} url - The URL of this resource.\n * @property {string} links - Nested resource URLs.\n *\n * @param {V1} version - Version of the resource\n * @param {SinkPayload} payload - The instance payload\n * @param {sid} sid - A string that uniquely identifies this Sink.\n */\n/* jshint ignore:end */\nSinkInstance = function SinkInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.description = payload.description; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.sinkConfiguration = payload.sink_configuration; // jshint ignore:line\n  this.sinkType = payload.sink_type; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(SinkInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new SinkContext(this._version, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a SinkInstance\n *\n * @function fetch\n * @memberof Twilio.Events.V1.SinkInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SinkInstance\n */\n/* jshint ignore:end */\nSinkInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a SinkInstance\n *\n * @function remove\n * @memberof Twilio.Events.V1.SinkInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SinkInstance\n */\n/* jshint ignore:end */\nSinkInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a SinkInstance\n *\n * @function update\n * @memberof Twilio.Events.V1.SinkInstance#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.description - Sink Description\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SinkInstance\n */\n/* jshint ignore:end */\nSinkInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the sinkTest\n *\n * @function sinkTest\n * @memberof Twilio.Events.V1.SinkInstance#\n *\n * @returns {Twilio.Events.V1.SinkContext.SinkTestList}\n */\n/* jshint ignore:end */\nSinkInstance.prototype.sinkTest = function sinkTest() {\n  return this._proxy.sinkTest;\n};\n\n/* jshint ignore:start */\n/**\n * Access the sinkValidate\n *\n * @function sinkValidate\n * @memberof Twilio.Events.V1.SinkInstance#\n *\n * @returns {Twilio.Events.V1.SinkContext.SinkValidateList}\n */\n/* jshint ignore:end */\nSinkInstance.prototype.sinkValidate = function sinkValidate() {\n  return this._proxy.sinkValidate;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SinkInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSinkInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nSinkInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the SinkContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SinkContext\n *\n * @property {Twilio.Events.V1.SinkContext.SinkTestList} sinkTest -\n *          sinkTest resource\n * @property {Twilio.Events.V1.SinkContext.SinkValidateList} sinkValidate -\n *          sinkValidate resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - A string that uniquely identifies this Sink.\n */\n/* jshint ignore:end */\nSinkContext = function SinkContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/Sinks/${sid}`;\n\n  // Dependents\n  this._sinkTest = undefined;\n  this._sinkValidate = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a SinkInstance\n *\n * @function fetch\n * @memberof Twilio.Events.V1.SinkContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SinkInstance\n */\n/* jshint ignore:end */\nSinkContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SinkInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a SinkInstance\n *\n * @function remove\n * @memberof Twilio.Events.V1.SinkContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SinkInstance\n */\n/* jshint ignore:end */\nSinkContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a SinkInstance\n *\n * @function update\n * @memberof Twilio.Events.V1.SinkContext#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.description - Sink Description\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SinkInstance\n */\n/* jshint ignore:end */\nSinkContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n  if (_.isUndefined(opts.description)) {\n    throw new Error('Required parameter \"opts.description\" missing.');\n  }\n  var deferred = Q.defer();\n  var data = values.of({\n    'Description': _.get(opts, 'description')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SinkInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(SinkContext.prototype, 'sinkTest', {\n  get: function () {\n    if (!this._sinkTest) {\n      this._sinkTest = new SinkTestList(this._version, this._solution.sid);\n    }\n    return this._sinkTest;\n  }\n});\nObject.defineProperty(SinkContext.prototype, 'sinkValidate', {\n  get: function () {\n    if (!this._sinkValidate) {\n      this._sinkValidate = new SinkValidateList(this._version, this._solution.sid);\n    }\n    return this._sinkValidate;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SinkContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSinkContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nSinkContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  SinkList: SinkList,\n  SinkPage: SinkPage,\n  SinkInstance: SinkInstance,\n  SinkContext: SinkContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","SinkTestList","SinkValidateList","deserialize","serialize","values","SinkList","SinkPage","SinkInstance","SinkContext","version","SinkListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","description","sinkConfiguration","sinkType","deferred","defer","data","of","object","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","bool","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","sink_configuration","sink_type","status","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","remove","update","sinkTest","sinkValidate","_sinkTest","_sinkValidate","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/events/v1/sink.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar SinkTestList = require('./sink/sinkTest').SinkTestList;\nvar SinkValidateList = require('./sink/sinkValidate').SinkValidateList;\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar SinkList;\nvar SinkPage;\nvar SinkInstance;\nvar SinkContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the SinkList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SinkList\n *\n * @param {Twilio.Events.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nSinkList = function SinkList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function sinks\n   * @memberof Twilio.Events.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Events.V1.SinkContext}\n   */\n  /* jshint ignore:end */\n  function SinkListInstance(sid) {\n    return SinkListInstance.get(sid);\n  }\n\n  SinkListInstance._version = version;\n  // Path Solution\n  SinkListInstance._solution = {};\n  SinkListInstance._uri = `/Sinks`;\n  /* jshint ignore:start */\n  /**\n   * create a SinkInstance\n   *\n   * @function create\n   * @memberof Twilio.Events.V1.SinkList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.description - Sink Description.\n   * @param {object} opts.sinkConfiguration - JSON Sink configuration.\n   * @param {sink.sink_type} opts.sinkType - Sink type.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SinkInstance\n   */\n  /* jshint ignore:end */\n  SinkListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.description)) {\n      throw new Error('Required parameter \"opts.description\" missing.');\n    }\n    if (_.isUndefined(opts.sinkConfiguration)) {\n      throw new Error('Required parameter \"opts.sinkConfiguration\" missing.');\n    }\n    if (_.isUndefined(opts.sinkType)) {\n      throw new Error('Required parameter \"opts.sinkType\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Description': _.get(opts, 'description'),\n      'SinkConfiguration': serialize.object(_.get(opts, 'sinkConfiguration')),\n      'SinkType': _.get(opts, 'sinkType')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SinkInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams SinkInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Events.V1.SinkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.inUse] -\n   *          A boolean to return sinks used/not used by a subscription.\n   * @param {string} [opts.status] - A string to filter sinks by status.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  SinkListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists SinkInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Events.V1.SinkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.inUse] -\n   *          A boolean to return sinks used/not used by a subscription.\n   * @param {string} [opts.status] - A string to filter sinks by status.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SinkListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of SinkInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Events.V1.SinkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.inUse] -\n   *          A boolean to return sinks used/not used by a subscription.\n   * @param {string} [opts.status] - A string to filter sinks by status.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SinkListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'InUse': serialize.bool(_.get(opts, 'inUse')),\n      'Status': _.get(opts, 'status'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SinkPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of SinkInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Events.V1.SinkList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SinkListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SinkPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a sink\n   *\n   * @function get\n   * @memberof Twilio.Events.V1.SinkList#\n   *\n   * @param {string} sid - A string that uniquely identifies this Sink.\n   *\n   * @returns {Twilio.Events.V1.SinkContext}\n   */\n  /* jshint ignore:end */\n  SinkListInstance.get = function get(sid) {\n    return new SinkContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Events.V1.SinkList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  SinkListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  SinkListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return SinkListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SinkPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SinkPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SinkSolution} solution - Path solution\n *\n * @returns SinkPage\n */\n/* jshint ignore:end */\nSinkPage = function SinkPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(SinkPage.prototype, Page.prototype);\nSinkPage.prototype.constructor = SinkPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of SinkInstance\n *\n * @function getInstance\n * @memberof Twilio.Events.V1.SinkPage#\n *\n * @param {SinkPayload} payload - Payload response from the API\n *\n * @returns SinkInstance\n */\n/* jshint ignore:end */\nSinkPage.prototype.getInstance = function getInstance(payload) {\n  return new SinkInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SinkPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSinkPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSinkPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SinkContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SinkInstance\n *\n * @property {Date} dateCreated - The date this Sink was created\n * @property {Date} dateUpdated - The date this Sink was updated\n * @property {string} description - Sink Description\n * @property {string} sid - A string that uniquely identifies this Sink.\n * @property {object} sinkConfiguration - JSON Sink configuration.\n * @property {sink.sink_type} sinkType - Sink type.\n * @property {sink.status} status - The Status of this Sink\n * @property {string} url - The URL of this resource.\n * @property {string} links - Nested resource URLs.\n *\n * @param {V1} version - Version of the resource\n * @param {SinkPayload} payload - The instance payload\n * @param {sid} sid - A string that uniquely identifies this Sink.\n */\n/* jshint ignore:end */\nSinkInstance = function SinkInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.description = payload.description; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.sinkConfiguration = payload.sink_configuration; // jshint ignore:line\n  this.sinkType = payload.sink_type; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(SinkInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new SinkContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a SinkInstance\n *\n * @function fetch\n * @memberof Twilio.Events.V1.SinkInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SinkInstance\n */\n/* jshint ignore:end */\nSinkInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a SinkInstance\n *\n * @function remove\n * @memberof Twilio.Events.V1.SinkInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SinkInstance\n */\n/* jshint ignore:end */\nSinkInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a SinkInstance\n *\n * @function update\n * @memberof Twilio.Events.V1.SinkInstance#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.description - Sink Description\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SinkInstance\n */\n/* jshint ignore:end */\nSinkInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the sinkTest\n *\n * @function sinkTest\n * @memberof Twilio.Events.V1.SinkInstance#\n *\n * @returns {Twilio.Events.V1.SinkContext.SinkTestList}\n */\n/* jshint ignore:end */\nSinkInstance.prototype.sinkTest = function sinkTest() {\n  return this._proxy.sinkTest;\n};\n\n/* jshint ignore:start */\n/**\n * Access the sinkValidate\n *\n * @function sinkValidate\n * @memberof Twilio.Events.V1.SinkInstance#\n *\n * @returns {Twilio.Events.V1.SinkContext.SinkValidateList}\n */\n/* jshint ignore:end */\nSinkInstance.prototype.sinkValidate = function sinkValidate() {\n  return this._proxy.sinkValidate;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SinkInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSinkInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSinkInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SinkContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SinkContext\n *\n * @property {Twilio.Events.V1.SinkContext.SinkTestList} sinkTest -\n *          sinkTest resource\n * @property {Twilio.Events.V1.SinkContext.SinkValidateList} sinkValidate -\n *          sinkValidate resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - A string that uniquely identifies this Sink.\n */\n/* jshint ignore:end */\nSinkContext = function SinkContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/Sinks/${sid}`;\n\n  // Dependents\n  this._sinkTest = undefined;\n  this._sinkValidate = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a SinkInstance\n *\n * @function fetch\n * @memberof Twilio.Events.V1.SinkContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SinkInstance\n */\n/* jshint ignore:end */\nSinkContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new SinkInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a SinkInstance\n *\n * @function remove\n * @memberof Twilio.Events.V1.SinkContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SinkInstance\n */\n/* jshint ignore:end */\nSinkContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a SinkInstance\n *\n * @function update\n * @memberof Twilio.Events.V1.SinkContext#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.description - Sink Description\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SinkInstance\n */\n/* jshint ignore:end */\nSinkContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n  if (_.isUndefined(opts.description)) {\n    throw new Error('Required parameter \"opts.description\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({'Description': _.get(opts, 'description')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new SinkInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(SinkContext.prototype,\n  'sinkTest', {\n    get: function() {\n      if (!this._sinkTest) {\n        this._sinkTest = new SinkTestList(this._version, this._solution.sid);\n      }\n      return this._sinkTest;\n    }\n});\n\nObject.defineProperty(SinkContext.prototype,\n  'sinkValidate', {\n    get: function() {\n      if (!this._sinkValidate) {\n        this._sinkValidate = new SinkValidateList(this._version, this._solution.sid);\n      }\n      return this._sinkValidate;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SinkContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSinkContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nSinkContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  SinkList: SinkList,\n  SinkPage: SinkPage,\n  SinkInstance: SinkInstance,\n  SinkContext: SinkContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}