{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../../base/Page'); /* jshint ignore:line */\nvar serialize = require('../../../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../../../base/values'); /* jshint ignore:line */\n\nvar NotificationList;\nvar NotificationPage;\nvar NotificationInstance;\nvar NotificationContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the NotificationList\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationList\n *\n * @param {Twilio.Conversations.V1} version - Version of the resource\n * @param {string} chatServiceSid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nNotificationList = function NotificationList(version, chatServiceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function notifications\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationContext}\n   */\n  /* jshint ignore:end */\n  function NotificationListInstance(sid) {\n    return NotificationListInstance.get(sid);\n  }\n  NotificationListInstance._version = version;\n  // Path Solution\n  NotificationListInstance._solution = {\n    chatServiceSid: chatServiceSid\n  };\n  /* jshint ignore:start */\n  /**\n   * Constructs a notification\n   *\n   * @function get\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationList#\n   *\n   * @returns {Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationContext}\n   */\n  /* jshint ignore:end */\n  NotificationListInstance.get = function get() {\n    return new NotificationContext(this._version, this._solution.chatServiceSid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  NotificationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  NotificationListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return NotificationListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the NotificationPage\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {NotificationSolution} solution - Path solution\n *\n * @returns NotificationPage\n */\n/* jshint ignore:end */\nNotificationPage = function NotificationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(NotificationPage.prototype, Page.prototype);\nNotificationPage.prototype.constructor = NotificationPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of NotificationInstance\n *\n * @function getInstance\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationPage#\n *\n * @param {NotificationPayload} payload - Payload response from the API\n *\n * @returns NotificationInstance\n */\n/* jshint ignore:end */\nNotificationPage.prototype.getInstance = function getInstance(payload) {\n  return new NotificationInstance(this._version, payload, this._solution.chatServiceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNotificationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nNotificationPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the NotificationContext\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationInstance\n *\n * @property {string} accountSid -\n *          The unique ID of the Account responsible for this configuration.\n * @property {string} chatServiceSid -\n *          The SID of the Conversation Service that the Configuration applies to.\n * @property {object} newMessage -\n *          The Push Notification configuration for New Messages.\n * @property {object} addedToConversation -\n *          The Push Notification configuration for being added to a Conversation.\n * @property {object} removedFromConversation -\n *          The Push Notification configuration for being removed from a Conversation.\n * @property {boolean} logEnabled - Weather the notification logging is enabled.\n * @property {string} url - An absolute URL for this configuration.\n *\n * @param {V1} version - Version of the resource\n * @param {NotificationPayload} payload - The instance payload\n * @param {sid} chatServiceSid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nNotificationInstance = function NotificationInstance(version, payload, chatServiceSid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.chatServiceSid = payload.chat_service_sid; // jshint ignore:line\n  this.newMessage = payload.new_message; // jshint ignore:line\n  this.addedToConversation = payload.added_to_conversation; // jshint ignore:line\n  this.removedFromConversation = payload.removed_from_conversation; // jshint ignore:line\n  this.logEnabled = payload.log_enabled; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    chatServiceSid: chatServiceSid\n  };\n};\nObject.defineProperty(NotificationInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new NotificationContext(this._version, this._solution.chatServiceSid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * update a NotificationInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {boolean} [opts.logEnabled] -\n *          Weather the notification logging is enabled.\n * @param {boolean} [opts.newMessage.enabled] -\n *          Whether to send a notification when a new message is added to a conversation.\n * @param {string} [opts.newMessage.template] -\n *          The template to use to create the notification text displayed when a new message is added to a conversation.\n * @param {string} [opts.newMessage.sound] -\n *          The name of the sound to play when a new message is added to a conversation.\n * @param {boolean} [opts.newMessage.badgeCountEnabled] -\n *          Whether the new message badge is enabled.\n * @param {boolean} [opts.addedToConversation.enabled] -\n *          Whether to send a notification when a participant is added to a conversation.\n * @param {string} [opts.addedToConversation.template] -\n *          The template to use to create the notification text displayed when a participant is added to a conversation.\n * @param {string} [opts.addedToConversation.sound] -\n *          The name of the sound to play when a participant is added to a conversation.\n * @param {boolean} [opts.removedFromConversation.enabled] -\n *          Whether to send a notification to a user when they are removed from a conversation.\n * @param {string} [opts.removedFromConversation.template] -\n *          The template to use to create the notification text displayed to a user when they are removed.\n * @param {string} [opts.removedFromConversation.sound] -\n *          The name of the sound to play to a user when they are removed from a conversation.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NotificationInstance\n */\n/* jshint ignore:end */\nNotificationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a NotificationInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NotificationInstance\n */\n/* jshint ignore:end */\nNotificationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNotificationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nNotificationInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the NotificationContext\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} chatServiceSid -\n *          The SID of the Conversation Service that the Configuration applies to.\n */\n/* jshint ignore:end */\nNotificationContext = function NotificationContext(version, chatServiceSid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    chatServiceSid: chatServiceSid\n  };\n  this._uri = `/Services/${chatServiceSid}/Configuration/Notifications`;\n};\n\n/* jshint ignore:start */\n/**\n * update a NotificationInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {boolean} [opts.logEnabled] -\n *          Weather the notification logging is enabled.\n * @param {boolean} [opts.newMessage.enabled] -\n *          Whether to send a notification when a new message is added to a conversation.\n * @param {string} [opts.newMessage.template] -\n *          The template to use to create the notification text displayed when a new message is added to a conversation.\n * @param {string} [opts.newMessage.sound] -\n *          The name of the sound to play when a new message is added to a conversation.\n * @param {boolean} [opts.newMessage.badgeCountEnabled] -\n *          Whether the new message badge is enabled.\n * @param {boolean} [opts.addedToConversation.enabled] -\n *          Whether to send a notification when a participant is added to a conversation.\n * @param {string} [opts.addedToConversation.template] -\n *          The template to use to create the notification text displayed when a participant is added to a conversation.\n * @param {string} [opts.addedToConversation.sound] -\n *          The name of the sound to play when a participant is added to a conversation.\n * @param {boolean} [opts.removedFromConversation.enabled] -\n *          Whether to send a notification to a user when they are removed from a conversation.\n * @param {string} [opts.removedFromConversation.template] -\n *          The template to use to create the notification text displayed to a user when they are removed.\n * @param {string} [opts.removedFromConversation.sound] -\n *          The name of the sound to play to a user when they are removed from a conversation.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NotificationInstance\n */\n/* jshint ignore:end */\nNotificationContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'LogEnabled': serialize.bool(_.get(opts, 'logEnabled')),\n    'NewMessage.Enabled': serialize.bool(_.get(opts, 'newMessage.enabled')),\n    'NewMessage.Template': _.get(opts, 'newMessage.template'),\n    'NewMessage.Sound': _.get(opts, 'newMessage.sound'),\n    'NewMessage.BadgeCountEnabled': serialize.bool(_.get(opts, 'newMessage.badgeCountEnabled')),\n    'AddedToConversation.Enabled': serialize.bool(_.get(opts, 'addedToConversation.enabled')),\n    'AddedToConversation.Template': _.get(opts, 'addedToConversation.template'),\n    'AddedToConversation.Sound': _.get(opts, 'addedToConversation.sound'),\n    'RemovedFromConversation.Enabled': serialize.bool(_.get(opts, 'removedFromConversation.enabled')),\n    'RemovedFromConversation.Template': _.get(opts, 'removedFromConversation.template'),\n    'RemovedFromConversation.Sound': _.get(opts, 'removedFromConversation.sound')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new NotificationInstance(this._version, payload, this._solution.chatServiceSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a NotificationInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NotificationInstance\n */\n/* jshint ignore:end */\nNotificationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new NotificationInstance(this._version, payload, this._solution.chatServiceSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNotificationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nNotificationContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  NotificationList: NotificationList,\n  NotificationPage: NotificationPage,\n  NotificationInstance: NotificationInstance,\n  NotificationContext: NotificationContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","serialize","values","NotificationList","NotificationPage","NotificationInstance","NotificationContext","version","chatServiceSid","NotificationListInstance","sid","get","_version","_solution","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","payload","clone","forOwn","value","key","startsWith","isFunction","accountSid","account_sid","chat_service_sid","newMessage","new_message","addedToConversation","added_to_conversation","removedFromConversation","removed_from_conversation","logEnabled","log_enabled","url","_context","undefined","Object","defineProperty","update","opts","callback","_proxy","fetch","_uri","deferred","defer","data","of","bool","promise","uri","method","then","resolve","bind","catch","error","reject","nodeify","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/conversations/v1/service/configuration/notification.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar NotificationList;\nvar NotificationPage;\nvar NotificationInstance;\nvar NotificationContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the NotificationList\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationList\n *\n * @param {Twilio.Conversations.V1} version - Version of the resource\n * @param {string} chatServiceSid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nNotificationList = function NotificationList(version, chatServiceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function notifications\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationContext}\n   */\n  /* jshint ignore:end */\n  function NotificationListInstance(sid) {\n    return NotificationListInstance.get(sid);\n  }\n\n  NotificationListInstance._version = version;\n  // Path Solution\n  NotificationListInstance._solution = {chatServiceSid: chatServiceSid};\n  /* jshint ignore:start */\n  /**\n   * Constructs a notification\n   *\n   * @function get\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationList#\n   *\n   * @returns {Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationContext}\n   */\n  /* jshint ignore:end */\n  NotificationListInstance.get = function get() {\n    return new NotificationContext(this._version, this._solution.chatServiceSid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  NotificationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  NotificationListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return NotificationListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the NotificationPage\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {NotificationSolution} solution - Path solution\n *\n * @returns NotificationPage\n */\n/* jshint ignore:end */\nNotificationPage = function NotificationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(NotificationPage.prototype, Page.prototype);\nNotificationPage.prototype.constructor = NotificationPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of NotificationInstance\n *\n * @function getInstance\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationPage#\n *\n * @param {NotificationPayload} payload - Payload response from the API\n *\n * @returns NotificationInstance\n */\n/* jshint ignore:end */\nNotificationPage.prototype.getInstance = function getInstance(payload) {\n  return new NotificationInstance(this._version, payload, this._solution.chatServiceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNotificationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nNotificationPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the NotificationContext\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationInstance\n *\n * @property {string} accountSid -\n *          The unique ID of the Account responsible for this configuration.\n * @property {string} chatServiceSid -\n *          The SID of the Conversation Service that the Configuration applies to.\n * @property {object} newMessage -\n *          The Push Notification configuration for New Messages.\n * @property {object} addedToConversation -\n *          The Push Notification configuration for being added to a Conversation.\n * @property {object} removedFromConversation -\n *          The Push Notification configuration for being removed from a Conversation.\n * @property {boolean} logEnabled - Weather the notification logging is enabled.\n * @property {string} url - An absolute URL for this configuration.\n *\n * @param {V1} version - Version of the resource\n * @param {NotificationPayload} payload - The instance payload\n * @param {sid} chatServiceSid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nNotificationInstance = function NotificationInstance(version, payload,\n                                                      chatServiceSid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.chatServiceSid = payload.chat_service_sid; // jshint ignore:line\n  this.newMessage = payload.new_message; // jshint ignore:line\n  this.addedToConversation = payload.added_to_conversation; // jshint ignore:line\n  this.removedFromConversation = payload.removed_from_conversation; // jshint ignore:line\n  this.logEnabled = payload.log_enabled; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {chatServiceSid: chatServiceSid, };\n};\n\nObject.defineProperty(NotificationInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new NotificationContext(this._version, this._solution.chatServiceSid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * update a NotificationInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {boolean} [opts.logEnabled] -\n *          Weather the notification logging is enabled.\n * @param {boolean} [opts.newMessage.enabled] -\n *          Whether to send a notification when a new message is added to a conversation.\n * @param {string} [opts.newMessage.template] -\n *          The template to use to create the notification text displayed when a new message is added to a conversation.\n * @param {string} [opts.newMessage.sound] -\n *          The name of the sound to play when a new message is added to a conversation.\n * @param {boolean} [opts.newMessage.badgeCountEnabled] -\n *          Whether the new message badge is enabled.\n * @param {boolean} [opts.addedToConversation.enabled] -\n *          Whether to send a notification when a participant is added to a conversation.\n * @param {string} [opts.addedToConversation.template] -\n *          The template to use to create the notification text displayed when a participant is added to a conversation.\n * @param {string} [opts.addedToConversation.sound] -\n *          The name of the sound to play when a participant is added to a conversation.\n * @param {boolean} [opts.removedFromConversation.enabled] -\n *          Whether to send a notification to a user when they are removed from a conversation.\n * @param {string} [opts.removedFromConversation.template] -\n *          The template to use to create the notification text displayed to a user when they are removed.\n * @param {string} [opts.removedFromConversation.sound] -\n *          The name of the sound to play to a user when they are removed from a conversation.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NotificationInstance\n */\n/* jshint ignore:end */\nNotificationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a NotificationInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NotificationInstance\n */\n/* jshint ignore:end */\nNotificationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNotificationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nNotificationInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the NotificationContext\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} chatServiceSid -\n *          The SID of the Conversation Service that the Configuration applies to.\n */\n/* jshint ignore:end */\nNotificationContext = function NotificationContext(version, chatServiceSid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {chatServiceSid: chatServiceSid, };\n  this._uri = `/Services/${chatServiceSid}/Configuration/Notifications`;\n};\n\n/* jshint ignore:start */\n/**\n * update a NotificationInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {boolean} [opts.logEnabled] -\n *          Weather the notification logging is enabled.\n * @param {boolean} [opts.newMessage.enabled] -\n *          Whether to send a notification when a new message is added to a conversation.\n * @param {string} [opts.newMessage.template] -\n *          The template to use to create the notification text displayed when a new message is added to a conversation.\n * @param {string} [opts.newMessage.sound] -\n *          The name of the sound to play when a new message is added to a conversation.\n * @param {boolean} [opts.newMessage.badgeCountEnabled] -\n *          Whether the new message badge is enabled.\n * @param {boolean} [opts.addedToConversation.enabled] -\n *          Whether to send a notification when a participant is added to a conversation.\n * @param {string} [opts.addedToConversation.template] -\n *          The template to use to create the notification text displayed when a participant is added to a conversation.\n * @param {string} [opts.addedToConversation.sound] -\n *          The name of the sound to play when a participant is added to a conversation.\n * @param {boolean} [opts.removedFromConversation.enabled] -\n *          Whether to send a notification to a user when they are removed from a conversation.\n * @param {string} [opts.removedFromConversation.template] -\n *          The template to use to create the notification text displayed to a user when they are removed.\n * @param {string} [opts.removedFromConversation.sound] -\n *          The name of the sound to play to a user when they are removed from a conversation.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NotificationInstance\n */\n/* jshint ignore:end */\nNotificationContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'LogEnabled': serialize.bool(_.get(opts, 'logEnabled')),\n    'NewMessage.Enabled': serialize.bool(_.get(opts, 'newMessage.enabled')),\n    'NewMessage.Template': _.get(opts, 'newMessage.template'),\n    'NewMessage.Sound': _.get(opts, 'newMessage.sound'),\n    'NewMessage.BadgeCountEnabled': serialize.bool(_.get(opts, 'newMessage.badgeCountEnabled')),\n    'AddedToConversation.Enabled': serialize.bool(_.get(opts, 'addedToConversation.enabled')),\n    'AddedToConversation.Template': _.get(opts, 'addedToConversation.template'),\n    'AddedToConversation.Sound': _.get(opts, 'addedToConversation.sound'),\n    'RemovedFromConversation.Enabled': serialize.bool(_.get(opts, 'removedFromConversation.enabled')),\n    'RemovedFromConversation.Template': _.get(opts, 'removedFromConversation.template'),\n    'RemovedFromConversation.Sound': _.get(opts, 'removedFromConversation.sound')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new NotificationInstance(this._version, payload, this._solution.chatServiceSid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a NotificationInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NotificationInstance\n */\n/* jshint ignore:end */\nNotificationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new NotificationInstance(this._version, payload, this._solution.chatServiceSid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNotificationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nNotificationContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  NotificationList: NotificationList,\n  NotificationPage: NotificationPage,\n  NotificationInstance: NotificationInstance,\n  NotificationContext: NotificationContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}