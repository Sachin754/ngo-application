{"ast":null,"code":"\"use strict\";\n\n/*\n * This code was generated by\n * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __\n *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\\ | |___ |__/ |__|  | |  | |__/\n *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \\| |___ |  \\ |  |  | |__| |  \\\n *\n * Twilio - Bulkexports\n * This is the public Twilio REST API.\n *\n * NOTE: This class is auto generated by OpenAPI Generator.\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExportConfigurationListInstance = exports.ExportConfigurationInstance = exports.ExportConfigurationContextImpl = void 0;\nconst util_1 = require(\"util\");\nconst deserialize = require(\"../../../base/deserialize\");\nconst serialize = require(\"../../../base/serialize\");\nconst utility_1 = require(\"../../../base/utility\");\nclass ExportConfigurationContextImpl {\n  constructor(_version, resourceType) {\n    this._version = _version;\n    if (!(0, utility_1.isValidPathParam)(resourceType)) {\n      throw new Error(\"Parameter 'resourceType' is not valid.\");\n    }\n    this._solution = {\n      resourceType\n    };\n    this._uri = `/Exports/${resourceType}/Configuration`;\n  }\n  fetch(callback) {\n    const instance = this;\n    let operationVersion = instance._version,\n      operationPromise = operationVersion.fetch({\n        uri: instance._uri,\n        method: \"get\"\n      });\n    operationPromise = operationPromise.then(payload => new ExportConfigurationInstance(operationVersion, payload, instance._solution.resourceType));\n    operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n    return operationPromise;\n  }\n  update(params, callback) {\n    if (params instanceof Function) {\n      callback = params;\n      params = {};\n    } else {\n      params = params || {};\n    }\n    let data = {};\n    if (params[\"enabled\"] !== undefined) data[\"Enabled\"] = serialize.bool(params[\"enabled\"]);\n    if (params[\"webhookUrl\"] !== undefined) data[\"WebhookUrl\"] = params[\"webhookUrl\"];\n    if (params[\"webhookMethod\"] !== undefined) data[\"WebhookMethod\"] = params[\"webhookMethod\"];\n    const headers = {};\n    headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n    const instance = this;\n    let operationVersion = instance._version,\n      operationPromise = operationVersion.update({\n        uri: instance._uri,\n        method: \"post\",\n        data,\n        headers\n      });\n    operationPromise = operationPromise.then(payload => new ExportConfigurationInstance(operationVersion, payload, instance._solution.resourceType));\n    operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n    return operationPromise;\n  }\n  /**\n   * Provide a user-friendly representation\n   *\n   * @returns Object\n   */\n  toJSON() {\n    return this._solution;\n  }\n  [util_1.inspect.custom](_depth, options) {\n    return (0, util_1.inspect)(this.toJSON(), options);\n  }\n}\nexports.ExportConfigurationContextImpl = ExportConfigurationContextImpl;\nclass ExportConfigurationInstance {\n  constructor(_version, payload, resourceType) {\n    this._version = _version;\n    this.enabled = payload.enabled;\n    this.webhookUrl = payload.webhook_url;\n    this.webhookMethod = payload.webhook_method;\n    this.resourceType = payload.resource_type;\n    this.url = payload.url;\n    this._solution = {\n      resourceType: resourceType || this.resourceType\n    };\n  }\n  get _proxy() {\n    this._context = this._context || new ExportConfigurationContextImpl(this._version, this._solution.resourceType);\n    return this._context;\n  }\n  /**\n   * Fetch a ExportConfigurationInstance\n   *\n   * @param callback - Callback to handle processed record\n   *\n   * @returns Resolves to processed ExportConfigurationInstance\n   */\n  fetch(callback) {\n    return this._proxy.fetch(callback);\n  }\n  update(params, callback) {\n    return this._proxy.update(params, callback);\n  }\n  /**\n   * Provide a user-friendly representation\n   *\n   * @returns Object\n   */\n  toJSON() {\n    return {\n      enabled: this.enabled,\n      webhookUrl: this.webhookUrl,\n      webhookMethod: this.webhookMethod,\n      resourceType: this.resourceType,\n      url: this.url\n    };\n  }\n  [util_1.inspect.custom](_depth, options) {\n    return (0, util_1.inspect)(this.toJSON(), options);\n  }\n}\nexports.ExportConfigurationInstance = ExportConfigurationInstance;\nfunction ExportConfigurationListInstance(version) {\n  const instance = resourceType => instance.get(resourceType);\n  instance.get = function get(resourceType) {\n    return new ExportConfigurationContextImpl(version, resourceType);\n  };\n  instance._version = version;\n  instance._solution = {};\n  instance._uri = ``;\n  instance.toJSON = function toJSON() {\n    return instance._solution;\n  };\n  instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {\n    return (0, util_1.inspect)(instance.toJSON(), options);\n  };\n  return instance;\n}\nexports.ExportConfigurationListInstance = ExportConfigurationListInstance;","map":{"version":3,"names":["Object","defineProperty","exports","value","ExportConfigurationListInstance","ExportConfigurationInstance","ExportConfigurationContextImpl","util_1","require","deserialize","serialize","utility_1","constructor","_version","resourceType","isValidPathParam","Error","_solution","_uri","fetch","callback","instance","operationVersion","operationPromise","uri","method","then","payload","setPromiseCallback","update","params","Function","data","undefined","bool","headers","toJSON","inspect","custom","_depth","options","enabled","webhookUrl","webhook_url","webhookMethod","webhook_method","resource_type","url","_proxy","_context","version","get","inspectImpl"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/bulkexports/v1/exportConfiguration.js"],"sourcesContent":["\"use strict\";\n/*\n * This code was generated by\n * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __\n *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\\ | |___ |__/ |__|  | |  | |__/\n *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \\| |___ |  \\ |  |  | |__| |  \\\n *\n * Twilio - Bulkexports\n * This is the public Twilio REST API.\n *\n * NOTE: This class is auto generated by OpenAPI Generator.\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExportConfigurationListInstance = exports.ExportConfigurationInstance = exports.ExportConfigurationContextImpl = void 0;\nconst util_1 = require(\"util\");\nconst deserialize = require(\"../../../base/deserialize\");\nconst serialize = require(\"../../../base/serialize\");\nconst utility_1 = require(\"../../../base/utility\");\nclass ExportConfigurationContextImpl {\n    constructor(_version, resourceType) {\n        this._version = _version;\n        if (!(0, utility_1.isValidPathParam)(resourceType)) {\n            throw new Error(\"Parameter 'resourceType' is not valid.\");\n        }\n        this._solution = { resourceType };\n        this._uri = `/Exports/${resourceType}/Configuration`;\n    }\n    fetch(callback) {\n        const instance = this;\n        let operationVersion = instance._version, operationPromise = operationVersion.fetch({\n            uri: instance._uri,\n            method: \"get\",\n        });\n        operationPromise = operationPromise.then((payload) => new ExportConfigurationInstance(operationVersion, payload, instance._solution.resourceType));\n        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n        return operationPromise;\n    }\n    update(params, callback) {\n        if (params instanceof Function) {\n            callback = params;\n            params = {};\n        }\n        else {\n            params = params || {};\n        }\n        let data = {};\n        if (params[\"enabled\"] !== undefined)\n            data[\"Enabled\"] = serialize.bool(params[\"enabled\"]);\n        if (params[\"webhookUrl\"] !== undefined)\n            data[\"WebhookUrl\"] = params[\"webhookUrl\"];\n        if (params[\"webhookMethod\"] !== undefined)\n            data[\"WebhookMethod\"] = params[\"webhookMethod\"];\n        const headers = {};\n        headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n        const instance = this;\n        let operationVersion = instance._version, operationPromise = operationVersion.update({\n            uri: instance._uri,\n            method: \"post\",\n            data,\n            headers,\n        });\n        operationPromise = operationPromise.then((payload) => new ExportConfigurationInstance(operationVersion, payload, instance._solution.resourceType));\n        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n        return operationPromise;\n    }\n    /**\n     * Provide a user-friendly representation\n     *\n     * @returns Object\n     */\n    toJSON() {\n        return this._solution;\n    }\n    [util_1.inspect.custom](_depth, options) {\n        return (0, util_1.inspect)(this.toJSON(), options);\n    }\n}\nexports.ExportConfigurationContextImpl = ExportConfigurationContextImpl;\nclass ExportConfigurationInstance {\n    constructor(_version, payload, resourceType) {\n        this._version = _version;\n        this.enabled = payload.enabled;\n        this.webhookUrl = payload.webhook_url;\n        this.webhookMethod = payload.webhook_method;\n        this.resourceType = payload.resource_type;\n        this.url = payload.url;\n        this._solution = { resourceType: resourceType || this.resourceType };\n    }\n    get _proxy() {\n        this._context =\n            this._context ||\n                new ExportConfigurationContextImpl(this._version, this._solution.resourceType);\n        return this._context;\n    }\n    /**\n     * Fetch a ExportConfigurationInstance\n     *\n     * @param callback - Callback to handle processed record\n     *\n     * @returns Resolves to processed ExportConfigurationInstance\n     */\n    fetch(callback) {\n        return this._proxy.fetch(callback);\n    }\n    update(params, callback) {\n        return this._proxy.update(params, callback);\n    }\n    /**\n     * Provide a user-friendly representation\n     *\n     * @returns Object\n     */\n    toJSON() {\n        return {\n            enabled: this.enabled,\n            webhookUrl: this.webhookUrl,\n            webhookMethod: this.webhookMethod,\n            resourceType: this.resourceType,\n            url: this.url,\n        };\n    }\n    [util_1.inspect.custom](_depth, options) {\n        return (0, util_1.inspect)(this.toJSON(), options);\n    }\n}\nexports.ExportConfigurationInstance = ExportConfigurationInstance;\nfunction ExportConfigurationListInstance(version) {\n    const instance = ((resourceType) => instance.get(resourceType));\n    instance.get = function get(resourceType) {\n        return new ExportConfigurationContextImpl(version, resourceType);\n    };\n    instance._version = version;\n    instance._solution = {};\n    instance._uri = ``;\n    instance.toJSON = function toJSON() {\n        return instance._solution;\n    };\n    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {\n        return (0, util_1.inspect)(instance.toJSON(), options);\n    };\n    return instance;\n}\nexports.ExportConfigurationListInstance = ExportConfigurationListInstance;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}