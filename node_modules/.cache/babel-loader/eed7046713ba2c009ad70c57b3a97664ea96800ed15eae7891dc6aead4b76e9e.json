{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar NetworkAccessProfileNetworkList = require('./networkAccessProfile/networkAccessProfileNetwork').NetworkAccessProfileNetworkList;\nvar Page = require('../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../base/values'); /* jshint ignore:line */\n\nvar NetworkAccessProfileList;\nvar NetworkAccessProfilePage;\nvar NetworkAccessProfileInstance;\nvar NetworkAccessProfileContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the NetworkAccessProfileList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.NetworkAccessProfileList\n *\n * @param {Twilio.Supersim.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nNetworkAccessProfileList = function NetworkAccessProfileList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function networkAccessProfiles\n   * @memberof Twilio.Supersim.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Supersim.V1.NetworkAccessProfileContext}\n   */\n  /* jshint ignore:end */\n  function NetworkAccessProfileListInstance(sid) {\n    return NetworkAccessProfileListInstance.get(sid);\n  }\n  NetworkAccessProfileListInstance._version = version;\n  // Path Solution\n  NetworkAccessProfileListInstance._solution = {};\n  NetworkAccessProfileListInstance._uri = `/NetworkAccessProfiles`;\n  /* jshint ignore:start */\n  /**\n   * create a NetworkAccessProfileInstance\n   *\n   * @function create\n   * @memberof Twilio.Supersim.V1.NetworkAccessProfileList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {string|list} [opts.networks] -\n   *          List of Network SIDs that this Network Access Profile will allow connections to\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed NetworkAccessProfileInstance\n   */\n  /* jshint ignore:end */\n  NetworkAccessProfileListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'Networks': serialize.map(_.get(opts, 'networks'), function (e) {\n        return e;\n      })\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new NetworkAccessProfileInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams NetworkAccessProfileInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Supersim.V1.NetworkAccessProfileList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  NetworkAccessProfileListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists NetworkAccessProfileInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Supersim.V1.NetworkAccessProfileList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  NetworkAccessProfileListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of NetworkAccessProfileInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Supersim.V1.NetworkAccessProfileList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  NetworkAccessProfileListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new NetworkAccessProfilePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of NetworkAccessProfileInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Supersim.V1.NetworkAccessProfileList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  NetworkAccessProfileListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new NetworkAccessProfilePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a network_access_profile\n   *\n   * @function get\n   * @memberof Twilio.Supersim.V1.NetworkAccessProfileList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Supersim.V1.NetworkAccessProfileContext}\n   */\n  /* jshint ignore:end */\n  NetworkAccessProfileListInstance.get = function get(sid) {\n    return new NetworkAccessProfileContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Supersim.V1.NetworkAccessProfileList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  NetworkAccessProfileListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  NetworkAccessProfileListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return NetworkAccessProfileListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the NetworkAccessProfilePage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.NetworkAccessProfilePage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {NetworkAccessProfileSolution} solution - Path solution\n *\n * @returns NetworkAccessProfilePage\n */\n/* jshint ignore:end */\nNetworkAccessProfilePage = function NetworkAccessProfilePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(NetworkAccessProfilePage.prototype, Page.prototype);\nNetworkAccessProfilePage.prototype.constructor = NetworkAccessProfilePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of NetworkAccessProfileInstance\n *\n * @function getInstance\n * @memberof Twilio.Supersim.V1.NetworkAccessProfilePage#\n *\n * @param {NetworkAccessProfilePayload} payload - Payload response from the API\n *\n * @returns NetworkAccessProfileInstance\n */\n/* jshint ignore:end */\nNetworkAccessProfilePage.prototype.getInstance = function getInstance(payload) {\n  return new NetworkAccessProfileInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.NetworkAccessProfilePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNetworkAccessProfilePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nNetworkAccessProfilePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the NetworkAccessProfileContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.NetworkAccessProfileInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {string} accountSid -\n *          The SID of the Account that the Network Access Profile belongs to\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The links\n *\n * @param {V1} version - Version of the resource\n * @param {NetworkAccessProfilePayload} payload - The instance payload\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nNetworkAccessProfileInstance = function NetworkAccessProfileInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(NetworkAccessProfileInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new NetworkAccessProfileContext(this._version, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a NetworkAccessProfileInstance\n *\n * @function fetch\n * @memberof Twilio.Supersim.V1.NetworkAccessProfileInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NetworkAccessProfileInstance\n */\n/* jshint ignore:end */\nNetworkAccessProfileInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a NetworkAccessProfileInstance\n *\n * @function update\n * @memberof Twilio.Supersim.V1.NetworkAccessProfileInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.uniqueName] - The new unique name of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NetworkAccessProfileInstance\n */\n/* jshint ignore:end */\nNetworkAccessProfileInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the networks\n *\n * @function networks\n * @memberof Twilio.Supersim.V1.NetworkAccessProfileInstance#\n *\n * @returns {Twilio.Supersim.V1.NetworkAccessProfileContext.NetworkAccessProfileNetworkList}\n */\n/* jshint ignore:end */\nNetworkAccessProfileInstance.prototype.networks = function networks() {\n  return this._proxy.networks;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.NetworkAccessProfileInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNetworkAccessProfileInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nNetworkAccessProfileInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the NetworkAccessProfileContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.NetworkAccessProfileContext\n *\n * @property {Twilio.Supersim.V1.NetworkAccessProfileContext.NetworkAccessProfileNetworkList} networks -\n *          networks resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nNetworkAccessProfileContext = function NetworkAccessProfileContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/NetworkAccessProfiles/${sid}`;\n\n  // Dependents\n  this._networks = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a NetworkAccessProfileInstance\n *\n * @function fetch\n * @memberof Twilio.Supersim.V1.NetworkAccessProfileContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NetworkAccessProfileInstance\n */\n/* jshint ignore:end */\nNetworkAccessProfileContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new NetworkAccessProfileInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a NetworkAccessProfileInstance\n *\n * @function update\n * @memberof Twilio.Supersim.V1.NetworkAccessProfileContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.uniqueName] - The new unique name of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NetworkAccessProfileInstance\n */\n/* jshint ignore:end */\nNetworkAccessProfileContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'UniqueName': _.get(opts, 'uniqueName')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new NetworkAccessProfileInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(NetworkAccessProfileContext.prototype, 'networks', {\n  get: function () {\n    if (!this._networks) {\n      this._networks = new NetworkAccessProfileNetworkList(this._version, this._solution.sid);\n    }\n    return this._networks;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.NetworkAccessProfileContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNetworkAccessProfileContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nNetworkAccessProfileContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  NetworkAccessProfileList: NetworkAccessProfileList,\n  NetworkAccessProfilePage: NetworkAccessProfilePage,\n  NetworkAccessProfileInstance: NetworkAccessProfileInstance,\n  NetworkAccessProfileContext: NetworkAccessProfileContext\n};","map":{"version":3,"names":["Q","require","_","util","NetworkAccessProfileNetworkList","Page","deserialize","serialize","values","NetworkAccessProfileList","NetworkAccessProfilePage","NetworkAccessProfileInstance","NetworkAccessProfileContext","version","NetworkAccessProfileListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isFunction","deferred","defer","data","of","map","e","promise","uri","method","then","payload","resolve","bind","catch","error","reject","nodeify","each","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","uniqueName","unique_name","accountSid","account_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","update","networks","_networks","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/supersim/v1/networkAccessProfile.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar NetworkAccessProfileNetworkList = require(\n    './networkAccessProfile/networkAccessProfileNetwork').NetworkAccessProfileNetworkList;\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar NetworkAccessProfileList;\nvar NetworkAccessProfilePage;\nvar NetworkAccessProfileInstance;\nvar NetworkAccessProfileContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the NetworkAccessProfileList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.NetworkAccessProfileList\n *\n * @param {Twilio.Supersim.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nNetworkAccessProfileList = function NetworkAccessProfileList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function networkAccessProfiles\n   * @memberof Twilio.Supersim.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Supersim.V1.NetworkAccessProfileContext}\n   */\n  /* jshint ignore:end */\n  function NetworkAccessProfileListInstance(sid) {\n    return NetworkAccessProfileListInstance.get(sid);\n  }\n\n  NetworkAccessProfileListInstance._version = version;\n  // Path Solution\n  NetworkAccessProfileListInstance._solution = {};\n  NetworkAccessProfileListInstance._uri = `/NetworkAccessProfiles`;\n  /* jshint ignore:start */\n  /**\n   * create a NetworkAccessProfileInstance\n   *\n   * @function create\n   * @memberof Twilio.Supersim.V1.NetworkAccessProfileList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {string|list} [opts.networks] -\n   *          List of Network SIDs that this Network Access Profile will allow connections to\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed NetworkAccessProfileInstance\n   */\n  /* jshint ignore:end */\n  NetworkAccessProfileListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'Networks': serialize.map(_.get(opts, 'networks'), function(e) { return e; })\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new NetworkAccessProfileInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams NetworkAccessProfileInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Supersim.V1.NetworkAccessProfileList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  NetworkAccessProfileListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists NetworkAccessProfileInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Supersim.V1.NetworkAccessProfileList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  NetworkAccessProfileListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of NetworkAccessProfileInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Supersim.V1.NetworkAccessProfileList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  NetworkAccessProfileListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new NetworkAccessProfilePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of NetworkAccessProfileInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Supersim.V1.NetworkAccessProfileList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  NetworkAccessProfileListInstance.getPage = function getPage(targetUrl, callback)\n                                                               {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new NetworkAccessProfilePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a network_access_profile\n   *\n   * @function get\n   * @memberof Twilio.Supersim.V1.NetworkAccessProfileList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Supersim.V1.NetworkAccessProfileContext}\n   */\n  /* jshint ignore:end */\n  NetworkAccessProfileListInstance.get = function get(sid) {\n    return new NetworkAccessProfileContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Supersim.V1.NetworkAccessProfileList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  NetworkAccessProfileListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  NetworkAccessProfileListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return NetworkAccessProfileListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the NetworkAccessProfilePage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.NetworkAccessProfilePage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {NetworkAccessProfileSolution} solution - Path solution\n *\n * @returns NetworkAccessProfilePage\n */\n/* jshint ignore:end */\nNetworkAccessProfilePage = function NetworkAccessProfilePage(version, response,\n    solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(NetworkAccessProfilePage.prototype, Page.prototype);\nNetworkAccessProfilePage.prototype.constructor = NetworkAccessProfilePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of NetworkAccessProfileInstance\n *\n * @function getInstance\n * @memberof Twilio.Supersim.V1.NetworkAccessProfilePage#\n *\n * @param {NetworkAccessProfilePayload} payload - Payload response from the API\n *\n * @returns NetworkAccessProfileInstance\n */\n/* jshint ignore:end */\nNetworkAccessProfilePage.prototype.getInstance = function getInstance(payload) {\n  return new NetworkAccessProfileInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.NetworkAccessProfilePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNetworkAccessProfilePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nNetworkAccessProfilePage.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the NetworkAccessProfileContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.NetworkAccessProfileInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {string} accountSid -\n *          The SID of the Account that the Network Access Profile belongs to\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The links\n *\n * @param {V1} version - Version of the resource\n * @param {NetworkAccessProfilePayload} payload - The instance payload\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nNetworkAccessProfileInstance = function NetworkAccessProfileInstance(version,\n    payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(NetworkAccessProfileInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new NetworkAccessProfileContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a NetworkAccessProfileInstance\n *\n * @function fetch\n * @memberof Twilio.Supersim.V1.NetworkAccessProfileInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NetworkAccessProfileInstance\n */\n/* jshint ignore:end */\nNetworkAccessProfileInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a NetworkAccessProfileInstance\n *\n * @function update\n * @memberof Twilio.Supersim.V1.NetworkAccessProfileInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.uniqueName] - The new unique name of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NetworkAccessProfileInstance\n */\n/* jshint ignore:end */\nNetworkAccessProfileInstance.prototype.update = function update(opts, callback)\n    {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the networks\n *\n * @function networks\n * @memberof Twilio.Supersim.V1.NetworkAccessProfileInstance#\n *\n * @returns {Twilio.Supersim.V1.NetworkAccessProfileContext.NetworkAccessProfileNetworkList}\n */\n/* jshint ignore:end */\nNetworkAccessProfileInstance.prototype.networks = function networks() {\n  return this._proxy.networks;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.NetworkAccessProfileInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNetworkAccessProfileInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nNetworkAccessProfileInstance.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the NetworkAccessProfileContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.NetworkAccessProfileContext\n *\n * @property {Twilio.Supersim.V1.NetworkAccessProfileContext.NetworkAccessProfileNetworkList} networks -\n *          networks resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nNetworkAccessProfileContext = function NetworkAccessProfileContext(version, sid)\n    {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/NetworkAccessProfiles/${sid}`;\n\n  // Dependents\n  this._networks = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a NetworkAccessProfileInstance\n *\n * @function fetch\n * @memberof Twilio.Supersim.V1.NetworkAccessProfileContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NetworkAccessProfileInstance\n */\n/* jshint ignore:end */\nNetworkAccessProfileContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new NetworkAccessProfileInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a NetworkAccessProfileInstance\n *\n * @function update\n * @memberof Twilio.Supersim.V1.NetworkAccessProfileContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.uniqueName] - The new unique name of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NetworkAccessProfileInstance\n */\n/* jshint ignore:end */\nNetworkAccessProfileContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({'UniqueName': _.get(opts, 'uniqueName')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new NetworkAccessProfileInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(NetworkAccessProfileContext.prototype,\n  'networks', {\n    get: function() {\n      if (!this._networks) {\n        this._networks = new NetworkAccessProfileNetworkList(this._version, this._solution.sid);\n      }\n      return this._networks;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.NetworkAccessProfileContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNetworkAccessProfileContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nNetworkAccessProfileContext.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  NetworkAccessProfileList: NetworkAccessProfileList,\n  NetworkAccessProfilePage: NetworkAccessProfilePage,\n  NetworkAccessProfileInstance: NetworkAccessProfileInstance,\n  NetworkAccessProfileContext: NetworkAccessProfileContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}