{"ast":null,"code":"\"use strict\";\n\n/*\n * This code was generated by\n * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __\n *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\\ | |___ |__/ |__|  | |  | |__/\n *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \\| |___ |  \\ |  |  | |__| |  \\\n *\n * Twilio - Studio\n * This is the public Twilio REST API.\n *\n * NOTE: This class is auto generated by OpenAPI Generator.\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FlowTestUserListInstance = exports.FlowTestUserInstance = exports.FlowTestUserContextImpl = void 0;\nconst util_1 = require(\"util\");\nconst deserialize = require(\"../../../../base/deserialize\");\nconst serialize = require(\"../../../../base/serialize\");\nconst utility_1 = require(\"../../../../base/utility\");\nclass FlowTestUserContextImpl {\n  constructor(_version, sid) {\n    this._version = _version;\n    if (!(0, utility_1.isValidPathParam)(sid)) {\n      throw new Error(\"Parameter 'sid' is not valid.\");\n    }\n    this._solution = {\n      sid\n    };\n    this._uri = `/Flows/${sid}/TestUsers`;\n  }\n  fetch(callback) {\n    const instance = this;\n    let operationVersion = instance._version,\n      operationPromise = operationVersion.fetch({\n        uri: instance._uri,\n        method: \"get\"\n      });\n    operationPromise = operationPromise.then(payload => new FlowTestUserInstance(operationVersion, payload, instance._solution.sid));\n    operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n    return operationPromise;\n  }\n  update(params, callback) {\n    if (params === null || params === undefined) {\n      throw new Error('Required parameter \"params\" missing.');\n    }\n    if (params[\"testUsers\"] === null || params[\"testUsers\"] === undefined) {\n      throw new Error(\"Required parameter \\\"params['testUsers']\\\" missing.\");\n    }\n    let data = {};\n    data[\"TestUsers\"] = serialize.map(params[\"testUsers\"], e => e);\n    const headers = {};\n    headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n    const instance = this;\n    let operationVersion = instance._version,\n      operationPromise = operationVersion.update({\n        uri: instance._uri,\n        method: \"post\",\n        data,\n        headers\n      });\n    operationPromise = operationPromise.then(payload => new FlowTestUserInstance(operationVersion, payload, instance._solution.sid));\n    operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n    return operationPromise;\n  }\n  /**\n   * Provide a user-friendly representation\n   *\n   * @returns Object\n   */\n  toJSON() {\n    return this._solution;\n  }\n  [util_1.inspect.custom](_depth, options) {\n    return (0, util_1.inspect)(this.toJSON(), options);\n  }\n}\nexports.FlowTestUserContextImpl = FlowTestUserContextImpl;\nclass FlowTestUserInstance {\n  constructor(_version, payload, sid) {\n    this._version = _version;\n    this.sid = payload.sid;\n    this.testUsers = payload.test_users;\n    this.url = payload.url;\n    this._solution = {\n      sid\n    };\n  }\n  get _proxy() {\n    this._context = this._context || new FlowTestUserContextImpl(this._version, this._solution.sid);\n    return this._context;\n  }\n  /**\n   * Fetch a FlowTestUserInstance\n   *\n   * @param callback - Callback to handle processed record\n   *\n   * @returns Resolves to processed FlowTestUserInstance\n   */\n  fetch(callback) {\n    return this._proxy.fetch(callback);\n  }\n  update(params, callback) {\n    return this._proxy.update(params, callback);\n  }\n  /**\n   * Provide a user-friendly representation\n   *\n   * @returns Object\n   */\n  toJSON() {\n    return {\n      sid: this.sid,\n      testUsers: this.testUsers,\n      url: this.url\n    };\n  }\n  [util_1.inspect.custom](_depth, options) {\n    return (0, util_1.inspect)(this.toJSON(), options);\n  }\n}\nexports.FlowTestUserInstance = FlowTestUserInstance;\nfunction FlowTestUserListInstance(version, sid) {\n  if (!(0, utility_1.isValidPathParam)(sid)) {\n    throw new Error(\"Parameter 'sid' is not valid.\");\n  }\n  const instance = () => instance.get();\n  instance.get = function get() {\n    return new FlowTestUserContextImpl(version, sid);\n  };\n  instance._version = version;\n  instance._solution = {\n    sid\n  };\n  instance._uri = ``;\n  instance.toJSON = function toJSON() {\n    return instance._solution;\n  };\n  instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {\n    return (0, util_1.inspect)(instance.toJSON(), options);\n  };\n  return instance;\n}\nexports.FlowTestUserListInstance = FlowTestUserListInstance;","map":{"version":3,"names":["Object","defineProperty","exports","value","FlowTestUserListInstance","FlowTestUserInstance","FlowTestUserContextImpl","util_1","require","deserialize","serialize","utility_1","constructor","_version","sid","isValidPathParam","Error","_solution","_uri","fetch","callback","instance","operationVersion","operationPromise","uri","method","then","payload","setPromiseCallback","update","params","undefined","data","map","e","headers","toJSON","inspect","custom","_depth","options","testUsers","test_users","url","_proxy","_context","version","get","inspectImpl"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/studio/v2/flow/flowTestUser.js"],"sourcesContent":["\"use strict\";\n/*\n * This code was generated by\n * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __\n *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\\ | |___ |__/ |__|  | |  | |__/\n *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \\| |___ |  \\ |  |  | |__| |  \\\n *\n * Twilio - Studio\n * This is the public Twilio REST API.\n *\n * NOTE: This class is auto generated by OpenAPI Generator.\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FlowTestUserListInstance = exports.FlowTestUserInstance = exports.FlowTestUserContextImpl = void 0;\nconst util_1 = require(\"util\");\nconst deserialize = require(\"../../../../base/deserialize\");\nconst serialize = require(\"../../../../base/serialize\");\nconst utility_1 = require(\"../../../../base/utility\");\nclass FlowTestUserContextImpl {\n    constructor(_version, sid) {\n        this._version = _version;\n        if (!(0, utility_1.isValidPathParam)(sid)) {\n            throw new Error(\"Parameter 'sid' is not valid.\");\n        }\n        this._solution = { sid };\n        this._uri = `/Flows/${sid}/TestUsers`;\n    }\n    fetch(callback) {\n        const instance = this;\n        let operationVersion = instance._version, operationPromise = operationVersion.fetch({\n            uri: instance._uri,\n            method: \"get\",\n        });\n        operationPromise = operationPromise.then((payload) => new FlowTestUserInstance(operationVersion, payload, instance._solution.sid));\n        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n        return operationPromise;\n    }\n    update(params, callback) {\n        if (params === null || params === undefined) {\n            throw new Error('Required parameter \"params\" missing.');\n        }\n        if (params[\"testUsers\"] === null || params[\"testUsers\"] === undefined) {\n            throw new Error(\"Required parameter \\\"params['testUsers']\\\" missing.\");\n        }\n        let data = {};\n        data[\"TestUsers\"] = serialize.map(params[\"testUsers\"], (e) => e);\n        const headers = {};\n        headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n        const instance = this;\n        let operationVersion = instance._version, operationPromise = operationVersion.update({\n            uri: instance._uri,\n            method: \"post\",\n            data,\n            headers,\n        });\n        operationPromise = operationPromise.then((payload) => new FlowTestUserInstance(operationVersion, payload, instance._solution.sid));\n        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n        return operationPromise;\n    }\n    /**\n     * Provide a user-friendly representation\n     *\n     * @returns Object\n     */\n    toJSON() {\n        return this._solution;\n    }\n    [util_1.inspect.custom](_depth, options) {\n        return (0, util_1.inspect)(this.toJSON(), options);\n    }\n}\nexports.FlowTestUserContextImpl = FlowTestUserContextImpl;\nclass FlowTestUserInstance {\n    constructor(_version, payload, sid) {\n        this._version = _version;\n        this.sid = payload.sid;\n        this.testUsers = payload.test_users;\n        this.url = payload.url;\n        this._solution = { sid };\n    }\n    get _proxy() {\n        this._context =\n            this._context ||\n                new FlowTestUserContextImpl(this._version, this._solution.sid);\n        return this._context;\n    }\n    /**\n     * Fetch a FlowTestUserInstance\n     *\n     * @param callback - Callback to handle processed record\n     *\n     * @returns Resolves to processed FlowTestUserInstance\n     */\n    fetch(callback) {\n        return this._proxy.fetch(callback);\n    }\n    update(params, callback) {\n        return this._proxy.update(params, callback);\n    }\n    /**\n     * Provide a user-friendly representation\n     *\n     * @returns Object\n     */\n    toJSON() {\n        return {\n            sid: this.sid,\n            testUsers: this.testUsers,\n            url: this.url,\n        };\n    }\n    [util_1.inspect.custom](_depth, options) {\n        return (0, util_1.inspect)(this.toJSON(), options);\n    }\n}\nexports.FlowTestUserInstance = FlowTestUserInstance;\nfunction FlowTestUserListInstance(version, sid) {\n    if (!(0, utility_1.isValidPathParam)(sid)) {\n        throw new Error(\"Parameter 'sid' is not valid.\");\n    }\n    const instance = (() => instance.get());\n    instance.get = function get() {\n        return new FlowTestUserContextImpl(version, sid);\n    };\n    instance._version = version;\n    instance._solution = { sid };\n    instance._uri = ``;\n    instance.toJSON = function toJSON() {\n        return instance._solution;\n    };\n    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {\n        return (0, util_1.inspect)(instance.toJSON(), options);\n    };\n    return instance;\n}\nexports.FlowTestUserListInstance = FlowTestUserListInstance;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}