{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../../base/values'); /* jshint ignore:line */\n\nvar OriginationUrlList;\nvar OriginationUrlPage;\nvar OriginationUrlInstance;\nvar OriginationUrlContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the OriginationUrlList\n *\n * @constructor Twilio.Trunking.V1.TrunkContext.OriginationUrlList\n *\n * @param {Twilio.Trunking.V1} version - Version of the resource\n * @param {string} trunkSid - The SID of the Trunk that owns the Origination URL\n */\n/* jshint ignore:end */\nOriginationUrlList = function OriginationUrlList(version, trunkSid) {\n  /* jshint ignore:start */\n  /**\n   * @function originationUrls\n   * @memberof Twilio.Trunking.V1.TrunkContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Trunking.V1.TrunkContext.OriginationUrlContext}\n   */\n  /* jshint ignore:end */\n  function OriginationUrlListInstance(sid) {\n    return OriginationUrlListInstance.get(sid);\n  }\n  OriginationUrlListInstance._version = version;\n  // Path Solution\n  OriginationUrlListInstance._solution = {\n    trunkSid: trunkSid\n  };\n  OriginationUrlListInstance._uri = `/Trunks/${trunkSid}/OriginationUrls`;\n  /* jshint ignore:start */\n  /**\n   * create a OriginationUrlInstance\n   *\n   * @function create\n   * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlList#\n   *\n   * @param {object} opts - Options for request\n   * @param {number} opts.weight -\n   *          The value that determines the relative load the URI should receive compared to others with the same priority\n   * @param {number} opts.priority - The relative importance of the URI\n   * @param {boolean} opts.enabled - Whether the URL is enabled\n   * @param {string} opts.friendlyName - A string to describe the resource\n   * @param {string} opts.sipUrl -\n   *          The SIP address you want Twilio to route your Origination calls to\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed OriginationUrlInstance\n   */\n  /* jshint ignore:end */\n  OriginationUrlListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.weight)) {\n      throw new Error('Required parameter \"opts.weight\" missing.');\n    }\n    if (_.isUndefined(opts.priority)) {\n      throw new Error('Required parameter \"opts.priority\" missing.');\n    }\n    if (_.isUndefined(opts.enabled)) {\n      throw new Error('Required parameter \"opts.enabled\" missing.');\n    }\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n    if (_.isUndefined(opts.sipUrl)) {\n      throw new Error('Required parameter \"opts.sipUrl\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'Weight': _.get(opts, 'weight'),\n      'Priority': _.get(opts, 'priority'),\n      'Enabled': serialize.bool(_.get(opts, 'enabled')),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'SipUrl': _.get(opts, 'sipUrl')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new OriginationUrlInstance(this._version, payload, this._solution.trunkSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams OriginationUrlInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  OriginationUrlListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists OriginationUrlInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  OriginationUrlListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of OriginationUrlInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  OriginationUrlListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new OriginationUrlPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of OriginationUrlInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  OriginationUrlListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new OriginationUrlPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a origination_url\n   *\n   * @function get\n   * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Trunking.V1.TrunkContext.OriginationUrlContext}\n   */\n  /* jshint ignore:end */\n  OriginationUrlListInstance.get = function get(sid) {\n    return new OriginationUrlContext(this._version, this._solution.trunkSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  OriginationUrlListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  OriginationUrlListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return OriginationUrlListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the OriginationUrlPage\n *\n * @constructor Twilio.Trunking.V1.TrunkContext.OriginationUrlPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {OriginationUrlSolution} solution - Path solution\n *\n * @returns OriginationUrlPage\n */\n/* jshint ignore:end */\nOriginationUrlPage = function OriginationUrlPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(OriginationUrlPage.prototype, Page.prototype);\nOriginationUrlPage.prototype.constructor = OriginationUrlPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of OriginationUrlInstance\n *\n * @function getInstance\n * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlPage#\n *\n * @param {OriginationUrlPayload} payload - Payload response from the API\n *\n * @returns OriginationUrlInstance\n */\n/* jshint ignore:end */\nOriginationUrlPage.prototype.getInstance = function getInstance(payload) {\n  return new OriginationUrlInstance(this._version, payload, this._solution.trunkSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nOriginationUrlPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nOriginationUrlPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the OriginationUrlContext\n *\n * @constructor Twilio.Trunking.V1.TrunkContext.OriginationUrlInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} trunkSid - The SID of the Trunk that owns the Origination URL\n * @property {number} weight -\n *          The value that determines the relative load the URI should receive compared to others with the same priority\n * @property {boolean} enabled - Whether the URL is enabled\n * @property {string} sipUrl -\n *          The SIP address you want Twilio to route your Origination calls to\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {number} priority - The relative importance of the URI\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n *\n * @param {V1} version - Version of the resource\n * @param {OriginationUrlPayload} payload - The instance payload\n * @param {sid} trunkSid - The SID of the Trunk that owns the Origination URL\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nOriginationUrlInstance = function OriginationUrlInstance(version, payload, trunkSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.trunkSid = payload.trunk_sid; // jshint ignore:line\n  this.weight = deserialize.integer(payload.weight); // jshint ignore:line\n  this.enabled = payload.enabled; // jshint ignore:line\n  this.sipUrl = payload.sip_url; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.priority = deserialize.integer(payload.priority); // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    trunkSid: trunkSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(OriginationUrlInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new OriginationUrlContext(this._version, this._solution.trunkSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a OriginationUrlInstance\n *\n * @function fetch\n * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed OriginationUrlInstance\n */\n/* jshint ignore:end */\nOriginationUrlInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a OriginationUrlInstance\n *\n * @function remove\n * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed OriginationUrlInstance\n */\n/* jshint ignore:end */\nOriginationUrlInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a OriginationUrlInstance\n *\n * @function update\n * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {number} [opts.weight] -\n *          The value that determines the relative load the URI should receive compared to others with the same priority\n * @param {number} [opts.priority] - The relative importance of the URI\n * @param {boolean} [opts.enabled] - Whether the URL is enabled\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.sipUrl] -\n *          The SIP address you want Twilio to route your Origination calls to\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed OriginationUrlInstance\n */\n/* jshint ignore:end */\nOriginationUrlInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nOriginationUrlInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nOriginationUrlInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the OriginationUrlContext\n *\n * @constructor Twilio.Trunking.V1.TrunkContext.OriginationUrlContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} trunkSid -\n *          The SID of the Trunk from which to fetch the OriginationUrl\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nOriginationUrlContext = function OriginationUrlContext(version, trunkSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    trunkSid: trunkSid,\n    sid: sid\n  };\n  this._uri = `/Trunks/${trunkSid}/OriginationUrls/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a OriginationUrlInstance\n *\n * @function fetch\n * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed OriginationUrlInstance\n */\n/* jshint ignore:end */\nOriginationUrlContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new OriginationUrlInstance(this._version, payload, this._solution.trunkSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a OriginationUrlInstance\n *\n * @function remove\n * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed OriginationUrlInstance\n */\n/* jshint ignore:end */\nOriginationUrlContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a OriginationUrlInstance\n *\n * @function update\n * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlContext#\n *\n * @param {object} [opts] - Options for request\n * @param {number} [opts.weight] -\n *          The value that determines the relative load the URI should receive compared to others with the same priority\n * @param {number} [opts.priority] - The relative importance of the URI\n * @param {boolean} [opts.enabled] - Whether the URL is enabled\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.sipUrl] -\n *          The SIP address you want Twilio to route your Origination calls to\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed OriginationUrlInstance\n */\n/* jshint ignore:end */\nOriginationUrlContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Weight': _.get(opts, 'weight'),\n    'Priority': _.get(opts, 'priority'),\n    'Enabled': serialize.bool(_.get(opts, 'enabled')),\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'SipUrl': _.get(opts, 'sipUrl')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new OriginationUrlInstance(this._version, payload, this._solution.trunkSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nOriginationUrlContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nOriginationUrlContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  OriginationUrlList: OriginationUrlList,\n  OriginationUrlPage: OriginationUrlPage,\n  OriginationUrlInstance: OriginationUrlInstance,\n  OriginationUrlContext: OriginationUrlContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","serialize","values","OriginationUrlList","OriginationUrlPage","OriginationUrlInstance","OriginationUrlContext","version","trunkSid","OriginationUrlListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","weight","priority","enabled","friendlyName","sipUrl","deferred","defer","data","of","bool","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","trunk_sid","integer","sip_url","friendly_name","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","_context","undefined","Object","defineProperty","fetch","_proxy","remove","update","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/trunking/v1/trunk/originationUrl.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar OriginationUrlList;\nvar OriginationUrlPage;\nvar OriginationUrlInstance;\nvar OriginationUrlContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the OriginationUrlList\n *\n * @constructor Twilio.Trunking.V1.TrunkContext.OriginationUrlList\n *\n * @param {Twilio.Trunking.V1} version - Version of the resource\n * @param {string} trunkSid - The SID of the Trunk that owns the Origination URL\n */\n/* jshint ignore:end */\nOriginationUrlList = function OriginationUrlList(version, trunkSid) {\n  /* jshint ignore:start */\n  /**\n   * @function originationUrls\n   * @memberof Twilio.Trunking.V1.TrunkContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Trunking.V1.TrunkContext.OriginationUrlContext}\n   */\n  /* jshint ignore:end */\n  function OriginationUrlListInstance(sid) {\n    return OriginationUrlListInstance.get(sid);\n  }\n\n  OriginationUrlListInstance._version = version;\n  // Path Solution\n  OriginationUrlListInstance._solution = {trunkSid: trunkSid};\n  OriginationUrlListInstance._uri = `/Trunks/${trunkSid}/OriginationUrls`;\n  /* jshint ignore:start */\n  /**\n   * create a OriginationUrlInstance\n   *\n   * @function create\n   * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlList#\n   *\n   * @param {object} opts - Options for request\n   * @param {number} opts.weight -\n   *          The value that determines the relative load the URI should receive compared to others with the same priority\n   * @param {number} opts.priority - The relative importance of the URI\n   * @param {boolean} opts.enabled - Whether the URL is enabled\n   * @param {string} opts.friendlyName - A string to describe the resource\n   * @param {string} opts.sipUrl -\n   *          The SIP address you want Twilio to route your Origination calls to\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed OriginationUrlInstance\n   */\n  /* jshint ignore:end */\n  OriginationUrlListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.weight)) {\n      throw new Error('Required parameter \"opts.weight\" missing.');\n    }\n    if (_.isUndefined(opts.priority)) {\n      throw new Error('Required parameter \"opts.priority\" missing.');\n    }\n    if (_.isUndefined(opts.enabled)) {\n      throw new Error('Required parameter \"opts.enabled\" missing.');\n    }\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n    if (_.isUndefined(opts.sipUrl)) {\n      throw new Error('Required parameter \"opts.sipUrl\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Weight': _.get(opts, 'weight'),\n      'Priority': _.get(opts, 'priority'),\n      'Enabled': serialize.bool(_.get(opts, 'enabled')),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'SipUrl': _.get(opts, 'sipUrl')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new OriginationUrlInstance(\n        this._version,\n        payload,\n        this._solution.trunkSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams OriginationUrlInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  OriginationUrlListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists OriginationUrlInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  OriginationUrlListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of OriginationUrlInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  OriginationUrlListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new OriginationUrlPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of OriginationUrlInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  OriginationUrlListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new OriginationUrlPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a origination_url\n   *\n   * @function get\n   * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Trunking.V1.TrunkContext.OriginationUrlContext}\n   */\n  /* jshint ignore:end */\n  OriginationUrlListInstance.get = function get(sid) {\n    return new OriginationUrlContext(this._version, this._solution.trunkSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  OriginationUrlListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  OriginationUrlListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return OriginationUrlListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the OriginationUrlPage\n *\n * @constructor Twilio.Trunking.V1.TrunkContext.OriginationUrlPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {OriginationUrlSolution} solution - Path solution\n *\n * @returns OriginationUrlPage\n */\n/* jshint ignore:end */\nOriginationUrlPage = function OriginationUrlPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(OriginationUrlPage.prototype, Page.prototype);\nOriginationUrlPage.prototype.constructor = OriginationUrlPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of OriginationUrlInstance\n *\n * @function getInstance\n * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlPage#\n *\n * @param {OriginationUrlPayload} payload - Payload response from the API\n *\n * @returns OriginationUrlInstance\n */\n/* jshint ignore:end */\nOriginationUrlPage.prototype.getInstance = function getInstance(payload) {\n  return new OriginationUrlInstance(this._version, payload, this._solution.trunkSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nOriginationUrlPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nOriginationUrlPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the OriginationUrlContext\n *\n * @constructor Twilio.Trunking.V1.TrunkContext.OriginationUrlInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} trunkSid - The SID of the Trunk that owns the Origination URL\n * @property {number} weight -\n *          The value that determines the relative load the URI should receive compared to others with the same priority\n * @property {boolean} enabled - Whether the URL is enabled\n * @property {string} sipUrl -\n *          The SIP address you want Twilio to route your Origination calls to\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {number} priority - The relative importance of the URI\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n *\n * @param {V1} version - Version of the resource\n * @param {OriginationUrlPayload} payload - The instance payload\n * @param {sid} trunkSid - The SID of the Trunk that owns the Origination URL\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nOriginationUrlInstance = function OriginationUrlInstance(version, payload,\n                                                          trunkSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.trunkSid = payload.trunk_sid; // jshint ignore:line\n  this.weight = deserialize.integer(payload.weight); // jshint ignore:line\n  this.enabled = payload.enabled; // jshint ignore:line\n  this.sipUrl = payload.sip_url; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.priority = deserialize.integer(payload.priority); // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {trunkSid: trunkSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(OriginationUrlInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new OriginationUrlContext(\n          this._version,\n          this._solution.trunkSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a OriginationUrlInstance\n *\n * @function fetch\n * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed OriginationUrlInstance\n */\n/* jshint ignore:end */\nOriginationUrlInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a OriginationUrlInstance\n *\n * @function remove\n * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed OriginationUrlInstance\n */\n/* jshint ignore:end */\nOriginationUrlInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a OriginationUrlInstance\n *\n * @function update\n * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {number} [opts.weight] -\n *          The value that determines the relative load the URI should receive compared to others with the same priority\n * @param {number} [opts.priority] - The relative importance of the URI\n * @param {boolean} [opts.enabled] - Whether the URL is enabled\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.sipUrl] -\n *          The SIP address you want Twilio to route your Origination calls to\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed OriginationUrlInstance\n */\n/* jshint ignore:end */\nOriginationUrlInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nOriginationUrlInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nOriginationUrlInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the OriginationUrlContext\n *\n * @constructor Twilio.Trunking.V1.TrunkContext.OriginationUrlContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} trunkSid -\n *          The SID of the Trunk from which to fetch the OriginationUrl\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nOriginationUrlContext = function OriginationUrlContext(version, trunkSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {trunkSid: trunkSid, sid: sid, };\n  this._uri = `/Trunks/${trunkSid}/OriginationUrls/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a OriginationUrlInstance\n *\n * @function fetch\n * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed OriginationUrlInstance\n */\n/* jshint ignore:end */\nOriginationUrlContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new OriginationUrlInstance(\n      this._version,\n      payload,\n      this._solution.trunkSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a OriginationUrlInstance\n *\n * @function remove\n * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed OriginationUrlInstance\n */\n/* jshint ignore:end */\nOriginationUrlContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a OriginationUrlInstance\n *\n * @function update\n * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlContext#\n *\n * @param {object} [opts] - Options for request\n * @param {number} [opts.weight] -\n *          The value that determines the relative load the URI should receive compared to others with the same priority\n * @param {number} [opts.priority] - The relative importance of the URI\n * @param {boolean} [opts.enabled] - Whether the URL is enabled\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.sipUrl] -\n *          The SIP address you want Twilio to route your Origination calls to\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed OriginationUrlInstance\n */\n/* jshint ignore:end */\nOriginationUrlContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Weight': _.get(opts, 'weight'),\n    'Priority': _.get(opts, 'priority'),\n    'Enabled': serialize.bool(_.get(opts, 'enabled')),\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'SipUrl': _.get(opts, 'sipUrl')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new OriginationUrlInstance(\n      this._version,\n      payload,\n      this._solution.trunkSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trunking.V1.TrunkContext.OriginationUrlContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nOriginationUrlContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nOriginationUrlContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  OriginationUrlList: OriginationUrlList,\n  OriginationUrlPage: OriginationUrlPage,\n  OriginationUrlInstance: OriginationUrlInstance,\n  OriginationUrlContext: OriginationUrlContext\n};\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAE;AACvB,IAAIC,CAAC,GAAGD,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAE;AAC5B,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC,CAAC,CAAE;AAC7B,IAAIG,IAAI,GAAGH,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAE;AAC9C,IAAII,WAAW,GAAGJ,OAAO,CACrB,8BAA8B,CAAC,CAAC,CAAE;AACtC,IAAIK,SAAS,GAAGL,OAAO,CAAC,4BAA4B,CAAC,CAAC,CAAE;AACxD,IAAIM,MAAM,GAAGN,OAAO,CAAC,yBAAyB,CAAC,CAAC,CAAE;;AAElD,IAAIO,kBAAkB;AACtB,IAAIC,kBAAkB;AACtB,IAAIC,sBAAsB;AAC1B,IAAIC,qBAAqB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,kBAAkB,GAAG,SAASA,kBAAkBA,CAACI,OAAO,EAAEC,QAAQ,EAAE;EAClE;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACA,SAASC,0BAA0BA,CAACC,GAAG,EAAE;IACvC,OAAOD,0BAA0B,CAACE,GAAG,CAACD,GAAG,CAAC;EAC5C;EAEAD,0BAA0B,CAACG,QAAQ,GAAGL,OAAO;EAC7C;EACAE,0BAA0B,CAACI,SAAS,GAAG;IAACL,QAAQ,EAAEA;EAAQ,CAAC;EAC3DC,0BAA0B,CAACK,IAAI,GAAI,WAAUN,QAAS,kBAAiB;EACvE;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAC,0BAA0B,CAACM,MAAM,GAAG,SAASA,MAAMA,CAACC,IAAI,EAAEC,QAAQ,EAAE;IAClE,IAAIpB,CAAC,CAACqB,WAAW,CAACF,IAAI,CAAC,EAAE;MACvB,MAAM,IAAIG,KAAK,CAAC,oCAAoC,CAAC;IACvD;IACA,IAAItB,CAAC,CAACqB,WAAW,CAACF,IAAI,CAACI,MAAM,CAAC,EAAE;MAC9B,MAAM,IAAID,KAAK,CAAC,2CAA2C,CAAC;IAC9D;IACA,IAAItB,CAAC,CAACqB,WAAW,CAACF,IAAI,CAACK,QAAQ,CAAC,EAAE;MAChC,MAAM,IAAIF,KAAK,CAAC,6CAA6C,CAAC;IAChE;IACA,IAAItB,CAAC,CAACqB,WAAW,CAACF,IAAI,CAACM,OAAO,CAAC,EAAE;MAC/B,MAAM,IAAIH,KAAK,CAAC,4CAA4C,CAAC;IAC/D;IACA,IAAItB,CAAC,CAACqB,WAAW,CAACF,IAAI,CAACO,YAAY,CAAC,EAAE;MACpC,MAAM,IAAIJ,KAAK,CAAC,iDAAiD,CAAC;IACpE;IACA,IAAItB,CAAC,CAACqB,WAAW,CAACF,IAAI,CAACQ,MAAM,CAAC,EAAE;MAC9B,MAAM,IAAIL,KAAK,CAAC,2CAA2C,CAAC;IAC9D;IAEA,IAAIM,QAAQ,GAAG9B,CAAC,CAAC+B,KAAK,CAAC,CAAC;IACxB,IAAIC,IAAI,GAAGzB,MAAM,CAAC0B,EAAE,CAAC;MACnB,QAAQ,EAAE/B,CAAC,CAACc,GAAG,CAACK,IAAI,EAAE,QAAQ,CAAC;MAC/B,UAAU,EAAEnB,CAAC,CAACc,GAAG,CAACK,IAAI,EAAE,UAAU,CAAC;MACnC,SAAS,EAAEf,SAAS,CAAC4B,IAAI,CAAChC,CAAC,CAACc,GAAG,CAACK,IAAI,EAAE,SAAS,CAAC,CAAC;MACjD,cAAc,EAAEnB,CAAC,CAACc,GAAG,CAACK,IAAI,EAAE,cAAc,CAAC;MAC3C,QAAQ,EAAEnB,CAAC,CAACc,GAAG,CAACK,IAAI,EAAE,QAAQ;IAChC,CAAC,CAAC;IAEF,IAAIc,OAAO,GAAG,IAAI,CAAClB,QAAQ,CAACG,MAAM,CAAC;MAACgB,GAAG,EAAE,IAAI,CAACjB,IAAI;MAAEkB,MAAM,EAAE,MAAM;MAAEL,IAAI,EAAEA;IAAI,CAAC,CAAC;IAEhFG,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;MACvCT,QAAQ,CAACU,OAAO,CAAC,IAAI9B,sBAAsB,CACzC,IAAI,CAACO,QAAQ,EACbsB,OAAO,EACP,IAAI,CAACrB,SAAS,CAACL,QAAQ,EACvB,IAAI,CAACK,SAAS,CAACH,GACjB,CAAC,CAAC;IACJ,CAAC,CAAC0B,IAAI,CAAC,IAAI,CAAC,CAAC;IAEbN,OAAO,CAACO,KAAK,CAAC,UAASC,KAAK,EAAE;MAC5Bb,QAAQ,CAACc,MAAM,CAACD,KAAK,CAAC;IACxB,CAAC,CAAC;IAEF,IAAIzC,CAAC,CAAC2C,UAAU,CAACvB,QAAQ,CAAC,EAAE;MAC1BQ,QAAQ,CAACK,OAAO,CAACW,OAAO,CAACxB,QAAQ,CAAC;IACpC;IAEA,OAAOQ,QAAQ,CAACK,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACArB,0BAA0B,CAACiC,IAAI,GAAG,SAASA,IAAIA,CAAC1B,IAAI,EAAEC,QAAQ,EAAE;IAC9D,IAAIpB,CAAC,CAAC2C,UAAU,CAACxB,IAAI,CAAC,EAAE;MACtBC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IACjB,IAAIA,IAAI,CAACC,QAAQ,EAAE;MACjBA,QAAQ,GAAGD,IAAI,CAACC,QAAQ;IAC1B;IACA,IAAIpB,CAAC,CAACqB,WAAW,CAACD,QAAQ,CAAC,EAAE;MAC3B,MAAM,IAAIE,KAAK,CAAC,oCAAoC,CAAC;IACvD;IAEA,IAAIwB,IAAI,GAAG,KAAK;IAChB,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAIC,eAAe,GAAG,CAAC;IACvB,IAAIC,MAAM,GAAG,IAAI,CAAClC,QAAQ,CAACmC,UAAU,CAAC;MACpCC,KAAK,EAAEhC,IAAI,CAACgC,KAAK;MACjBC,QAAQ,EAAEjC,IAAI,CAACiC;IACjB,CAAC,CAAC;IAEF,SAASC,UAAUA,CAACZ,KAAK,EAAE;MACzBK,IAAI,GAAG,IAAI;MACX,IAAI9C,CAAC,CAAC2C,UAAU,CAACxB,IAAI,CAAC2B,IAAI,CAAC,EAAE;QAC3B3B,IAAI,CAAC2B,IAAI,CAACL,KAAK,CAAC;MAClB;IACF;IAEA,SAASa,aAAaA,CAACC,EAAE,EAAE;MACzB,IAAItB,OAAO,GAAGsB,EAAE,CAAC,CAAC;MAClB,IAAIvD,CAAC,CAACqB,WAAW,CAACY,OAAO,CAAC,EAAE;QAC1BoB,UAAU,CAAC,CAAC;QACZ;MACF;MAEApB,OAAO,CAACG,IAAI,CAAC,UAASoB,IAAI,EAAE;QAC1BxD,CAAC,CAAC6C,IAAI,CAACW,IAAI,CAACC,SAAS,EAAE,UAASC,QAAQ,EAAE;UACxC,IAAIZ,IAAI,IAAK,CAAC9C,CAAC,CAACqB,WAAW,CAACF,IAAI,CAACgC,KAAK,CAAC,IAAIH,eAAe,IAAI7B,IAAI,CAACgC,KAAM,EAAE;YACzEL,IAAI,GAAG,IAAI;YACX,OAAO,KAAK;UACd;UAEAE,eAAe,EAAE;UACjB5B,QAAQ,CAACsC,QAAQ,EAAEL,UAAU,CAAC;QAChC,CAAC,CAAC;QAEF,IAAI,CAACP,IAAI,EAAE;UACTC,WAAW,EAAE;UACbO,aAAa,CAACtD,CAAC,CAACuC,IAAI,CAACiB,IAAI,CAACG,QAAQ,EAAEH,IAAI,CAAC,CAAC;QAC5C;MACF,CAAC,CAAC;MAEFvB,OAAO,CAACO,KAAK,CAACa,UAAU,CAAC;IAC3B;IAEAC,aAAa,CAACtD,CAAC,CAACuC,IAAI,CAAC,IAAI,CAACiB,IAAI,EAAE,IAAI,EAAExD,CAAC,CAAC4D,KAAK,CAACzC,IAAI,EAAE8B,MAAM,CAAC,CAAC,CAAC;EAC/D,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACArC,0BAA0B,CAACiD,IAAI,GAAG,SAASA,IAAIA,CAAC1C,IAAI,EAAEC,QAAQ,EAAE;IAC9D,IAAIpB,CAAC,CAAC2C,UAAU,CAACxB,IAAI,CAAC,EAAE;MACtBC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IACjB,IAAIS,QAAQ,GAAG9B,CAAC,CAAC+B,KAAK,CAAC,CAAC;IACxB,IAAIiC,YAAY,GAAG,EAAE;IACrB3C,IAAI,CAACC,QAAQ,GAAG,UAAS2C,QAAQ,EAAEjB,IAAI,EAAE;MACvCgB,YAAY,CAACE,IAAI,CAACD,QAAQ,CAAC;MAE3B,IAAI,CAAC/D,CAAC,CAACqB,WAAW,CAACF,IAAI,CAACgC,KAAK,CAAC,IAAIW,YAAY,CAACG,MAAM,KAAK9C,IAAI,CAACgC,KAAK,EAAE;QACpEL,IAAI,CAAC,CAAC;MACR;IACF,CAAC;IAED3B,IAAI,CAAC2B,IAAI,GAAG,UAASL,KAAK,EAAE;MAC1B,IAAIzC,CAAC,CAACqB,WAAW,CAACoB,KAAK,CAAC,EAAE;QACxBb,QAAQ,CAACU,OAAO,CAACwB,YAAY,CAAC;MAChC,CAAC,MAAM;QACLlC,QAAQ,CAACc,MAAM,CAACD,KAAK,CAAC;MACxB;IACF,CAAC;IAED,IAAIzC,CAAC,CAAC2C,UAAU,CAACvB,QAAQ,CAAC,EAAE;MAC1BQ,QAAQ,CAACK,OAAO,CAACW,OAAO,CAACxB,QAAQ,CAAC;IACpC;IAEA,IAAI,CAACyB,IAAI,CAAC1B,IAAI,CAAC;IACf,OAAOS,QAAQ,CAACK,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACArB,0BAA0B,CAAC4C,IAAI,GAAG,SAASA,IAAIA,CAACrC,IAAI,EAAEC,QAAQ,EAAE;IAC9D,IAAIpB,CAAC,CAAC2C,UAAU,CAACxB,IAAI,CAAC,EAAE;MACtBC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IAEjB,IAAIS,QAAQ,GAAG9B,CAAC,CAAC+B,KAAK,CAAC,CAAC;IACxB,IAAIC,IAAI,GAAGzB,MAAM,CAAC0B,EAAE,CAAC;MACnB,WAAW,EAAEZ,IAAI,CAAC+C,SAAS;MAC3B,MAAM,EAAE/C,IAAI,CAACgD,UAAU;MACvB,UAAU,EAAEhD,IAAI,CAACiC;IACnB,CAAC,CAAC;IAEF,IAAInB,OAAO,GAAG,IAAI,CAAClB,QAAQ,CAACyC,IAAI,CAAC;MAACtB,GAAG,EAAE,IAAI,CAACjB,IAAI;MAAEkB,MAAM,EAAE,KAAK;MAAEiC,MAAM,EAAEtC;IAAI,CAAC,CAAC;IAE/EG,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;MACvCT,QAAQ,CAACU,OAAO,CAAC,IAAI/B,kBAAkB,CAAC,IAAI,CAACQ,QAAQ,EAAEsB,OAAO,EAAE,IAAI,CAACrB,SAAS,CAAC,CAAC;IAClF,CAAC,CAACuB,IAAI,CAAC,IAAI,CAAC,CAAC;IAEbN,OAAO,CAACO,KAAK,CAAC,UAASC,KAAK,EAAE;MAC5Bb,QAAQ,CAACc,MAAM,CAACD,KAAK,CAAC;IACxB,CAAC,CAAC;IAEF,IAAIzC,CAAC,CAAC2C,UAAU,CAACvB,QAAQ,CAAC,EAAE;MAC1BQ,QAAQ,CAACK,OAAO,CAACW,OAAO,CAACxB,QAAQ,CAAC;IACpC;IAEA,OAAOQ,QAAQ,CAACK,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACArB,0BAA0B,CAACyD,OAAO,GAAG,SAASA,OAAOA,CAACC,SAAS,EAAElD,QAAQ,EAAE;IACzE,IAAIQ,QAAQ,GAAG9B,CAAC,CAAC+B,KAAK,CAAC,CAAC;IAExB,IAAII,OAAO,GAAG,IAAI,CAAClB,QAAQ,CAACwD,OAAO,CAACC,MAAM,CAACC,OAAO,CAAC;MAACtC,MAAM,EAAE,KAAK;MAAED,GAAG,EAAEoC;IAAS,CAAC,CAAC;IAEnFrC,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;MACvCT,QAAQ,CAACU,OAAO,CAAC,IAAI/B,kBAAkB,CAAC,IAAI,CAACQ,QAAQ,EAAEsB,OAAO,EAAE,IAAI,CAACrB,SAAS,CAAC,CAAC;IAClF,CAAC,CAACuB,IAAI,CAAC,IAAI,CAAC,CAAC;IAEbN,OAAO,CAACO,KAAK,CAAC,UAASC,KAAK,EAAE;MAC5Bb,QAAQ,CAACc,MAAM,CAACD,KAAK,CAAC;IACxB,CAAC,CAAC;IAEF,IAAIzC,CAAC,CAAC2C,UAAU,CAACvB,QAAQ,CAAC,EAAE;MAC1BQ,QAAQ,CAACK,OAAO,CAACW,OAAO,CAACxB,QAAQ,CAAC;IACpC;IAEA,OAAOQ,QAAQ,CAACK,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACArB,0BAA0B,CAACE,GAAG,GAAG,SAASA,GAAGA,CAACD,GAAG,EAAE;IACjD,OAAO,IAAIJ,qBAAqB,CAAC,IAAI,CAACM,QAAQ,EAAE,IAAI,CAACC,SAAS,CAACL,QAAQ,EAAEE,GAAG,CAAC;EAC/E,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAD,0BAA0B,CAAC8D,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;IACpD,OAAO,IAAI,CAAC1D,SAAS;EACvB,CAAC;EAEDJ,0BAA0B,CAACX,IAAI,CAAC0E,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EACpEC,OAAO,EAAE;IACX,OAAO7E,IAAI,CAAC0E,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;EAC7C,CAAC;EAED,OAAOlE,0BAA0B;AACnC,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAL,kBAAkB,GAAG,SAASA,kBAAkBA,CAACG,OAAO,EAAEqE,QAAQ,EAAEC,QAAQ,EAAE;EAC5E;EACA,IAAI,CAAChE,SAAS,GAAGgE,QAAQ;EAEzB9E,IAAI,CAAC+E,SAAS,CAACC,WAAW,CAACC,IAAI,CAAC,IAAI,EAAEzE,OAAO,EAAEqE,QAAQ,EAAE,IAAI,CAAC/D,SAAS,CAAC;AAC1E,CAAC;AAEDhB,CAAC,CAACoF,MAAM,CAAC7E,kBAAkB,CAAC0E,SAAS,EAAE/E,IAAI,CAAC+E,SAAS,CAAC;AACtD1E,kBAAkB,CAAC0E,SAAS,CAACC,WAAW,GAAG3E,kBAAkB;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,kBAAkB,CAAC0E,SAAS,CAACI,WAAW,GAAG,SAASA,WAAWA,CAAChD,OAAO,EAAE;EACvE,OAAO,IAAI7B,sBAAsB,CAAC,IAAI,CAACO,QAAQ,EAAEsB,OAAO,EAAE,IAAI,CAACrB,SAAS,CAACL,QAAQ,CAAC;AACpF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,kBAAkB,CAAC0E,SAAS,CAACP,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EACtD,IAAIY,KAAK,GAAG,CAAC,CAAC;EACdtF,CAAC,CAACuF,MAAM,CAAC,IAAI,EAAE,UAASC,KAAK,EAAEC,GAAG,EAAE;IAClC,IAAI,CAACzF,CAAC,CAAC0F,UAAU,CAACD,GAAG,EAAE,GAAG,CAAC,IAAI,CAAEzF,CAAC,CAAC2C,UAAU,CAAC6C,KAAK,CAAC,EAAE;MACpDF,KAAK,CAACG,GAAG,CAAC,GAAGD,KAAK;IACpB;EACF,CAAC,CAAC;EACF,OAAOF,KAAK;AACd,CAAC;AAED/E,kBAAkB,CAAC0E,SAAS,CAAChF,IAAI,CAAC0E,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EACtEC,OAAO,EAAE;EACX,OAAO7E,IAAI,CAAC0E,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;AAC7C,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtE,sBAAsB,GAAG,SAASA,sBAAsBA,CAACE,OAAO,EAAE2B,OAAO,EACf1B,QAAQ,EAAEE,GAAG,EAAE;EACvE,IAAI,CAACE,QAAQ,GAAGL,OAAO;;EAEvB;EACA,IAAI,CAACiF,UAAU,GAAGtD,OAAO,CAACuD,WAAW,CAAC,CAAC;EACvC,IAAI,CAAC/E,GAAG,GAAGwB,OAAO,CAACxB,GAAG,CAAC,CAAC;EACxB,IAAI,CAACF,QAAQ,GAAG0B,OAAO,CAACwD,SAAS,CAAC,CAAC;EACnC,IAAI,CAACtE,MAAM,GAAGpB,WAAW,CAAC2F,OAAO,CAACzD,OAAO,CAACd,MAAM,CAAC,CAAC,CAAC;EACnD,IAAI,CAACE,OAAO,GAAGY,OAAO,CAACZ,OAAO,CAAC,CAAC;EAChC,IAAI,CAACE,MAAM,GAAGU,OAAO,CAAC0D,OAAO,CAAC,CAAC;EAC/B,IAAI,CAACrE,YAAY,GAAGW,OAAO,CAAC2D,aAAa,CAAC,CAAC;EAC3C,IAAI,CAACxE,QAAQ,GAAGrB,WAAW,CAAC2F,OAAO,CAACzD,OAAO,CAACb,QAAQ,CAAC,CAAC,CAAC;EACvD,IAAI,CAACyE,WAAW,GAAG9F,WAAW,CAAC+F,eAAe,CAAC7D,OAAO,CAAC8D,YAAY,CAAC,CAAC,CAAC;EACtE,IAAI,CAACC,WAAW,GAAGjG,WAAW,CAAC+F,eAAe,CAAC7D,OAAO,CAACgE,YAAY,CAAC,CAAC,CAAC;EACtE,IAAI,CAACC,GAAG,GAAGjE,OAAO,CAACiE,GAAG,CAAC,CAAC;;EAExB;EACA,IAAI,CAACC,QAAQ,GAAGC,SAAS;EACzB,IAAI,CAACxF,SAAS,GAAG;IAACL,QAAQ,EAAEA,QAAQ;IAAEE,GAAG,EAAEA,GAAG,IAAI,IAAI,CAACA;EAAK,CAAC;AAC/D,CAAC;AAED4F,MAAM,CAACC,cAAc,CAAClG,sBAAsB,CAACyE,SAAS,EACpD,QAAQ,EAAE;EACRnE,GAAG,EAAE,SAAAA,CAAA,EAAW;IACd,IAAI,CAAC,IAAI,CAACyF,QAAQ,EAAE;MAClB,IAAI,CAACA,QAAQ,GAAG,IAAI9F,qBAAqB,CACvC,IAAI,CAACM,QAAQ,EACb,IAAI,CAACC,SAAS,CAACL,QAAQ,EACvB,IAAI,CAACK,SAAS,CAACH,GACjB,CAAC;IACH;IAEA,OAAO,IAAI,CAAC0F,QAAQ;EACtB;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA/F,sBAAsB,CAACyE,SAAS,CAAC0B,KAAK,GAAG,SAASA,KAAKA,CAACvF,QAAQ,EAAE;EAChE,OAAO,IAAI,CAACwF,MAAM,CAACD,KAAK,CAACvF,QAAQ,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAZ,sBAAsB,CAACyE,SAAS,CAAC4B,MAAM,GAAG,SAASA,MAAMA,CAACzF,QAAQ,EAAE;EAClE,OAAO,IAAI,CAACwF,MAAM,CAACC,MAAM,CAACzF,QAAQ,CAAC;AACrC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAZ,sBAAsB,CAACyE,SAAS,CAAC6B,MAAM,GAAG,SAASA,MAAMA,CAAC3F,IAAI,EAAEC,QAAQ,EAAE;EACxE,OAAO,IAAI,CAACwF,MAAM,CAACE,MAAM,CAAC3F,IAAI,EAAEC,QAAQ,CAAC;AAC3C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAZ,sBAAsB,CAACyE,SAAS,CAACP,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EAC1D,IAAIY,KAAK,GAAG,CAAC,CAAC;EACdtF,CAAC,CAACuF,MAAM,CAAC,IAAI,EAAE,UAASC,KAAK,EAAEC,GAAG,EAAE;IAClC,IAAI,CAACzF,CAAC,CAAC0F,UAAU,CAACD,GAAG,EAAE,GAAG,CAAC,IAAI,CAAEzF,CAAC,CAAC2C,UAAU,CAAC6C,KAAK,CAAC,EAAE;MACpDF,KAAK,CAACG,GAAG,CAAC,GAAGD,KAAK;IACpB;EACF,CAAC,CAAC;EACF,OAAOF,KAAK;AACd,CAAC;AAED9E,sBAAsB,CAACyE,SAAS,CAAChF,IAAI,CAAC0E,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EAC1EC,OAAO,EAAE;EACX,OAAO7E,IAAI,CAAC0E,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;AAC7C,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACArE,qBAAqB,GAAG,SAASA,qBAAqBA,CAACC,OAAO,EAAEC,QAAQ,EAAEE,GAAG,EAAE;EAC7E,IAAI,CAACE,QAAQ,GAAGL,OAAO;;EAEvB;EACA,IAAI,CAACM,SAAS,GAAG;IAACL,QAAQ,EAAEA,QAAQ;IAAEE,GAAG,EAAEA;EAAK,CAAC;EACjD,IAAI,CAACI,IAAI,GAAI,WAAUN,QAAS,oBAAmBE,GAAI,EAAC;AAC1D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,qBAAqB,CAACwE,SAAS,CAAC0B,KAAK,GAAG,SAASA,KAAKA,CAACvF,QAAQ,EAAE;EAC/D,IAAIQ,QAAQ,GAAG9B,CAAC,CAAC+B,KAAK,CAAC,CAAC;EACxB,IAAII,OAAO,GAAG,IAAI,CAAClB,QAAQ,CAAC4F,KAAK,CAAC;IAACzE,GAAG,EAAE,IAAI,CAACjB,IAAI;IAAEkB,MAAM,EAAE;EAAK,CAAC,CAAC;EAElEF,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;IACvCT,QAAQ,CAACU,OAAO,CAAC,IAAI9B,sBAAsB,CACzC,IAAI,CAACO,QAAQ,EACbsB,OAAO,EACP,IAAI,CAACrB,SAAS,CAACL,QAAQ,EACvB,IAAI,CAACK,SAAS,CAACH,GACjB,CAAC,CAAC;EACJ,CAAC,CAAC0B,IAAI,CAAC,IAAI,CAAC,CAAC;EAEbN,OAAO,CAACO,KAAK,CAAC,UAASC,KAAK,EAAE;IAC5Bb,QAAQ,CAACc,MAAM,CAACD,KAAK,CAAC;EACxB,CAAC,CAAC;EAEF,IAAIzC,CAAC,CAAC2C,UAAU,CAACvB,QAAQ,CAAC,EAAE;IAC1BQ,QAAQ,CAACK,OAAO,CAACW,OAAO,CAACxB,QAAQ,CAAC;EACpC;EAEA,OAAOQ,QAAQ,CAACK,OAAO;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAxB,qBAAqB,CAACwE,SAAS,CAAC4B,MAAM,GAAG,SAASA,MAAMA,CAACzF,QAAQ,EAAE;EACjE,IAAIQ,QAAQ,GAAG9B,CAAC,CAAC+B,KAAK,CAAC,CAAC;EACxB,IAAII,OAAO,GAAG,IAAI,CAAClB,QAAQ,CAAC8F,MAAM,CAAC;IAAC3E,GAAG,EAAE,IAAI,CAACjB,IAAI;IAAEkB,MAAM,EAAE;EAAQ,CAAC,CAAC;EAEtEF,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;IACvCT,QAAQ,CAACU,OAAO,CAACD,OAAO,CAAC;EAC3B,CAAC,CAACE,IAAI,CAAC,IAAI,CAAC,CAAC;EAEbN,OAAO,CAACO,KAAK,CAAC,UAASC,KAAK,EAAE;IAC5Bb,QAAQ,CAACc,MAAM,CAACD,KAAK,CAAC;EACxB,CAAC,CAAC;EAEF,IAAIzC,CAAC,CAAC2C,UAAU,CAACvB,QAAQ,CAAC,EAAE;IAC1BQ,QAAQ,CAACK,OAAO,CAACW,OAAO,CAACxB,QAAQ,CAAC;EACpC;EAEA,OAAOQ,QAAQ,CAACK,OAAO;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAxB,qBAAqB,CAACwE,SAAS,CAAC6B,MAAM,GAAG,SAASA,MAAMA,CAAC3F,IAAI,EAAEC,QAAQ,EAAE;EACvE,IAAIpB,CAAC,CAAC2C,UAAU,CAACxB,IAAI,CAAC,EAAE;IACtBC,QAAQ,GAAGD,IAAI;IACfA,IAAI,GAAG,CAAC,CAAC;EACX;EACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;EAEjB,IAAIS,QAAQ,GAAG9B,CAAC,CAAC+B,KAAK,CAAC,CAAC;EACxB,IAAIC,IAAI,GAAGzB,MAAM,CAAC0B,EAAE,CAAC;IACnB,QAAQ,EAAE/B,CAAC,CAACc,GAAG,CAACK,IAAI,EAAE,QAAQ,CAAC;IAC/B,UAAU,EAAEnB,CAAC,CAACc,GAAG,CAACK,IAAI,EAAE,UAAU,CAAC;IACnC,SAAS,EAAEf,SAAS,CAAC4B,IAAI,CAAChC,CAAC,CAACc,GAAG,CAACK,IAAI,EAAE,SAAS,CAAC,CAAC;IACjD,cAAc,EAAEnB,CAAC,CAACc,GAAG,CAACK,IAAI,EAAE,cAAc,CAAC;IAC3C,QAAQ,EAAEnB,CAAC,CAACc,GAAG,CAACK,IAAI,EAAE,QAAQ;EAChC,CAAC,CAAC;EAEF,IAAIc,OAAO,GAAG,IAAI,CAAClB,QAAQ,CAAC+F,MAAM,CAAC;IAAC5E,GAAG,EAAE,IAAI,CAACjB,IAAI;IAAEkB,MAAM,EAAE,MAAM;IAAEL,IAAI,EAAEA;EAAI,CAAC,CAAC;EAEhFG,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;IACvCT,QAAQ,CAACU,OAAO,CAAC,IAAI9B,sBAAsB,CACzC,IAAI,CAACO,QAAQ,EACbsB,OAAO,EACP,IAAI,CAACrB,SAAS,CAACL,QAAQ,EACvB,IAAI,CAACK,SAAS,CAACH,GACjB,CAAC,CAAC;EACJ,CAAC,CAAC0B,IAAI,CAAC,IAAI,CAAC,CAAC;EAEbN,OAAO,CAACO,KAAK,CAAC,UAASC,KAAK,EAAE;IAC5Bb,QAAQ,CAACc,MAAM,CAACD,KAAK,CAAC;EACxB,CAAC,CAAC;EAEF,IAAIzC,CAAC,CAAC2C,UAAU,CAACvB,QAAQ,CAAC,EAAE;IAC1BQ,QAAQ,CAACK,OAAO,CAACW,OAAO,CAACxB,QAAQ,CAAC;EACpC;EAEA,OAAOQ,QAAQ,CAACK,OAAO;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAxB,qBAAqB,CAACwE,SAAS,CAACP,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EACzD,OAAO,IAAI,CAAC1D,SAAS;AACvB,CAAC;AAEDP,qBAAqB,CAACwE,SAAS,CAAChF,IAAI,CAAC0E,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EACzEC,OAAO,EAAE;EACX,OAAO7E,IAAI,CAAC0E,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;AAC7C,CAAC;AAEDiC,MAAM,CAACC,OAAO,GAAG;EACf1G,kBAAkB,EAAEA,kBAAkB;EACtCC,kBAAkB,EAAEA,kBAAkB;EACtCC,sBAAsB,EAAEA,sBAAsB;EAC9CC,qBAAqB,EAAEA;AACzB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}