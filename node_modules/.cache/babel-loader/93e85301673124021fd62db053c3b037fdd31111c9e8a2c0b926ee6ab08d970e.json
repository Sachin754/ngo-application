{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\nvar jwt = require('jsonwebtoken');\nvar util = require('util');\n\n/**\n * @constructor\n * @param {object} options - ...\n * @param {string} options.workspaceSid - The workspace unique ID\n * @param {string} options.workerSid - The worker unique ID\n * @param {string} options.role - The role of the grant\n */\nfunction TaskRouterGrant(options) {\n  options = options || {};\n  this.workspaceSid = options.workspaceSid;\n  this.workerSid = options.workerSid;\n  this.role = options.role;\n}\n_.extend(TaskRouterGrant.prototype, {\n  key: 'task_router',\n  toPayload: function () {\n    var grant = {};\n    if (this.workspaceSid) {\n      grant.workspace_sid = this.workspaceSid;\n    }\n    if (this.workerSid) {\n      grant.worker_sid = this.workerSid;\n    }\n    if (this.role) {\n      grant.role = this.role;\n    }\n    return grant;\n  }\n});\n\n/**\n * @constructor\n * @param {object} options - ...\n * @param {string} options.serviceSid - The service unique ID\n * @param {string} options.endpointId - The endpoint ID\n * @param {string} options.deploymentRoleSid - SID of the deployment role to be\n *                 assigned to the user\n * @param {string} options.pushCredentialSid - The Push Credentials SID\n */\nfunction ChatGrant(options) {\n  options = options || {};\n  this.serviceSid = options.serviceSid;\n  this.endpointId = options.endpointId;\n  this.deploymentRoleSid = options.deploymentRoleSid;\n  this.pushCredentialSid = options.pushCredentialSid;\n}\n_.extend(ChatGrant.prototype, {\n  key: 'chat',\n  toPayload: function () {\n    var grant = {};\n    if (this.serviceSid) {\n      grant.service_sid = this.serviceSid;\n    }\n    if (this.endpointId) {\n      grant.endpoint_id = this.endpointId;\n    }\n    if (this.deploymentRoleSid) {\n      grant.deployment_role_sid = this.deploymentRoleSid;\n    }\n    if (this.pushCredentialSid) {\n      grant.push_credential_sid = this.pushCredentialSid;\n    }\n    return grant;\n  }\n});\n\n/**\n * @deprecated - Use ChatGrant instead.\n *\n * @constructor\n * @param {object} options - ...\n * @param {string} options.serviceSid - The service unique ID\n * @param {string} options.endpointId - The endpoint ID\n * @param {string} options.deploymentRoleSid - SID of the deployment role to be\n *                 assigned to the user\n * @param {string} options.pushCredentialSid - The Push Credentials SID\n */\nfunction IpMessagingGrant(options) {\n  ChatGrant.call(this, options);\n}\nIpMessagingGrant.prototype = _.create(ChatGrant.prototype, _.assign({\n  '_super': ChatGrant.prototype,\n  'constructor': ChatGrant\n}));\nIpMessagingGrant.prototype.key = 'ip_messaging';\n\n/**\n  * @deprecated - Use VideoGrant instead\n  *\n  * @constructor\n  * @param {object} options - ...\n  * @param {string} options.configurationProfileSid - The configuration\n  *                 profile unique ID\n  */\nfunction ConversationsGrant(options) {\n  options = options || {};\n  this.configurationProfileSid = options.configurationProfileSid;\n}\n_.extend(ConversationsGrant.prototype, {\n  key: 'rtc',\n  toPayload: function () {\n    var grant = {};\n    if (this.configurationProfileSid) {\n      grant.configuration_profile_sid = this.configurationProfileSid;\n    }\n    return grant;\n  }\n});\n\n/**\n * @constructor\n * @param {object} options - ...\n * @param {string} options.room - The Room name or Room sid.\n */\nfunction VideoGrant(options) {\n  options = options || {};\n  this.room = options.room;\n}\n_.extend(VideoGrant.prototype, {\n  key: 'video',\n  toPayload: function () {\n    var grant = {};\n    if (this.room) {\n      grant.room = this.room;\n    }\n    return grant;\n  }\n});\n\n/**\n * @constructor\n * @param {string} options.serviceSid - The service unique ID\n * @param {string} options.endpointId - The endpoint ID\n */\nfunction SyncGrant(options) {\n  options = options || {};\n  this.serviceSid = options.serviceSid;\n  this.endpointId = options.endpointId;\n}\n_.extend(SyncGrant.prototype, {\n  key: 'data_sync',\n  toPayload: function () {\n    var grant = {};\n    if (this.serviceSid) {\n      grant.service_sid = this.serviceSid;\n    }\n    if (this.endpointId) {\n      grant.endpoint_id = this.endpointId;\n    }\n    return grant;\n  }\n});\n\n/**\n * @constructor\n * @param {object} options - ...\n * @param {boolean} options.incomingAllow - Whether or not this endpoint is allowed to receive incoming calls as grants.identity\n * @param {string} options.outgoingApplicationSid - application sid to call when placing outgoing call\n * @param {object} options.outgoingApplicationParams - request params to pass to the application\n * @param {string} options.pushCredentialSid - Push Credential Sid to use when registering to receive incoming call notifications\n * @param {string} options.endpointId - Specify an endpoint identifier for this device, which will allow the developer\n *                 to direct calls to a specific endpoint when multiple devices are associated with a single identity\n */\nfunction VoiceGrant(options) {\n  options = options || {};\n  this.incomingAllow = options.incomingAllow;\n  this.outgoingApplicationSid = options.outgoingApplicationSid;\n  this.outgoingApplicationParams = options.outgoingApplicationParams;\n  this.pushCredentialSid = options.pushCredentialSid;\n  this.endpointId = options.endpointId;\n}\n_.extend(VoiceGrant.prototype, {\n  key: 'voice',\n  toPayload: function () {\n    var grant = {};\n    if (this.incomingAllow === true) {\n      grant.incoming = {\n        allow: true\n      };\n    }\n    if (this.outgoingApplicationSid) {\n      grant.outgoing = {};\n      grant.outgoing.application_sid = this.outgoingApplicationSid;\n      if (this.outgoingApplicationParams) {\n        grant.outgoing.params = this.outgoingApplicationParams;\n      }\n    }\n    if (this.pushCredentialSid) {\n      grant.push_credential_sid = this.pushCredentialSid;\n    }\n    if (this.endpointId) {\n      grant.endpoint_id = this.endpointId;\n    }\n    return grant;\n  }\n});\n\n/**\n * @constructor\n * @param {string} accountSid - The account's unique ID to which access is scoped\n * @param {string} keySid - The signing key's unique ID\n * @param {string} secret - The secret to sign the token with\n * @param {object} options - ...\n * @param {number} [options.ttl=3600] - Time to live in seconds\n * @param {string} [options.identity] - The identity of the first person\n * @param {number} [options.nbf] - Time from epoch in seconds for not before value\n * @param {string} [options.region] - The region value associated with this account\n */\nfunction AccessToken(accountSid, keySid, secret, options) {\n  if (!accountSid) {\n    throw new Error('accountSid is required');\n  }\n  if (!keySid) {\n    throw new Error('keySid is required');\n  }\n  if (!secret) {\n    throw new Error('secret is required');\n  }\n  options = options || {};\n  this.accountSid = accountSid;\n  this.keySid = keySid;\n  this.secret = secret;\n  this.ttl = options.ttl || 3600;\n  this.identity = options.identity;\n  this.nbf = options.nbf;\n  this.region = options.region;\n  this.grants = [];\n}\n\n// Class level properties\nAccessToken.IpMessagingGrant = util.deprecate(IpMessagingGrant, 'IpMessagingGrant is deprecated, use ChatGrant instead.');\nAccessToken.ChatGrant = ChatGrant;\nAccessToken.VoiceGrant = VoiceGrant;\nAccessToken.SyncGrant = SyncGrant;\nAccessToken.VideoGrant = VideoGrant;\nAccessToken.ConversationsGrant = util.deprecate(ConversationsGrant, 'ConversationsGrant is deprecated, use VideoGrant instead.');\nAccessToken.TaskRouterGrant = TaskRouterGrant;\nAccessToken.DEFAULT_ALGORITHM = 'HS256';\nAccessToken.ALGORITHMS = ['HS256', 'HS384', 'HS512'];\n_.extend(AccessToken.prototype, {\n  addGrant: function (grant) {\n    this.grants.push(grant);\n  },\n  toJwt: function (algorithm) {\n    algorithm = algorithm || AccessToken.DEFAULT_ALGORITHM;\n    if (!_.includes(AccessToken.ALGORITHMS, algorithm)) {\n      throw new Error('Algorithm not supported. Allowed values are ' + AccessToken.ALGORITHMS.join(', '));\n    }\n    var grants = {};\n    if (_.isInteger(this.identity) || _.isString(this.identity)) {\n      grants.identity = String(this.identity);\n    }\n    _.each(this.grants, function (grant) {\n      grants[grant.key] = grant.toPayload();\n    });\n    var now = Math.floor(Date.now() / 1000);\n    var payload = {\n      jti: this.keySid + '-' + now,\n      grants: grants\n    };\n    if (_.isNumber(this.nbf)) {\n      payload.nbf = this.nbf;\n    }\n    var header = {\n      cty: 'twilio-fpa;v=1',\n      typ: 'JWT'\n    };\n    if (this.region && _.isString(this.region)) {\n      header.twr = this.region;\n    }\n    return jwt.sign(payload, this.secret, {\n      header: header,\n      algorithm: algorithm,\n      issuer: this.keySid,\n      subject: this.accountSid,\n      expiresIn: this.ttl\n    });\n  }\n});\nmodule.exports = AccessToken;","map":{"version":3,"names":["_","require","jwt","util","TaskRouterGrant","options","workspaceSid","workerSid","role","extend","prototype","key","toPayload","grant","workspace_sid","worker_sid","ChatGrant","serviceSid","endpointId","deploymentRoleSid","pushCredentialSid","service_sid","endpoint_id","deployment_role_sid","push_credential_sid","IpMessagingGrant","call","create","assign","ConversationsGrant","configurationProfileSid","configuration_profile_sid","VideoGrant","room","SyncGrant","VoiceGrant","incomingAllow","outgoingApplicationSid","outgoingApplicationParams","incoming","allow","outgoing","application_sid","params","AccessToken","accountSid","keySid","secret","Error","ttl","identity","nbf","region","grants","deprecate","DEFAULT_ALGORITHM","ALGORITHMS","addGrant","push","toJwt","algorithm","includes","join","isInteger","isString","String","each","now","Math","floor","Date","payload","jti","isNumber","header","cty","typ","twr","sign","issuer","subject","expiresIn","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/jwt/AccessToken.js"],"sourcesContent":["'use strict';\n\nvar _ = require('lodash');\nvar jwt = require('jsonwebtoken');\nvar util = require('util');\n\n\n/**\n * @constructor\n * @param {object} options - ...\n * @param {string} options.workspaceSid - The workspace unique ID\n * @param {string} options.workerSid - The worker unique ID\n * @param {string} options.role - The role of the grant\n */\nfunction TaskRouterGrant(options) {\n  options = options || {};\n  this.workspaceSid = options.workspaceSid;\n  this.workerSid = options.workerSid;\n  this.role = options.role;\n}\n\n_.extend(TaskRouterGrant.prototype, {\n  key: 'task_router',\n\n  toPayload: function() {\n    var grant = {};\n    if (this.workspaceSid) { grant.workspace_sid = this.workspaceSid; }\n    if (this.workerSid) { grant.worker_sid = this.workerSid; }\n    if (this.role) { grant.role = this.role; }\n    return grant;\n  }\n});\n\n\n/**\n * @constructor\n * @param {object} options - ...\n * @param {string} options.serviceSid - The service unique ID\n * @param {string} options.endpointId - The endpoint ID\n * @param {string} options.deploymentRoleSid - SID of the deployment role to be\n *                 assigned to the user\n * @param {string} options.pushCredentialSid - The Push Credentials SID\n */\nfunction ChatGrant(options) {\n  options = options || {};\n  this.serviceSid = options.serviceSid;\n  this.endpointId = options.endpointId;\n  this.deploymentRoleSid = options.deploymentRoleSid;\n  this.pushCredentialSid = options.pushCredentialSid;\n}\n\n_.extend(ChatGrant.prototype, {\n  key: 'chat',\n\n  toPayload: function() {\n    var grant = {};\n    if (this.serviceSid) { grant.service_sid = this.serviceSid; }\n    if (this.endpointId) { grant.endpoint_id = this.endpointId; }\n    if (this.deploymentRoleSid) {\n      grant.deployment_role_sid = this.deploymentRoleSid;\n    }\n    if (this.pushCredentialSid) {\n      grant.push_credential_sid = this.pushCredentialSid;\n    }\n    return grant;\n  }\n});\n\n/**\n * @deprecated - Use ChatGrant instead.\n *\n * @constructor\n * @param {object} options - ...\n * @param {string} options.serviceSid - The service unique ID\n * @param {string} options.endpointId - The endpoint ID\n * @param {string} options.deploymentRoleSid - SID of the deployment role to be\n *                 assigned to the user\n * @param {string} options.pushCredentialSid - The Push Credentials SID\n */\nfunction IpMessagingGrant(options) {\n  ChatGrant.call(this, options);\n}\n\nIpMessagingGrant.prototype = _.create(ChatGrant.prototype, _.assign({\n  '_super': ChatGrant.prototype,\n  'constructor': ChatGrant\n}));\n\nIpMessagingGrant.prototype.key = 'ip_messaging';\n\n/**\n  * @deprecated - Use VideoGrant instead\n  *\n  * @constructor\n  * @param {object} options - ...\n  * @param {string} options.configurationProfileSid - The configuration\n  *                 profile unique ID\n  */\nfunction ConversationsGrant(options) {\n  options = options || {};\n  this.configurationProfileSid = options.configurationProfileSid;\n}\n\n_.extend(ConversationsGrant.prototype, {\n  key: 'rtc',\n  toPayload: function() {\n    var grant = {};\n    if (this.configurationProfileSid) {\n      grant.configuration_profile_sid = this.configurationProfileSid;\n    }\n    return grant;\n  }\n});\n\n/**\n * @constructor\n * @param {object} options - ...\n * @param {string} options.room - The Room name or Room sid.\n */\nfunction VideoGrant(options) {\n  options = options || {};\n  this.room = options.room;\n}\n\n_.extend(VideoGrant.prototype, {\n  key: 'video',\n  toPayload: function() {\n    var grant = {};\n    if (this.room) { grant.room = this.room; }\n    return grant;\n  }\n});\n\n/**\n * @constructor\n * @param {string} options.serviceSid - The service unique ID\n * @param {string} options.endpointId - The endpoint ID\n */\nfunction SyncGrant(options) {\n  options = options || {};\n  this.serviceSid = options.serviceSid;\n  this.endpointId = options.endpointId;\n}\n\n_.extend(SyncGrant.prototype, {\n  key: 'data_sync',\n\n  toPayload: function() {\n    var grant = {};\n    if (this.serviceSid) { grant.service_sid = this.serviceSid; }\n    if (this.endpointId) { grant.endpoint_id = this.endpointId; }\n    return grant;\n  }\n});\n\n/**\n * @constructor\n * @param {object} options - ...\n * @param {boolean} options.incomingAllow - Whether or not this endpoint is allowed to receive incoming calls as grants.identity\n * @param {string} options.outgoingApplicationSid - application sid to call when placing outgoing call\n * @param {object} options.outgoingApplicationParams - request params to pass to the application\n * @param {string} options.pushCredentialSid - Push Credential Sid to use when registering to receive incoming call notifications\n * @param {string} options.endpointId - Specify an endpoint identifier for this device, which will allow the developer\n *                 to direct calls to a specific endpoint when multiple devices are associated with a single identity\n */\nfunction VoiceGrant(options) {\n  options = options || {};\n  this.incomingAllow = options.incomingAllow;\n  this.outgoingApplicationSid = options.outgoingApplicationSid;\n  this.outgoingApplicationParams = options.outgoingApplicationParams;\n  this.pushCredentialSid = options.pushCredentialSid;\n  this.endpointId = options.endpointId;\n}\n\n_.extend(VoiceGrant.prototype, {\n  key: 'voice',\n  toPayload: function() {\n    var grant = {};\n    if (this.incomingAllow === true) {\n      grant.incoming = { allow: true };\n    }\n\n    if (this.outgoingApplicationSid) {\n      grant.outgoing = {};\n      grant.outgoing.application_sid = this.outgoingApplicationSid;\n\n      if (this.outgoingApplicationParams) {\n        grant.outgoing.params = this.outgoingApplicationParams;\n      }\n    }\n\n    if (this.pushCredentialSid) {\n      grant.push_credential_sid = this.pushCredentialSid;\n    }\n    if (this.endpointId) {\n      grant.endpoint_id = this.endpointId;\n    }\n    return grant;\n  }\n});\n\n/**\n * @constructor\n * @param {string} accountSid - The account's unique ID to which access is scoped\n * @param {string} keySid - The signing key's unique ID\n * @param {string} secret - The secret to sign the token with\n * @param {object} options - ...\n * @param {number} [options.ttl=3600] - Time to live in seconds\n * @param {string} [options.identity] - The identity of the first person\n * @param {number} [options.nbf] - Time from epoch in seconds for not before value\n * @param {string} [options.region] - The region value associated with this account\n */\nfunction AccessToken(accountSid, keySid, secret, options) {\n  if (!accountSid) { throw new Error('accountSid is required'); }\n  if (!keySid) { throw new Error('keySid is required'); }\n  if (!secret) { throw new Error('secret is required'); }\n  options = options || {};\n\n  this.accountSid = accountSid;\n  this.keySid = keySid;\n  this.secret = secret;\n  this.ttl = options.ttl || 3600;\n  this.identity = options.identity;\n  this.nbf = options.nbf;\n  this.region = options.region;\n  this.grants = [];\n}\n\n// Class level properties\nAccessToken.IpMessagingGrant = util.deprecate(IpMessagingGrant, 'IpMessagingGrant is deprecated, use ChatGrant instead.');\nAccessToken.ChatGrant = ChatGrant;\nAccessToken.VoiceGrant = VoiceGrant;\nAccessToken.SyncGrant = SyncGrant;\nAccessToken.VideoGrant = VideoGrant;\nAccessToken.ConversationsGrant = util.deprecate(ConversationsGrant, 'ConversationsGrant is deprecated, use VideoGrant instead.');\nAccessToken.TaskRouterGrant = TaskRouterGrant;\nAccessToken.DEFAULT_ALGORITHM = 'HS256';\nAccessToken.ALGORITHMS = [\n  'HS256',\n  'HS384',\n  'HS512'\n];\n\n_.extend(AccessToken.prototype, {\n  addGrant: function(grant) {\n    this.grants.push(grant);\n  },\n\n  toJwt: function(algorithm) {\n    algorithm = algorithm || AccessToken.DEFAULT_ALGORITHM;\n    if (!_.includes(AccessToken.ALGORITHMS, algorithm)) {\n      throw new Error('Algorithm not supported. Allowed values are ' + AccessToken.ALGORITHMS.join(', '));\n    }\n\n    var grants = {};\n    if (_.isInteger(this.identity) || _.isString(this.identity)) { grants.identity = String(this.identity); }\n\n    _.each(this.grants, function(grant) {\n      grants[grant.key] = grant.toPayload();\n    });\n\n    var now = Math.floor(Date.now() / 1000);\n    var payload = {\n      jti: this.keySid + '-' + now,\n      grants: grants\n    };\n    if (_.isNumber(this.nbf)) { payload.nbf = this.nbf; }\n\n    var header = {\n      cty: 'twilio-fpa;v=1',\n      typ: 'JWT'\n    };\n\n    if (this.region && _.isString(this.region)) {\n      header.twr = this.region;\n    }\n\n    return jwt.sign(payload, this.secret, {\n      header: header,\n      algorithm: algorithm,\n      issuer: this.keySid,\n      subject: this.accountSid,\n      expiresIn: this.ttl\n    });\n  }\n});\n\n\nmodule.exports = AccessToken;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}