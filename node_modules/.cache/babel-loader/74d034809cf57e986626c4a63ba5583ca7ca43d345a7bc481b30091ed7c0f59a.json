{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../base/values'); /* jshint ignore:line */\n\nvar FleetList;\nvar FleetPage;\nvar FleetInstance;\nvar FleetContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the FleetList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.FleetList\n *\n * @param {Twilio.Supersim.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nFleetList = function FleetList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function fleets\n   * @memberof Twilio.Supersim.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Supersim.V1.FleetContext}\n   */\n  /* jshint ignore:end */\n  function FleetListInstance(sid) {\n    return FleetListInstance.get(sid);\n  }\n  FleetListInstance._version = version;\n  // Path Solution\n  FleetListInstance._solution = {};\n  FleetListInstance._uri = `/Fleets`;\n  /* jshint ignore:start */\n  /**\n   * create a FleetInstance\n   *\n   * @function create\n   * @memberof Twilio.Supersim.V1.FleetList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.networkAccessProfile -\n   *          The SID or unique name of the Network Access Profile of the Fleet\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {boolean} [opts.dataEnabled] -\n   *          Defines whether SIMs in the Fleet are capable of using data connectivity\n   * @param {number} [opts.dataLimit] -\n   *          The total data usage (download and upload combined) in Megabytes that each Sim resource assigned to the Fleet resource can consume\n   * @param {boolean} [opts.commandsEnabled] -\n   *          Defines whether SIMs in the Fleet are capable of sending and receiving machine-to-machine SMS via Commands\n   * @param {string} [opts.commandsUrl] -\n   *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the Commands number\n   * @param {string} [opts.commandsMethod] -\n   *          A string representing the HTTP method to use when making a request to `commands_url`\n   * @param {boolean} [opts.smsCommandsEnabled] -\n   *          Defines whether SIMs in the Fleet are capable of sending and receiving machine-to-machine SMS via Commands\n   * @param {string} [opts.smsCommandsUrl] -\n   *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number\n   * @param {string} [opts.smsCommandsMethod] -\n   *          A string representing the HTTP method to use when making a request to `sms_commands_url`\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed FleetInstance\n   */\n  /* jshint ignore:end */\n  FleetListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.networkAccessProfile)) {\n      throw new Error('Required parameter \"opts.networkAccessProfile\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'NetworkAccessProfile': _.get(opts, 'networkAccessProfile'),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'DataEnabled': serialize.bool(_.get(opts, 'dataEnabled')),\n      'DataLimit': _.get(opts, 'dataLimit'),\n      'CommandsEnabled': serialize.bool(_.get(opts, 'commandsEnabled')),\n      'CommandsUrl': _.get(opts, 'commandsUrl'),\n      'CommandsMethod': _.get(opts, 'commandsMethod'),\n      'SmsCommandsEnabled': serialize.bool(_.get(opts, 'smsCommandsEnabled')),\n      'SmsCommandsUrl': _.get(opts, 'smsCommandsUrl'),\n      'SmsCommandsMethod': _.get(opts, 'smsCommandsMethod')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FleetInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams FleetInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Supersim.V1.FleetList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.networkAccessProfile] -\n   *          The SID or unique name of the Network Access Profile of the Fleet\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  FleetListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists FleetInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Supersim.V1.FleetList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.networkAccessProfile] -\n   *          The SID or unique name of the Network Access Profile of the Fleet\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FleetListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of FleetInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Supersim.V1.FleetList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.networkAccessProfile] -\n   *          The SID or unique name of the Network Access Profile of the Fleet\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FleetListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'NetworkAccessProfile': _.get(opts, 'networkAccessProfile'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FleetPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of FleetInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Supersim.V1.FleetList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FleetListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FleetPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a fleet\n   *\n   * @function get\n   * @memberof Twilio.Supersim.V1.FleetList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Supersim.V1.FleetContext}\n   */\n  /* jshint ignore:end */\n  FleetListInstance.get = function get(sid) {\n    return new FleetContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Supersim.V1.FleetList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  FleetListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  FleetListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return FleetListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the FleetPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.FleetPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FleetSolution} solution - Path solution\n *\n * @returns FleetPage\n */\n/* jshint ignore:end */\nFleetPage = function FleetPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(FleetPage.prototype, Page.prototype);\nFleetPage.prototype.constructor = FleetPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of FleetInstance\n *\n * @function getInstance\n * @memberof Twilio.Supersim.V1.FleetPage#\n *\n * @param {FleetPayload} payload - Payload response from the API\n *\n * @returns FleetInstance\n */\n/* jshint ignore:end */\nFleetPage.prototype.getInstance = function getInstance(payload) {\n  return new FleetInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.FleetPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFleetPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nFleetPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the FleetContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.FleetInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the Fleet resource\n * @property {boolean} dataEnabled -\n *          Defines whether SIMs in the Fleet are capable of using data connectivity\n * @property {number} dataLimit -\n *          The total data usage (download and upload combined) in Megabytes that each Sim resource assigned to the Fleet resource can consume\n * @property {fleet.data_metering} dataMetering -\n *          The model by which a SIM is metered and billed\n * @property {boolean} commandsEnabled -\n *          Defines whether SIMs in the Fleet are capable of sending and receiving machine-to-machine SMS via Commands\n * @property {string} commandsUrl -\n *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the Commands number\n * @property {string} commandsMethod -\n *          A string representing the HTTP method to use when making a request to `commands_url`\n * @property {boolean} smsCommandsEnabled -\n *          Defines whether SIMs in the Fleet are capable of sending and receiving machine-to-machine SMS via Commands\n * @property {string} smsCommandsUrl -\n *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number\n * @property {string} smsCommandsMethod -\n *          A string representing the HTTP method to use when making a request to `sms_commands_url`\n * @property {string} networkAccessProfileSid -\n *          The SID of the Network Access Profile of the Fleet\n *\n * @param {V1} version - Version of the resource\n * @param {FleetPayload} payload - The instance payload\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nFleetInstance = function FleetInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.dataEnabled = payload.data_enabled; // jshint ignore:line\n  this.dataLimit = deserialize.integer(payload.data_limit); // jshint ignore:line\n  this.dataMetering = payload.data_metering; // jshint ignore:line\n  this.commandsEnabled = payload.commands_enabled; // jshint ignore:line\n  this.commandsUrl = payload.commands_url; // jshint ignore:line\n  this.commandsMethod = payload.commands_method; // jshint ignore:line\n  this.smsCommandsEnabled = payload.sms_commands_enabled; // jshint ignore:line\n  this.smsCommandsUrl = payload.sms_commands_url; // jshint ignore:line\n  this.smsCommandsMethod = payload.sms_commands_method; // jshint ignore:line\n  this.networkAccessProfileSid = payload.network_access_profile_sid; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(FleetInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new FleetContext(this._version, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a FleetInstance\n *\n * @function fetch\n * @memberof Twilio.Supersim.V1.FleetInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FleetInstance\n */\n/* jshint ignore:end */\nFleetInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a FleetInstance\n *\n * @function update\n * @memberof Twilio.Supersim.V1.FleetInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {string} [opts.networkAccessProfile] -\n *          The SID or unique name of the Network Access Profile of the Fleet\n * @param {string} [opts.commandsUrl] -\n *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the Commands number\n * @param {string} [opts.commandsMethod] -\n *          A string representing the HTTP method to use when making a request to `commands_url`\n * @param {string} [opts.smsCommandsUrl] -\n *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number\n * @param {string} [opts.smsCommandsMethod] -\n *          A string representing the HTTP method to use when making a request to `sms_commands_url`\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FleetInstance\n */\n/* jshint ignore:end */\nFleetInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.FleetInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFleetInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nFleetInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the FleetContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.FleetContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nFleetContext = function FleetContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/Fleets/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a FleetInstance\n *\n * @function fetch\n * @memberof Twilio.Supersim.V1.FleetContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FleetInstance\n */\n/* jshint ignore:end */\nFleetContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new FleetInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a FleetInstance\n *\n * @function update\n * @memberof Twilio.Supersim.V1.FleetContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {string} [opts.networkAccessProfile] -\n *          The SID or unique name of the Network Access Profile of the Fleet\n * @param {string} [opts.commandsUrl] -\n *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the Commands number\n * @param {string} [opts.commandsMethod] -\n *          A string representing the HTTP method to use when making a request to `commands_url`\n * @param {string} [opts.smsCommandsUrl] -\n *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number\n * @param {string} [opts.smsCommandsMethod] -\n *          A string representing the HTTP method to use when making a request to `sms_commands_url`\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FleetInstance\n */\n/* jshint ignore:end */\nFleetContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'UniqueName': _.get(opts, 'uniqueName'),\n    'NetworkAccessProfile': _.get(opts, 'networkAccessProfile'),\n    'CommandsUrl': _.get(opts, 'commandsUrl'),\n    'CommandsMethod': _.get(opts, 'commandsMethod'),\n    'SmsCommandsUrl': _.get(opts, 'smsCommandsUrl'),\n    'SmsCommandsMethod': _.get(opts, 'smsCommandsMethod')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new FleetInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.FleetContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFleetContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nFleetContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  FleetList: FleetList,\n  FleetPage: FleetPage,\n  FleetInstance: FleetInstance,\n  FleetContext: FleetContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","serialize","values","FleetList","FleetPage","FleetInstance","FleetContext","version","FleetListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","networkAccessProfile","deferred","defer","data","of","bool","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","uniqueName","unique_name","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","dataEnabled","data_enabled","dataLimit","integer","data_limit","dataMetering","data_metering","commandsEnabled","commands_enabled","commandsUrl","commands_url","commandsMethod","commands_method","smsCommandsEnabled","sms_commands_enabled","smsCommandsUrl","sms_commands_url","smsCommandsMethod","sms_commands_method","networkAccessProfileSid","network_access_profile_sid","_context","undefined","Object","defineProperty","fetch","_proxy","update","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/supersim/v1/fleet.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar FleetList;\nvar FleetPage;\nvar FleetInstance;\nvar FleetContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the FleetList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.FleetList\n *\n * @param {Twilio.Supersim.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nFleetList = function FleetList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function fleets\n   * @memberof Twilio.Supersim.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Supersim.V1.FleetContext}\n   */\n  /* jshint ignore:end */\n  function FleetListInstance(sid) {\n    return FleetListInstance.get(sid);\n  }\n\n  FleetListInstance._version = version;\n  // Path Solution\n  FleetListInstance._solution = {};\n  FleetListInstance._uri = `/Fleets`;\n  /* jshint ignore:start */\n  /**\n   * create a FleetInstance\n   *\n   * @function create\n   * @memberof Twilio.Supersim.V1.FleetList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.networkAccessProfile -\n   *          The SID or unique name of the Network Access Profile of the Fleet\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {boolean} [opts.dataEnabled] -\n   *          Defines whether SIMs in the Fleet are capable of using data connectivity\n   * @param {number} [opts.dataLimit] -\n   *          The total data usage (download and upload combined) in Megabytes that each Sim resource assigned to the Fleet resource can consume\n   * @param {boolean} [opts.commandsEnabled] -\n   *          Defines whether SIMs in the Fleet are capable of sending and receiving machine-to-machine SMS via Commands\n   * @param {string} [opts.commandsUrl] -\n   *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the Commands number\n   * @param {string} [opts.commandsMethod] -\n   *          A string representing the HTTP method to use when making a request to `commands_url`\n   * @param {boolean} [opts.smsCommandsEnabled] -\n   *          Defines whether SIMs in the Fleet are capable of sending and receiving machine-to-machine SMS via Commands\n   * @param {string} [opts.smsCommandsUrl] -\n   *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number\n   * @param {string} [opts.smsCommandsMethod] -\n   *          A string representing the HTTP method to use when making a request to `sms_commands_url`\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed FleetInstance\n   */\n  /* jshint ignore:end */\n  FleetListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.networkAccessProfile)) {\n      throw new Error('Required parameter \"opts.networkAccessProfile\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'NetworkAccessProfile': _.get(opts, 'networkAccessProfile'),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'DataEnabled': serialize.bool(_.get(opts, 'dataEnabled')),\n      'DataLimit': _.get(opts, 'dataLimit'),\n      'CommandsEnabled': serialize.bool(_.get(opts, 'commandsEnabled')),\n      'CommandsUrl': _.get(opts, 'commandsUrl'),\n      'CommandsMethod': _.get(opts, 'commandsMethod'),\n      'SmsCommandsEnabled': serialize.bool(_.get(opts, 'smsCommandsEnabled')),\n      'SmsCommandsUrl': _.get(opts, 'smsCommandsUrl'),\n      'SmsCommandsMethod': _.get(opts, 'smsCommandsMethod')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FleetInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams FleetInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Supersim.V1.FleetList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.networkAccessProfile] -\n   *          The SID or unique name of the Network Access Profile of the Fleet\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  FleetListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists FleetInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Supersim.V1.FleetList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.networkAccessProfile] -\n   *          The SID or unique name of the Network Access Profile of the Fleet\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FleetListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of FleetInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Supersim.V1.FleetList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.networkAccessProfile] -\n   *          The SID or unique name of the Network Access Profile of the Fleet\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FleetListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'NetworkAccessProfile': _.get(opts, 'networkAccessProfile'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FleetPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of FleetInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Supersim.V1.FleetList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FleetListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FleetPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a fleet\n   *\n   * @function get\n   * @memberof Twilio.Supersim.V1.FleetList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Supersim.V1.FleetContext}\n   */\n  /* jshint ignore:end */\n  FleetListInstance.get = function get(sid) {\n    return new FleetContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Supersim.V1.FleetList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  FleetListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  FleetListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return FleetListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FleetPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.FleetPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FleetSolution} solution - Path solution\n *\n * @returns FleetPage\n */\n/* jshint ignore:end */\nFleetPage = function FleetPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(FleetPage.prototype, Page.prototype);\nFleetPage.prototype.constructor = FleetPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of FleetInstance\n *\n * @function getInstance\n * @memberof Twilio.Supersim.V1.FleetPage#\n *\n * @param {FleetPayload} payload - Payload response from the API\n *\n * @returns FleetInstance\n */\n/* jshint ignore:end */\nFleetPage.prototype.getInstance = function getInstance(payload) {\n  return new FleetInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.FleetPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFleetPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nFleetPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FleetContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.FleetInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the Fleet resource\n * @property {boolean} dataEnabled -\n *          Defines whether SIMs in the Fleet are capable of using data connectivity\n * @property {number} dataLimit -\n *          The total data usage (download and upload combined) in Megabytes that each Sim resource assigned to the Fleet resource can consume\n * @property {fleet.data_metering} dataMetering -\n *          The model by which a SIM is metered and billed\n * @property {boolean} commandsEnabled -\n *          Defines whether SIMs in the Fleet are capable of sending and receiving machine-to-machine SMS via Commands\n * @property {string} commandsUrl -\n *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the Commands number\n * @property {string} commandsMethod -\n *          A string representing the HTTP method to use when making a request to `commands_url`\n * @property {boolean} smsCommandsEnabled -\n *          Defines whether SIMs in the Fleet are capable of sending and receiving machine-to-machine SMS via Commands\n * @property {string} smsCommandsUrl -\n *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number\n * @property {string} smsCommandsMethod -\n *          A string representing the HTTP method to use when making a request to `sms_commands_url`\n * @property {string} networkAccessProfileSid -\n *          The SID of the Network Access Profile of the Fleet\n *\n * @param {V1} version - Version of the resource\n * @param {FleetPayload} payload - The instance payload\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nFleetInstance = function FleetInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.dataEnabled = payload.data_enabled; // jshint ignore:line\n  this.dataLimit = deserialize.integer(payload.data_limit); // jshint ignore:line\n  this.dataMetering = payload.data_metering; // jshint ignore:line\n  this.commandsEnabled = payload.commands_enabled; // jshint ignore:line\n  this.commandsUrl = payload.commands_url; // jshint ignore:line\n  this.commandsMethod = payload.commands_method; // jshint ignore:line\n  this.smsCommandsEnabled = payload.sms_commands_enabled; // jshint ignore:line\n  this.smsCommandsUrl = payload.sms_commands_url; // jshint ignore:line\n  this.smsCommandsMethod = payload.sms_commands_method; // jshint ignore:line\n  this.networkAccessProfileSid = payload.network_access_profile_sid; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(FleetInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new FleetContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a FleetInstance\n *\n * @function fetch\n * @memberof Twilio.Supersim.V1.FleetInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FleetInstance\n */\n/* jshint ignore:end */\nFleetInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a FleetInstance\n *\n * @function update\n * @memberof Twilio.Supersim.V1.FleetInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {string} [opts.networkAccessProfile] -\n *          The SID or unique name of the Network Access Profile of the Fleet\n * @param {string} [opts.commandsUrl] -\n *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the Commands number\n * @param {string} [opts.commandsMethod] -\n *          A string representing the HTTP method to use when making a request to `commands_url`\n * @param {string} [opts.smsCommandsUrl] -\n *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number\n * @param {string} [opts.smsCommandsMethod] -\n *          A string representing the HTTP method to use when making a request to `sms_commands_url`\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FleetInstance\n */\n/* jshint ignore:end */\nFleetInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.FleetInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFleetInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nFleetInstance.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FleetContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.FleetContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nFleetContext = function FleetContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/Fleets/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a FleetInstance\n *\n * @function fetch\n * @memberof Twilio.Supersim.V1.FleetContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FleetInstance\n */\n/* jshint ignore:end */\nFleetContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new FleetInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a FleetInstance\n *\n * @function update\n * @memberof Twilio.Supersim.V1.FleetContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {string} [opts.networkAccessProfile] -\n *          The SID or unique name of the Network Access Profile of the Fleet\n * @param {string} [opts.commandsUrl] -\n *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the Commands number\n * @param {string} [opts.commandsMethod] -\n *          A string representing the HTTP method to use when making a request to `commands_url`\n * @param {string} [opts.smsCommandsUrl] -\n *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number\n * @param {string} [opts.smsCommandsMethod] -\n *          A string representing the HTTP method to use when making a request to `sms_commands_url`\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FleetInstance\n */\n/* jshint ignore:end */\nFleetContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'UniqueName': _.get(opts, 'uniqueName'),\n    'NetworkAccessProfile': _.get(opts, 'networkAccessProfile'),\n    'CommandsUrl': _.get(opts, 'commandsUrl'),\n    'CommandsMethod': _.get(opts, 'commandsMethod'),\n    'SmsCommandsUrl': _.get(opts, 'smsCommandsUrl'),\n    'SmsCommandsMethod': _.get(opts, 'smsCommandsMethod')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new FleetInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.FleetContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFleetContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nFleetContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  FleetList: FleetList,\n  FleetPage: FleetPage,\n  FleetInstance: FleetInstance,\n  FleetContext: FleetContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}