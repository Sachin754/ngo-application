{"ast":null,"code":"'use strict';\n\nvar builder = require('xmlbuilder'); /* jshint ignore:line */\n\n/* jshint ignore:start */\n/**\n * Parent TwiML object\n */\n/* jshint ignore:end */\nfunction TwiML() {\n  this.response = builder.create('Response', {\n    stringify: {\n      attValue: function (value) {\n        if (Array.isArray(value)) {\n          value = value.join(' ');\n        }\n        return this.attEscape('' + value || '');\n      }\n    }\n  }).dec('1.0', 'UTF-8');\n}\n\n/* jshint ignore:start */\n/**\n * Because child elements have properties named after their class names, we need\n * to translate that when we want to access that at the parent prototype level.\n * So this will translate something like Say to 'say' and VoiceResponse to\n * 'response'.\n */\n/* jshint ignore:end */\nTwiML.prototype._getXml = function _getPropertyName() {\n  return this[this._propertyName];\n};\n\n/* jshint ignore:start */\n/**\n * Convert to TwiML\n *\n * @returns TwiML XML\n */\n/* jshint ignore:end */\nTwiML.prototype.toString = function toString() {\n  return this._getXml().end();\n};\n\n/* jshint ignore:start */\n/**\n * Add text under the TwiML node\n *\n * @param {string} content\n */\n/* jshint ignore:end */\nTwiML.prototype.addText = function addText(content) {\n  this._getXml().txt(content);\n};\n\n/* jshint ignore:start */\n/**\n * Add an arbitrary tag as a child.\n *\n * @param {string} content\n */\n/* jshint ignore:end */\nTwiML.prototype.addChild = function addChild(tagName, attributes) {\n  return new GenericNode(this._getXml().ele(tagName, attributes));\n};\n\n/* jshint ignore:start */\n/**\n * Generic node\n */\n/* jshint ignore:end */\nfunction GenericNode(node) {\n  // must match variable name for _getPropertyName\n  this.node = node;\n  this._propertyName = 'node';\n}\n\n// \"Inherit\" from TwiML\nGenericNode.prototype = Object.create(TwiML.prototype);\nGenericNode.prototype.constructor = GenericNode;\nmodule.exports = TwiML;","map":{"version":3,"names":["builder","require","TwiML","response","create","stringify","attValue","value","Array","isArray","join","attEscape","dec","prototype","_getXml","_getPropertyName","_propertyName","toString","end","addText","content","txt","addChild","tagName","attributes","GenericNode","ele","node","Object","constructor","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/twiml/TwiML.js"],"sourcesContent":["'use strict';\n\nvar builder = require('xmlbuilder');  /* jshint ignore:line */\n\n/* jshint ignore:start */\n/**\n * Parent TwiML object\n */\n/* jshint ignore:end */\nfunction TwiML() {\n  this.response = builder.create('Response', {\n    stringify: {\n      attValue: function (value) {\n        if (Array.isArray(value)) {\n          value = value.join(' ');\n        }\n        return this.attEscape('' + value || '');\n      }\n    }\n  }).dec('1.0', 'UTF-8');\n}\n\n/* jshint ignore:start */\n/**\n * Because child elements have properties named after their class names, we need\n * to translate that when we want to access that at the parent prototype level.\n * So this will translate something like Say to 'say' and VoiceResponse to\n * 'response'.\n */\n/* jshint ignore:end */\nTwiML.prototype._getXml = function _getPropertyName() {\n  return this[this._propertyName];\n}\n\n/* jshint ignore:start */\n/**\n * Convert to TwiML\n *\n * @returns TwiML XML\n */\n/* jshint ignore:end */\nTwiML.prototype.toString = function toString() {\n  return this._getXml().end();\n}\n\n/* jshint ignore:start */\n/**\n * Add text under the TwiML node\n *\n * @param {string} content\n */\n/* jshint ignore:end */\nTwiML.prototype.addText = function addText(content) {\n  this._getXml().txt(content);\n}\n\n/* jshint ignore:start */\n/**\n * Add an arbitrary tag as a child.\n *\n * @param {string} content\n */\n/* jshint ignore:end */\nTwiML.prototype.addChild = function addChild(tagName, attributes) {\n  return new GenericNode(this._getXml().ele(tagName, attributes));\n}\n\n/* jshint ignore:start */\n/**\n * Generic node\n */\n/* jshint ignore:end */\nfunction GenericNode(node) {\n  // must match variable name for _getPropertyName\n  this.node = node;\n  this._propertyName = 'node';\n}\n\n// \"Inherit\" from TwiML\nGenericNode.prototype = Object.create(TwiML.prototype);\nGenericNode.prototype.constructor = GenericNode;\n\nmodule.exports = TwiML;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,OAAO,GAAGC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAE;;AAEtC;AACA;AACA;AACA;AACA;AACA,SAASC,KAAKA,CAAA,EAAG;EACf,IAAI,CAACC,QAAQ,GAAGH,OAAO,CAACI,MAAM,CAAC,UAAU,EAAE;IACzCC,SAAS,EAAE;MACTC,QAAQ,EAAE,SAAAA,CAAUC,KAAK,EAAE;QACzB,IAAIC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;UACxBA,KAAK,GAAGA,KAAK,CAACG,IAAI,CAAC,GAAG,CAAC;QACzB;QACA,OAAO,IAAI,CAACC,SAAS,CAAC,EAAE,GAAGJ,KAAK,IAAI,EAAE,CAAC;MACzC;IACF;EACF,CAAC,CAAC,CAACK,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAV,KAAK,CAACW,SAAS,CAACC,OAAO,GAAG,SAASC,gBAAgBA,CAAA,EAAG;EACpD,OAAO,IAAI,CAAC,IAAI,CAACC,aAAa,CAAC;AACjC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAd,KAAK,CAACW,SAAS,CAACI,QAAQ,GAAG,SAASA,QAAQA,CAAA,EAAG;EAC7C,OAAO,IAAI,CAACH,OAAO,CAAC,CAAC,CAACI,GAAG,CAAC,CAAC;AAC7B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAhB,KAAK,CAACW,SAAS,CAACM,OAAO,GAAG,SAASA,OAAOA,CAACC,OAAO,EAAE;EAClD,IAAI,CAACN,OAAO,CAAC,CAAC,CAACO,GAAG,CAACD,OAAO,CAAC;AAC7B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAlB,KAAK,CAACW,SAAS,CAACS,QAAQ,GAAG,SAASA,QAAQA,CAACC,OAAO,EAAEC,UAAU,EAAE;EAChE,OAAO,IAAIC,WAAW,CAAC,IAAI,CAACX,OAAO,CAAC,CAAC,CAACY,GAAG,CAACH,OAAO,EAAEC,UAAU,CAAC,CAAC;AACjE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,SAASC,WAAWA,CAACE,IAAI,EAAE;EACzB;EACA,IAAI,CAACA,IAAI,GAAGA,IAAI;EAChB,IAAI,CAACX,aAAa,GAAG,MAAM;AAC7B;;AAEA;AACAS,WAAW,CAACZ,SAAS,GAAGe,MAAM,CAACxB,MAAM,CAACF,KAAK,CAACW,SAAS,CAAC;AACtDY,WAAW,CAACZ,SAAS,CAACgB,WAAW,GAAGJ,WAAW;AAE/CK,MAAM,CAACC,OAAO,GAAG7B,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}