{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../base/values'); /* jshint ignore:line */\n\nvar FlexFlowList;\nvar FlexFlowPage;\nvar FlexFlowInstance;\nvar FlexFlowContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the FlexFlowList\n *\n * @constructor Twilio.FlexApi.V1.FlexFlowList\n *\n * @param {Twilio.FlexApi.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nFlexFlowList = function FlexFlowList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function flexFlow\n   * @memberof Twilio.FlexApi.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.FlexApi.V1.FlexFlowContext}\n   */\n  /* jshint ignore:end */\n  function FlexFlowListInstance(sid) {\n    return FlexFlowListInstance.get(sid);\n  }\n  FlexFlowListInstance._version = version;\n  // Path Solution\n  FlexFlowListInstance._solution = {};\n  FlexFlowListInstance._uri = `/FlexFlows`;\n  /* jshint ignore:start */\n  /**\n   * Streams FlexFlowInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.FlexApi.V1.FlexFlowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The `friendly_name` of the Flex Flow resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  FlexFlowListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists FlexFlowInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.FlexApi.V1.FlexFlowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The `friendly_name` of the Flex Flow resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FlexFlowListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of FlexFlowInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.FlexApi.V1.FlexFlowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The `friendly_name` of the Flex Flow resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FlexFlowListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FlexFlowPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of FlexFlowInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.FlexApi.V1.FlexFlowList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FlexFlowListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FlexFlowPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a FlexFlowInstance\n   *\n   * @function create\n   * @memberof Twilio.FlexApi.V1.FlexFlowList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - A string to describe the resource\n   * @param {string} opts.chatServiceSid - The SID of the chat service\n   * @param {flex_flow.channel_type} opts.channelType - The channel type\n   * @param {string} [opts.contactIdentity] - The channel contact's Identity\n   * @param {boolean} [opts.enabled] - Whether the new Flex Flow is enabled\n   * @param {flex_flow.integration_type} [opts.integrationType] -\n   *          The software that will handle inbound messages.\n   * @param {string} [opts.integration.flowSid] - The SID of the Studio Flow\n   * @param {string} [opts.integration.url] - The External Webhook URL\n   * @param {string} [opts.integration.workspaceSid] -\n   *          The Workspace SID for a new Task\n   * @param {string} [opts.integration.workflowSid] - The Workflow SID for a new Task\n   * @param {string} [opts.integration.channel] - The Task Channel for a new Task\n   * @param {number} [opts.integration.timeout] -\n   *          The Task timeout in seconds for a new Task\n   * @param {number} [opts.integration.priority] - The Task priority of a new Task\n   * @param {boolean} [opts.integration.creationOnMessage] -\n   *          Whether to create a Task when the first message arrives\n   * @param {boolean} [opts.longLived] -\n   *          Reuse this chat channel for future interactions with a contact\n   * @param {boolean} [opts.janitorEnabled] -\n   *          Remove active Proxy sessions if the corresponding Task is deleted\n   * @param {number} [opts.integration.retryCount] -\n   *          The number of times to retry the webhook if the first attempt fails\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed FlexFlowInstance\n   */\n  /* jshint ignore:end */\n  FlexFlowListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n    if (_.isUndefined(opts.chatServiceSid)) {\n      throw new Error('Required parameter \"opts.chatServiceSid\" missing.');\n    }\n    if (_.isUndefined(opts.channelType)) {\n      throw new Error('Required parameter \"opts.channelType\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'ChatServiceSid': _.get(opts, 'chatServiceSid'),\n      'ChannelType': _.get(opts, 'channelType'),\n      'ContactIdentity': _.get(opts, 'contactIdentity'),\n      'Enabled': serialize.bool(_.get(opts, 'enabled')),\n      'IntegrationType': _.get(opts, 'integrationType'),\n      'Integration.FlowSid': _.get(opts, 'integration.flowSid'),\n      'Integration.Url': _.get(opts, 'integration.url'),\n      'Integration.WorkspaceSid': _.get(opts, 'integration.workspaceSid'),\n      'Integration.WorkflowSid': _.get(opts, 'integration.workflowSid'),\n      'Integration.Channel': _.get(opts, 'integration.channel'),\n      'Integration.Timeout': _.get(opts, 'integration.timeout'),\n      'Integration.Priority': _.get(opts, 'integration.priority'),\n      'Integration.CreationOnMessage': serialize.bool(_.get(opts, 'integration.creationOnMessage')),\n      'LongLived': serialize.bool(_.get(opts, 'longLived')),\n      'JanitorEnabled': serialize.bool(_.get(opts, 'janitorEnabled')),\n      'Integration.RetryCount': _.get(opts, 'integration.retryCount')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FlexFlowInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a flex_flow\n   *\n   * @function get\n   * @memberof Twilio.FlexApi.V1.FlexFlowList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.FlexApi.V1.FlexFlowContext}\n   */\n  /* jshint ignore:end */\n  FlexFlowListInstance.get = function get(sid) {\n    return new FlexFlowContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.FlexApi.V1.FlexFlowList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  FlexFlowListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  FlexFlowListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return FlexFlowListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the FlexFlowPage\n *\n * @constructor Twilio.FlexApi.V1.FlexFlowPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FlexFlowSolution} solution - Path solution\n *\n * @returns FlexFlowPage\n */\n/* jshint ignore:end */\nFlexFlowPage = function FlexFlowPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(FlexFlowPage.prototype, Page.prototype);\nFlexFlowPage.prototype.constructor = FlexFlowPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of FlexFlowInstance\n *\n * @function getInstance\n * @memberof Twilio.FlexApi.V1.FlexFlowPage#\n *\n * @param {FlexFlowPayload} payload - Payload response from the API\n *\n * @returns FlexFlowInstance\n */\n/* jshint ignore:end */\nFlexFlowPage.prototype.getInstance = function getInstance(payload) {\n  return new FlexFlowInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.FlexFlowPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFlexFlowPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nFlexFlowPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the FlexFlowContext\n *\n * @constructor Twilio.FlexApi.V1.FlexFlowInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} chatServiceSid - The SID of the chat service\n * @property {flex_flow.channel_type} channelType - The channel type\n * @property {string} contactIdentity - The channel contact's Identity\n * @property {boolean} enabled - Whether the Flex Flow is enabled\n * @property {flex_flow.integration_type} integrationType -\n *          The software that will handle inbound messages.\n * @property {object} integration -\n *          An object that contains specific parameters for the integration\n * @property {boolean} longLived -\n *          Re-use this chat channel for future interactions with a contact\n * @property {boolean} janitorEnabled -\n *          Remove active Proxy sessions if the corresponding Task is deleted.\n * @property {string} url - The absolute URL of the Flex Flow resource\n *\n * @param {V1} version - Version of the resource\n * @param {FlexFlowPayload} payload - The instance payload\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nFlexFlowInstance = function FlexFlowInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.chatServiceSid = payload.chat_service_sid; // jshint ignore:line\n  this.channelType = payload.channel_type; // jshint ignore:line\n  this.contactIdentity = payload.contact_identity; // jshint ignore:line\n  this.enabled = payload.enabled; // jshint ignore:line\n  this.integrationType = payload.integration_type; // jshint ignore:line\n  this.integration = payload.integration; // jshint ignore:line\n  this.longLived = payload.long_lived; // jshint ignore:line\n  this.janitorEnabled = payload.janitor_enabled; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(FlexFlowInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new FlexFlowContext(this._version, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a FlexFlowInstance\n *\n * @function fetch\n * @memberof Twilio.FlexApi.V1.FlexFlowInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlexFlowInstance\n */\n/* jshint ignore:end */\nFlexFlowInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a FlexFlowInstance\n *\n * @function update\n * @memberof Twilio.FlexApi.V1.FlexFlowInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.chatServiceSid] - The SID of the chat service\n * @param {flex_flow.channel_type} [opts.channelType] - The channel type\n * @param {string} [opts.contactIdentity] - The channel contact's Identity\n * @param {boolean} [opts.enabled] - Whether the new Flex Flow is enabled\n * @param {flex_flow.integration_type} [opts.integrationType] -\n *          The software that will handle inbound messages.\n * @param {string} [opts.integration.flowSid] - The SID of the Studio Flow\n * @param {string} [opts.integration.url] - The External Webhook URL\n * @param {string} [opts.integration.workspaceSid] -\n *          The Workspace SID for a new Task\n * @param {string} [opts.integration.workflowSid] - The Workflow SID for a new Task\n * @param {string} [opts.integration.channel] - The Task Channel for a new Task\n * @param {number} [opts.integration.timeout] -\n *          The Task timeout in seconds for a new Task\n * @param {number} [opts.integration.priority] - The Task priority of a new Task\n * @param {boolean} [opts.integration.creationOnMessage] -\n *          Whether to create a Task when the first message arrives\n * @param {boolean} [opts.longLived] -\n *          Reuse this chat channel for future interactions with a contact\n * @param {boolean} [opts.janitorEnabled] -\n *          Remove active Proxy sessions if the corresponding Task is deleted\n * @param {number} [opts.integration.retryCount] -\n *          The number of times to retry the webhook if the first attempt fails\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlexFlowInstance\n */\n/* jshint ignore:end */\nFlexFlowInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a FlexFlowInstance\n *\n * @function remove\n * @memberof Twilio.FlexApi.V1.FlexFlowInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlexFlowInstance\n */\n/* jshint ignore:end */\nFlexFlowInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.FlexFlowInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFlexFlowInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nFlexFlowInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the FlexFlowContext\n *\n * @constructor Twilio.FlexApi.V1.FlexFlowContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nFlexFlowContext = function FlexFlowContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/FlexFlows/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a FlexFlowInstance\n *\n * @function fetch\n * @memberof Twilio.FlexApi.V1.FlexFlowContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlexFlowInstance\n */\n/* jshint ignore:end */\nFlexFlowContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new FlexFlowInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a FlexFlowInstance\n *\n * @function update\n * @memberof Twilio.FlexApi.V1.FlexFlowContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.chatServiceSid] - The SID of the chat service\n * @param {flex_flow.channel_type} [opts.channelType] - The channel type\n * @param {string} [opts.contactIdentity] - The channel contact's Identity\n * @param {boolean} [opts.enabled] - Whether the new Flex Flow is enabled\n * @param {flex_flow.integration_type} [opts.integrationType] -\n *          The software that will handle inbound messages.\n * @param {string} [opts.integration.flowSid] - The SID of the Studio Flow\n * @param {string} [opts.integration.url] - The External Webhook URL\n * @param {string} [opts.integration.workspaceSid] -\n *          The Workspace SID for a new Task\n * @param {string} [opts.integration.workflowSid] - The Workflow SID for a new Task\n * @param {string} [opts.integration.channel] - The Task Channel for a new Task\n * @param {number} [opts.integration.timeout] -\n *          The Task timeout in seconds for a new Task\n * @param {number} [opts.integration.priority] - The Task priority of a new Task\n * @param {boolean} [opts.integration.creationOnMessage] -\n *          Whether to create a Task when the first message arrives\n * @param {boolean} [opts.longLived] -\n *          Reuse this chat channel for future interactions with a contact\n * @param {boolean} [opts.janitorEnabled] -\n *          Remove active Proxy sessions if the corresponding Task is deleted\n * @param {number} [opts.integration.retryCount] -\n *          The number of times to retry the webhook if the first attempt fails\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlexFlowInstance\n */\n/* jshint ignore:end */\nFlexFlowContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'ChatServiceSid': _.get(opts, 'chatServiceSid'),\n    'ChannelType': _.get(opts, 'channelType'),\n    'ContactIdentity': _.get(opts, 'contactIdentity'),\n    'Enabled': serialize.bool(_.get(opts, 'enabled')),\n    'IntegrationType': _.get(opts, 'integrationType'),\n    'Integration.FlowSid': _.get(opts, 'integration.flowSid'),\n    'Integration.Url': _.get(opts, 'integration.url'),\n    'Integration.WorkspaceSid': _.get(opts, 'integration.workspaceSid'),\n    'Integration.WorkflowSid': _.get(opts, 'integration.workflowSid'),\n    'Integration.Channel': _.get(opts, 'integration.channel'),\n    'Integration.Timeout': _.get(opts, 'integration.timeout'),\n    'Integration.Priority': _.get(opts, 'integration.priority'),\n    'Integration.CreationOnMessage': serialize.bool(_.get(opts, 'integration.creationOnMessage')),\n    'LongLived': serialize.bool(_.get(opts, 'longLived')),\n    'JanitorEnabled': serialize.bool(_.get(opts, 'janitorEnabled')),\n    'Integration.RetryCount': _.get(opts, 'integration.retryCount')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new FlexFlowInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a FlexFlowInstance\n *\n * @function remove\n * @memberof Twilio.FlexApi.V1.FlexFlowContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlexFlowInstance\n */\n/* jshint ignore:end */\nFlexFlowContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.FlexFlowContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFlexFlowContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nFlexFlowContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  FlexFlowList: FlexFlowList,\n  FlexFlowPage: FlexFlowPage,\n  FlexFlowInstance: FlexFlowInstance,\n  FlexFlowContext: FlexFlowContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","serialize","values","FlexFlowList","FlexFlowPage","FlexFlowInstance","FlexFlowContext","version","FlexFlowListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","friendlyName","chatServiceSid","channelType","bool","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","friendly_name","chat_service_sid","channel_type","contactIdentity","contact_identity","enabled","integrationType","integration_type","integration","longLived","long_lived","janitorEnabled","janitor_enabled","url","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/flexApi/v1/flexFlow.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar FlexFlowList;\nvar FlexFlowPage;\nvar FlexFlowInstance;\nvar FlexFlowContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the FlexFlowList\n *\n * @constructor Twilio.FlexApi.V1.FlexFlowList\n *\n * @param {Twilio.FlexApi.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nFlexFlowList = function FlexFlowList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function flexFlow\n   * @memberof Twilio.FlexApi.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.FlexApi.V1.FlexFlowContext}\n   */\n  /* jshint ignore:end */\n  function FlexFlowListInstance(sid) {\n    return FlexFlowListInstance.get(sid);\n  }\n\n  FlexFlowListInstance._version = version;\n  // Path Solution\n  FlexFlowListInstance._solution = {};\n  FlexFlowListInstance._uri = `/FlexFlows`;\n  /* jshint ignore:start */\n  /**\n   * Streams FlexFlowInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.FlexApi.V1.FlexFlowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The `friendly_name` of the Flex Flow resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  FlexFlowListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists FlexFlowInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.FlexApi.V1.FlexFlowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The `friendly_name` of the Flex Flow resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FlexFlowListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of FlexFlowInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.FlexApi.V1.FlexFlowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The `friendly_name` of the Flex Flow resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FlexFlowListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FlexFlowPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of FlexFlowInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.FlexApi.V1.FlexFlowList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FlexFlowListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FlexFlowPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a FlexFlowInstance\n   *\n   * @function create\n   * @memberof Twilio.FlexApi.V1.FlexFlowList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - A string to describe the resource\n   * @param {string} opts.chatServiceSid - The SID of the chat service\n   * @param {flex_flow.channel_type} opts.channelType - The channel type\n   * @param {string} [opts.contactIdentity] - The channel contact's Identity\n   * @param {boolean} [opts.enabled] - Whether the new Flex Flow is enabled\n   * @param {flex_flow.integration_type} [opts.integrationType] -\n   *          The software that will handle inbound messages.\n   * @param {string} [opts.integration.flowSid] - The SID of the Studio Flow\n   * @param {string} [opts.integration.url] - The External Webhook URL\n   * @param {string} [opts.integration.workspaceSid] -\n   *          The Workspace SID for a new Task\n   * @param {string} [opts.integration.workflowSid] - The Workflow SID for a new Task\n   * @param {string} [opts.integration.channel] - The Task Channel for a new Task\n   * @param {number} [opts.integration.timeout] -\n   *          The Task timeout in seconds for a new Task\n   * @param {number} [opts.integration.priority] - The Task priority of a new Task\n   * @param {boolean} [opts.integration.creationOnMessage] -\n   *          Whether to create a Task when the first message arrives\n   * @param {boolean} [opts.longLived] -\n   *          Reuse this chat channel for future interactions with a contact\n   * @param {boolean} [opts.janitorEnabled] -\n   *          Remove active Proxy sessions if the corresponding Task is deleted\n   * @param {number} [opts.integration.retryCount] -\n   *          The number of times to retry the webhook if the first attempt fails\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed FlexFlowInstance\n   */\n  /* jshint ignore:end */\n  FlexFlowListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n    if (_.isUndefined(opts.chatServiceSid)) {\n      throw new Error('Required parameter \"opts.chatServiceSid\" missing.');\n    }\n    if (_.isUndefined(opts.channelType)) {\n      throw new Error('Required parameter \"opts.channelType\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'ChatServiceSid': _.get(opts, 'chatServiceSid'),\n      'ChannelType': _.get(opts, 'channelType'),\n      'ContactIdentity': _.get(opts, 'contactIdentity'),\n      'Enabled': serialize.bool(_.get(opts, 'enabled')),\n      'IntegrationType': _.get(opts, 'integrationType'),\n      'Integration.FlowSid': _.get(opts, 'integration.flowSid'),\n      'Integration.Url': _.get(opts, 'integration.url'),\n      'Integration.WorkspaceSid': _.get(opts, 'integration.workspaceSid'),\n      'Integration.WorkflowSid': _.get(opts, 'integration.workflowSid'),\n      'Integration.Channel': _.get(opts, 'integration.channel'),\n      'Integration.Timeout': _.get(opts, 'integration.timeout'),\n      'Integration.Priority': _.get(opts, 'integration.priority'),\n      'Integration.CreationOnMessage': serialize.bool(_.get(opts, 'integration.creationOnMessage')),\n      'LongLived': serialize.bool(_.get(opts, 'longLived')),\n      'JanitorEnabled': serialize.bool(_.get(opts, 'janitorEnabled')),\n      'Integration.RetryCount': _.get(opts, 'integration.retryCount')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FlexFlowInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a flex_flow\n   *\n   * @function get\n   * @memberof Twilio.FlexApi.V1.FlexFlowList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.FlexApi.V1.FlexFlowContext}\n   */\n  /* jshint ignore:end */\n  FlexFlowListInstance.get = function get(sid) {\n    return new FlexFlowContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.FlexApi.V1.FlexFlowList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  FlexFlowListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  FlexFlowListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return FlexFlowListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FlexFlowPage\n *\n * @constructor Twilio.FlexApi.V1.FlexFlowPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FlexFlowSolution} solution - Path solution\n *\n * @returns FlexFlowPage\n */\n/* jshint ignore:end */\nFlexFlowPage = function FlexFlowPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(FlexFlowPage.prototype, Page.prototype);\nFlexFlowPage.prototype.constructor = FlexFlowPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of FlexFlowInstance\n *\n * @function getInstance\n * @memberof Twilio.FlexApi.V1.FlexFlowPage#\n *\n * @param {FlexFlowPayload} payload - Payload response from the API\n *\n * @returns FlexFlowInstance\n */\n/* jshint ignore:end */\nFlexFlowPage.prototype.getInstance = function getInstance(payload) {\n  return new FlexFlowInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.FlexFlowPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFlexFlowPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nFlexFlowPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FlexFlowContext\n *\n * @constructor Twilio.FlexApi.V1.FlexFlowInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} chatServiceSid - The SID of the chat service\n * @property {flex_flow.channel_type} channelType - The channel type\n * @property {string} contactIdentity - The channel contact's Identity\n * @property {boolean} enabled - Whether the Flex Flow is enabled\n * @property {flex_flow.integration_type} integrationType -\n *          The software that will handle inbound messages.\n * @property {object} integration -\n *          An object that contains specific parameters for the integration\n * @property {boolean} longLived -\n *          Re-use this chat channel for future interactions with a contact\n * @property {boolean} janitorEnabled -\n *          Remove active Proxy sessions if the corresponding Task is deleted.\n * @property {string} url - The absolute URL of the Flex Flow resource\n *\n * @param {V1} version - Version of the resource\n * @param {FlexFlowPayload} payload - The instance payload\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nFlexFlowInstance = function FlexFlowInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.chatServiceSid = payload.chat_service_sid; // jshint ignore:line\n  this.channelType = payload.channel_type; // jshint ignore:line\n  this.contactIdentity = payload.contact_identity; // jshint ignore:line\n  this.enabled = payload.enabled; // jshint ignore:line\n  this.integrationType = payload.integration_type; // jshint ignore:line\n  this.integration = payload.integration; // jshint ignore:line\n  this.longLived = payload.long_lived; // jshint ignore:line\n  this.janitorEnabled = payload.janitor_enabled; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(FlexFlowInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new FlexFlowContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a FlexFlowInstance\n *\n * @function fetch\n * @memberof Twilio.FlexApi.V1.FlexFlowInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlexFlowInstance\n */\n/* jshint ignore:end */\nFlexFlowInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a FlexFlowInstance\n *\n * @function update\n * @memberof Twilio.FlexApi.V1.FlexFlowInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.chatServiceSid] - The SID of the chat service\n * @param {flex_flow.channel_type} [opts.channelType] - The channel type\n * @param {string} [opts.contactIdentity] - The channel contact's Identity\n * @param {boolean} [opts.enabled] - Whether the new Flex Flow is enabled\n * @param {flex_flow.integration_type} [opts.integrationType] -\n *          The software that will handle inbound messages.\n * @param {string} [opts.integration.flowSid] - The SID of the Studio Flow\n * @param {string} [opts.integration.url] - The External Webhook URL\n * @param {string} [opts.integration.workspaceSid] -\n *          The Workspace SID for a new Task\n * @param {string} [opts.integration.workflowSid] - The Workflow SID for a new Task\n * @param {string} [opts.integration.channel] - The Task Channel for a new Task\n * @param {number} [opts.integration.timeout] -\n *          The Task timeout in seconds for a new Task\n * @param {number} [opts.integration.priority] - The Task priority of a new Task\n * @param {boolean} [opts.integration.creationOnMessage] -\n *          Whether to create a Task when the first message arrives\n * @param {boolean} [opts.longLived] -\n *          Reuse this chat channel for future interactions with a contact\n * @param {boolean} [opts.janitorEnabled] -\n *          Remove active Proxy sessions if the corresponding Task is deleted\n * @param {number} [opts.integration.retryCount] -\n *          The number of times to retry the webhook if the first attempt fails\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlexFlowInstance\n */\n/* jshint ignore:end */\nFlexFlowInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a FlexFlowInstance\n *\n * @function remove\n * @memberof Twilio.FlexApi.V1.FlexFlowInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlexFlowInstance\n */\n/* jshint ignore:end */\nFlexFlowInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.FlexFlowInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFlexFlowInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nFlexFlowInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FlexFlowContext\n *\n * @constructor Twilio.FlexApi.V1.FlexFlowContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nFlexFlowContext = function FlexFlowContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/FlexFlows/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a FlexFlowInstance\n *\n * @function fetch\n * @memberof Twilio.FlexApi.V1.FlexFlowContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlexFlowInstance\n */\n/* jshint ignore:end */\nFlexFlowContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new FlexFlowInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a FlexFlowInstance\n *\n * @function update\n * @memberof Twilio.FlexApi.V1.FlexFlowContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.chatServiceSid] - The SID of the chat service\n * @param {flex_flow.channel_type} [opts.channelType] - The channel type\n * @param {string} [opts.contactIdentity] - The channel contact's Identity\n * @param {boolean} [opts.enabled] - Whether the new Flex Flow is enabled\n * @param {flex_flow.integration_type} [opts.integrationType] -\n *          The software that will handle inbound messages.\n * @param {string} [opts.integration.flowSid] - The SID of the Studio Flow\n * @param {string} [opts.integration.url] - The External Webhook URL\n * @param {string} [opts.integration.workspaceSid] -\n *          The Workspace SID for a new Task\n * @param {string} [opts.integration.workflowSid] - The Workflow SID for a new Task\n * @param {string} [opts.integration.channel] - The Task Channel for a new Task\n * @param {number} [opts.integration.timeout] -\n *          The Task timeout in seconds for a new Task\n * @param {number} [opts.integration.priority] - The Task priority of a new Task\n * @param {boolean} [opts.integration.creationOnMessage] -\n *          Whether to create a Task when the first message arrives\n * @param {boolean} [opts.longLived] -\n *          Reuse this chat channel for future interactions with a contact\n * @param {boolean} [opts.janitorEnabled] -\n *          Remove active Proxy sessions if the corresponding Task is deleted\n * @param {number} [opts.integration.retryCount] -\n *          The number of times to retry the webhook if the first attempt fails\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlexFlowInstance\n */\n/* jshint ignore:end */\nFlexFlowContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'ChatServiceSid': _.get(opts, 'chatServiceSid'),\n    'ChannelType': _.get(opts, 'channelType'),\n    'ContactIdentity': _.get(opts, 'contactIdentity'),\n    'Enabled': serialize.bool(_.get(opts, 'enabled')),\n    'IntegrationType': _.get(opts, 'integrationType'),\n    'Integration.FlowSid': _.get(opts, 'integration.flowSid'),\n    'Integration.Url': _.get(opts, 'integration.url'),\n    'Integration.WorkspaceSid': _.get(opts, 'integration.workspaceSid'),\n    'Integration.WorkflowSid': _.get(opts, 'integration.workflowSid'),\n    'Integration.Channel': _.get(opts, 'integration.channel'),\n    'Integration.Timeout': _.get(opts, 'integration.timeout'),\n    'Integration.Priority': _.get(opts, 'integration.priority'),\n    'Integration.CreationOnMessage': serialize.bool(_.get(opts, 'integration.creationOnMessage')),\n    'LongLived': serialize.bool(_.get(opts, 'longLived')),\n    'JanitorEnabled': serialize.bool(_.get(opts, 'janitorEnabled')),\n    'Integration.RetryCount': _.get(opts, 'integration.retryCount')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new FlexFlowInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a FlexFlowInstance\n *\n * @function remove\n * @memberof Twilio.FlexApi.V1.FlexFlowContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlexFlowInstance\n */\n/* jshint ignore:end */\nFlexFlowContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.FlexFlowContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFlexFlowContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nFlexFlowContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  FlexFlowList: FlexFlowList,\n  FlexFlowPage: FlexFlowPage,\n  FlexFlowInstance: FlexFlowInstance,\n  FlexFlowContext: FlexFlowContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}