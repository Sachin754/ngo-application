{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../../base/values'); /* jshint ignore:line */\n\nvar VerificationList;\nvar VerificationPage;\nvar VerificationInstance;\nvar VerificationContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the VerificationList\n *\n * @constructor Twilio.Verify.V2.ServiceContext.VerificationList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n */\n/* jshint ignore:end */\nVerificationList = function VerificationList(version, serviceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function verifications\n   * @memberof Twilio.Verify.V2.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.VerificationContext}\n   */\n  /* jshint ignore:end */\n  function VerificationListInstance(sid) {\n    return VerificationListInstance.get(sid);\n  }\n  VerificationListInstance._version = version;\n  // Path Solution\n  VerificationListInstance._solution = {\n    serviceSid: serviceSid\n  };\n  VerificationListInstance._uri = `/Services/${serviceSid}/Verifications`;\n  /* jshint ignore:start */\n  /**\n   * create a VerificationInstance\n   *\n   * @function create\n   * @memberof Twilio.Verify.V2.ServiceContext.VerificationList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.to - The phone number or email to verify\n   * @param {string} opts.channel - The verification method to use\n   * @param {string} [opts.customFriendlyName] - A custom user defined friendly name\n   * @param {string} [opts.customMessage] -\n   *          The text of a custom message to use for the verification\n   * @param {string} [opts.sendDigits] -\n   *          The digits to send after a phone call is answered\n   * @param {string} [opts.locale] -\n   *          The locale to use for the verification SMS or call\n   * @param {string} [opts.customCode] - A pre-generated code\n   * @param {string} [opts.amount] -\n   *          The amount of the associated PSD2 compliant transaction.\n   * @param {string} [opts.payee] -\n   *          The payee of the associated PSD2 compliant transaction\n   * @param {object} [opts.rateLimits] -\n   *          The custom key-value pairs of Programmable Rate Limits.\n   * @param {object} [opts.channelConfiguration] -\n   *          Channel specific configuration in json format.\n   * @param {string} [opts.appHash] -\n   *          Your App Hash to be appended at the end of an SMS.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed VerificationInstance\n   */\n  /* jshint ignore:end */\n  VerificationListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.to)) {\n      throw new Error('Required parameter \"opts.to\" missing.');\n    }\n    if (_.isUndefined(opts.channel)) {\n      throw new Error('Required parameter \"opts.channel\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'Channel': _.get(opts, 'channel'),\n      'CustomFriendlyName': _.get(opts, 'customFriendlyName'),\n      'CustomMessage': _.get(opts, 'customMessage'),\n      'SendDigits': _.get(opts, 'sendDigits'),\n      'Locale': _.get(opts, 'locale'),\n      'CustomCode': _.get(opts, 'customCode'),\n      'Amount': _.get(opts, 'amount'),\n      'Payee': _.get(opts, 'payee'),\n      'RateLimits': serialize.object(_.get(opts, 'rateLimits')),\n      'ChannelConfiguration': serialize.object(_.get(opts, 'channelConfiguration')),\n      'AppHash': _.get(opts, 'appHash')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new VerificationInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a verification\n   *\n   * @function get\n   * @memberof Twilio.Verify.V2.ServiceContext.VerificationList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.VerificationContext}\n   */\n  /* jshint ignore:end */\n  VerificationListInstance.get = function get(sid) {\n    return new VerificationContext(this._version, this._solution.serviceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.ServiceContext.VerificationList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  VerificationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  VerificationListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return VerificationListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the VerificationPage\n *\n * @constructor Twilio.Verify.V2.ServiceContext.VerificationPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {VerificationSolution} solution - Path solution\n *\n * @returns VerificationPage\n */\n/* jshint ignore:end */\nVerificationPage = function VerificationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(VerificationPage.prototype, Page.prototype);\nVerificationPage.prototype.constructor = VerificationPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of VerificationInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationPage#\n *\n * @param {VerificationPayload} payload - Payload response from the API\n *\n * @returns VerificationInstance\n */\n/* jshint ignore:end */\nVerificationPage.prototype.getInstance = function getInstance(payload) {\n  return new VerificationInstance(this._version, payload, this._solution.serviceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nVerificationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nVerificationPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the VerificationContext\n *\n * @constructor Twilio.Verify.V2.ServiceContext.VerificationInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} to - The phone number or email being verified\n * @property {verification.channel} channel - The verification method used.\n * @property {string} status - The status of the verification resource\n * @property {boolean} valid - Whether the verification was successful\n * @property {object} lookup - Information about the phone number being verified\n * @property {string} amount -\n *          The amount of the associated PSD2 compliant transaction.\n * @property {string} payee -\n *          The payee of the associated PSD2 compliant transaction\n * @property {object} sendCodeAttempts - An array of verification attempt objects.\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the Verification resource\n *\n * @param {V2} version - Version of the resource\n * @param {VerificationPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {string} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nVerificationInstance = function VerificationInstance(version, payload, serviceSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.to = payload.to; // jshint ignore:line\n  this.channel = payload.channel; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.valid = payload.valid; // jshint ignore:line\n  this.lookup = payload.lookup; // jshint ignore:line\n  this.amount = payload.amount; // jshint ignore:line\n  this.payee = payload.payee; // jshint ignore:line\n  this.sendCodeAttempts = payload.send_code_attempts; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(VerificationInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new VerificationContext(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * update a VerificationInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationInstance#\n *\n * @param {object} opts - Options for request\n * @param {verification.status} opts.status - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed VerificationInstance\n */\n/* jshint ignore:end */\nVerificationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a VerificationInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed VerificationInstance\n */\n/* jshint ignore:end */\nVerificationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nVerificationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nVerificationInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the VerificationContext\n *\n * @constructor Twilio.Verify.V2.ServiceContext.VerificationContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid -\n *          The SID of the verification Service to fetch the resource from\n * @param {string} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nVerificationContext = function VerificationContext(version, serviceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid\n  };\n  this._uri = `/Services/${serviceSid}/Verifications/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * update a VerificationInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationContext#\n *\n * @param {object} opts - Options for request\n * @param {verification.status} opts.status - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed VerificationInstance\n */\n/* jshint ignore:end */\nVerificationContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n  if (_.isUndefined(opts.status)) {\n    throw new Error('Required parameter \"opts.status\" missing.');\n  }\n  var deferred = Q.defer();\n  var data = values.of({\n    'Status': _.get(opts, 'status')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new VerificationInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a VerificationInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed VerificationInstance\n */\n/* jshint ignore:end */\nVerificationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new VerificationInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nVerificationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nVerificationContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  VerificationList: VerificationList,\n  VerificationPage: VerificationPage,\n  VerificationInstance: VerificationInstance,\n  VerificationContext: VerificationContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","serialize","values","VerificationList","VerificationPage","VerificationInstance","VerificationContext","version","serviceSid","VerificationListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","to","channel","deferred","defer","data","of","object","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","service_sid","accountSid","account_sid","status","valid","lookup","amount","payee","sendCodeAttempts","send_code_attempts","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","_context","undefined","Object","defineProperty","update","_proxy","fetch","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/verify/v2/service/verification.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar VerificationList;\nvar VerificationPage;\nvar VerificationInstance;\nvar VerificationContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the VerificationList\n *\n * @constructor Twilio.Verify.V2.ServiceContext.VerificationList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n */\n/* jshint ignore:end */\nVerificationList = function VerificationList(version, serviceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function verifications\n   * @memberof Twilio.Verify.V2.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.VerificationContext}\n   */\n  /* jshint ignore:end */\n  function VerificationListInstance(sid) {\n    return VerificationListInstance.get(sid);\n  }\n\n  VerificationListInstance._version = version;\n  // Path Solution\n  VerificationListInstance._solution = {serviceSid: serviceSid};\n  VerificationListInstance._uri = `/Services/${serviceSid}/Verifications`;\n  /* jshint ignore:start */\n  /**\n   * create a VerificationInstance\n   *\n   * @function create\n   * @memberof Twilio.Verify.V2.ServiceContext.VerificationList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.to - The phone number or email to verify\n   * @param {string} opts.channel - The verification method to use\n   * @param {string} [opts.customFriendlyName] - A custom user defined friendly name\n   * @param {string} [opts.customMessage] -\n   *          The text of a custom message to use for the verification\n   * @param {string} [opts.sendDigits] -\n   *          The digits to send after a phone call is answered\n   * @param {string} [opts.locale] -\n   *          The locale to use for the verification SMS or call\n   * @param {string} [opts.customCode] - A pre-generated code\n   * @param {string} [opts.amount] -\n   *          The amount of the associated PSD2 compliant transaction.\n   * @param {string} [opts.payee] -\n   *          The payee of the associated PSD2 compliant transaction\n   * @param {object} [opts.rateLimits] -\n   *          The custom key-value pairs of Programmable Rate Limits.\n   * @param {object} [opts.channelConfiguration] -\n   *          Channel specific configuration in json format.\n   * @param {string} [opts.appHash] -\n   *          Your App Hash to be appended at the end of an SMS.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed VerificationInstance\n   */\n  /* jshint ignore:end */\n  VerificationListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.to)) {\n      throw new Error('Required parameter \"opts.to\" missing.');\n    }\n    if (_.isUndefined(opts.channel)) {\n      throw new Error('Required parameter \"opts.channel\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'Channel': _.get(opts, 'channel'),\n      'CustomFriendlyName': _.get(opts, 'customFriendlyName'),\n      'CustomMessage': _.get(opts, 'customMessage'),\n      'SendDigits': _.get(opts, 'sendDigits'),\n      'Locale': _.get(opts, 'locale'),\n      'CustomCode': _.get(opts, 'customCode'),\n      'Amount': _.get(opts, 'amount'),\n      'Payee': _.get(opts, 'payee'),\n      'RateLimits': serialize.object(_.get(opts, 'rateLimits')),\n      'ChannelConfiguration': serialize.object(_.get(opts, 'channelConfiguration')),\n      'AppHash': _.get(opts, 'appHash')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new VerificationInstance(\n        this._version,\n        payload,\n        this._solution.serviceSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a verification\n   *\n   * @function get\n   * @memberof Twilio.Verify.V2.ServiceContext.VerificationList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.VerificationContext}\n   */\n  /* jshint ignore:end */\n  VerificationListInstance.get = function get(sid) {\n    return new VerificationContext(this._version, this._solution.serviceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.ServiceContext.VerificationList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  VerificationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  VerificationListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return VerificationListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the VerificationPage\n *\n * @constructor Twilio.Verify.V2.ServiceContext.VerificationPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {VerificationSolution} solution - Path solution\n *\n * @returns VerificationPage\n */\n/* jshint ignore:end */\nVerificationPage = function VerificationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(VerificationPage.prototype, Page.prototype);\nVerificationPage.prototype.constructor = VerificationPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of VerificationInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationPage#\n *\n * @param {VerificationPayload} payload - Payload response from the API\n *\n * @returns VerificationInstance\n */\n/* jshint ignore:end */\nVerificationPage.prototype.getInstance = function getInstance(payload) {\n  return new VerificationInstance(this._version, payload, this._solution.serviceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nVerificationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nVerificationPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the VerificationContext\n *\n * @constructor Twilio.Verify.V2.ServiceContext.VerificationInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} to - The phone number or email being verified\n * @property {verification.channel} channel - The verification method used.\n * @property {string} status - The status of the verification resource\n * @property {boolean} valid - Whether the verification was successful\n * @property {object} lookup - Information about the phone number being verified\n * @property {string} amount -\n *          The amount of the associated PSD2 compliant transaction.\n * @property {string} payee -\n *          The payee of the associated PSD2 compliant transaction\n * @property {object} sendCodeAttempts - An array of verification attempt objects.\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the Verification resource\n *\n * @param {V2} version - Version of the resource\n * @param {VerificationPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {string} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nVerificationInstance = function VerificationInstance(version, payload,\n                                                      serviceSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.to = payload.to; // jshint ignore:line\n  this.channel = payload.channel; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.valid = payload.valid; // jshint ignore:line\n  this.lookup = payload.lookup; // jshint ignore:line\n  this.amount = payload.amount; // jshint ignore:line\n  this.payee = payload.payee; // jshint ignore:line\n  this.sendCodeAttempts = payload.send_code_attempts; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(VerificationInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new VerificationContext(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * update a VerificationInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationInstance#\n *\n * @param {object} opts - Options for request\n * @param {verification.status} opts.status - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed VerificationInstance\n */\n/* jshint ignore:end */\nVerificationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a VerificationInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed VerificationInstance\n */\n/* jshint ignore:end */\nVerificationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nVerificationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nVerificationInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the VerificationContext\n *\n * @constructor Twilio.Verify.V2.ServiceContext.VerificationContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid -\n *          The SID of the verification Service to fetch the resource from\n * @param {string} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nVerificationContext = function VerificationContext(version, serviceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, sid: sid, };\n  this._uri = `/Services/${serviceSid}/Verifications/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * update a VerificationInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationContext#\n *\n * @param {object} opts - Options for request\n * @param {verification.status} opts.status - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed VerificationInstance\n */\n/* jshint ignore:end */\nVerificationContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n  if (_.isUndefined(opts.status)) {\n    throw new Error('Required parameter \"opts.status\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({'Status': _.get(opts, 'status')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new VerificationInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a VerificationInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed VerificationInstance\n */\n/* jshint ignore:end */\nVerificationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new VerificationInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nVerificationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nVerificationContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  VerificationList: VerificationList,\n  VerificationPage: VerificationPage,\n  VerificationInstance: VerificationInstance,\n  VerificationContext: VerificationContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}