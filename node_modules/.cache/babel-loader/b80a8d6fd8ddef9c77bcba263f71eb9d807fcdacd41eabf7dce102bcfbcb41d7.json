{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar FeedbackList = require('./message/feedback').FeedbackList;\nvar MediaList = require('./message/media').MediaList;\nvar Page = require('../../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../../base/values'); /* jshint ignore:line */\n\nvar MessageList;\nvar MessagePage;\nvar MessageInstance;\nvar MessageContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the MessageList\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessageList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n */\n/* jshint ignore:end */\nMessageList = function MessageList(version, accountSid) {\n  /* jshint ignore:start */\n  /**\n   * @function messages\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.MessageContext}\n   */\n  /* jshint ignore:end */\n  function MessageListInstance(sid) {\n    return MessageListInstance.get(sid);\n  }\n  MessageListInstance._version = version;\n  // Path Solution\n  MessageListInstance._solution = {\n    accountSid: accountSid\n  };\n  MessageListInstance._uri = `/Accounts/${accountSid}/Messages.json`;\n  /* jshint ignore:start */\n  /**\n   * create a MessageInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.to - The destination phone number\n   * @param {string} [opts.statusCallback] -\n   *          The URL we should call to send status information to your application\n   * @param {string} [opts.applicationSid] - The application to use for callbacks\n   * @param {number} [opts.maxPrice] -\n   *          The total maximum price up to 4 decimal places in US dollars acceptable for the message to be delivered.\n   * @param {boolean} [opts.provideFeedback] -\n   *          Whether to confirm delivery of the message\n   * @param {number} [opts.attempt] -\n   *          Total numer of attempts made , this inclusive to send out the message\n   * @param {number} [opts.validityPeriod] -\n   *          The number of seconds that the message can remain in our outgoing queue.\n   * @param {boolean} [opts.forceDelivery] - Reserved\n   * @param {message.content_retention} [opts.contentRetention] -\n   *          Determines if the message content can be stored or redacted based on privacy settings\n   * @param {message.address_retention} [opts.addressRetention] -\n   *          Determines if the address can be stored or obfuscated based on privacy settings\n   * @param {boolean} [opts.smartEncoded] -\n   *          Whether to detect Unicode characters that have a similar GSM-7 character and replace them\n   * @param {string|list} [opts.persistentAction] -\n   *          Rich actions for Channels Messages.\n   * @param {string} [opts.from] - The phone number that initiated the message\n   * @param {string} [opts.messagingServiceSid] -\n   *          The SID of the Messaging Service you want to associate with the message.\n   * @param {string} [opts.body] -\n   *          The text of the message you want to send. Can be up to 1,600 characters in length.\n   * @param {string|list} [opts.mediaUrl] -\n   *          The URL of the media to send with the message\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed MessageInstance\n   */\n  /* jshint ignore:end */\n  MessageListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.to)) {\n      throw new Error('Required parameter \"opts.to\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'From': _.get(opts, 'from'),\n      'MessagingServiceSid': _.get(opts, 'messagingServiceSid'),\n      'Body': _.get(opts, 'body'),\n      'MediaUrl': serialize.map(_.get(opts, 'mediaUrl'), function (e) {\n        return e;\n      }),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'ApplicationSid': _.get(opts, 'applicationSid'),\n      'MaxPrice': _.get(opts, 'maxPrice'),\n      'ProvideFeedback': serialize.bool(_.get(opts, 'provideFeedback')),\n      'Attempt': _.get(opts, 'attempt'),\n      'ValidityPeriod': _.get(opts, 'validityPeriod'),\n      'ForceDelivery': serialize.bool(_.get(opts, 'forceDelivery')),\n      'ContentRetention': _.get(opts, 'contentRetention'),\n      'AddressRetention': _.get(opts, 'addressRetention'),\n      'SmartEncoded': serialize.bool(_.get(opts, 'smartEncoded')),\n      'PersistentAction': serialize.map(_.get(opts, 'persistentAction'), function (e) {\n        return e;\n      })\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MessageInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams MessageInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.to] - Filter by messages sent to this number\n   * @param {string} [opts.from] - Filter by from number\n   * @param {Date} [opts.dateSentBefore] - Filter by date sent\n   * @param {Date} [opts.dateSent] - Filter by date sent\n   * @param {Date} [opts.dateSentAfter] - Filter by date sent\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  MessageListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists MessageInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.to] - Filter by messages sent to this number\n   * @param {string} [opts.from] - Filter by from number\n   * @param {Date} [opts.dateSentBefore] - Filter by date sent\n   * @param {Date} [opts.dateSent] - Filter by date sent\n   * @param {Date} [opts.dateSentAfter] - Filter by date sent\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessageListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of MessageInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.to] - Filter by messages sent to this number\n   * @param {string} [opts.from] - Filter by from number\n   * @param {Date} [opts.dateSentBefore] - Filter by date sent\n   * @param {Date} [opts.dateSent] - Filter by date sent\n   * @param {Date} [opts.dateSentAfter] - Filter by date sent\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessageListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'From': _.get(opts, 'from'),\n      'DateSent<': serialize.iso8601DateTime(_.get(opts, 'dateSentBefore')),\n      'DateSent': serialize.iso8601DateTime(_.get(opts, 'dateSent')),\n      'DateSent>': serialize.iso8601DateTime(_.get(opts, 'dateSentAfter')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MessagePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of MessageInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessageListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MessagePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a message\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.MessageContext}\n   */\n  /* jshint ignore:end */\n  MessageListInstance.get = function get(sid) {\n    return new MessageContext(this._version, this._solution.accountSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  MessageListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  MessageListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return MessageListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the MessagePage\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessagePage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {MessageSolution} solution - Path solution\n *\n * @returns MessagePage\n */\n/* jshint ignore:end */\nMessagePage = function MessagePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(MessagePage.prototype, Page.prototype);\nMessagePage.prototype.constructor = MessagePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of MessageInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.MessagePage#\n *\n * @param {MessagePayload} payload - Payload response from the API\n *\n * @returns MessageInstance\n */\n/* jshint ignore:end */\nMessagePage.prototype.getInstance = function getInstance(payload) {\n  return new MessageInstance(this._version, payload, this._solution.accountSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.MessagePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessagePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nMessagePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the MessageContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessageInstance\n *\n * @property {string} body - The message text\n * @property {string} numSegments -\n *          The number of messages used to deliver the message body\n * @property {message.direction} direction - The direction of the message\n * @property {string} from - The phone number that initiated the message\n * @property {string} to - The phone number that received the message\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} price - The amount billed for the message\n * @property {string} errorMessage - The description of the error_code\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} numMedia -\n *          The number of media files associated with the message\n * @property {message.status} status - The status of the message\n * @property {string} messagingServiceSid -\n *          The SID of the Messaging Service used with the message.\n * @property {string} sid - The unique string that identifies the resource\n * @property {Date} dateSent -\n *          The RFC 2822 date and time in GMT when the message was sent\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {number} errorCode - The error code associated with the message\n * @property {string} priceUnit - The currency in which price is measured\n * @property {string} apiVersion - The API version used to process the message\n * @property {string} subresourceUris -\n *          A list of related resources identified by their relative URIs\n *\n * @param {V2010} version - Version of the resource\n * @param {MessagePayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nMessageInstance = function MessageInstance(version, payload, accountSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.body = payload.body; // jshint ignore:line\n  this.numSegments = payload.num_segments; // jshint ignore:line\n  this.direction = payload.direction; // jshint ignore:line\n  this.from = payload.from; // jshint ignore:line\n  this.to = payload.to; // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.price = payload.price; // jshint ignore:line\n  this.errorMessage = payload.error_message; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.numMedia = payload.num_media; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.messagingServiceSid = payload.messaging_service_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.dateSent = deserialize.rfc2822DateTime(payload.date_sent); // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.errorCode = deserialize.integer(payload.error_code); // jshint ignore:line\n  this.priceUnit = payload.price_unit; // jshint ignore:line\n  this.apiVersion = payload.api_version; // jshint ignore:line\n  this.subresourceUris = payload.subresource_uris; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(MessageInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new MessageContext(this._version, this._solution.accountSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * remove a MessageInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n/* jshint ignore:end */\nMessageInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a MessageInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n/* jshint ignore:end */\nMessageInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a MessageInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.body] - The text of the message you want to send\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n/* jshint ignore:end */\nMessageInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the media\n *\n * @function media\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.MessageContext.MediaList}\n */\n/* jshint ignore:end */\nMessageInstance.prototype.media = function media() {\n  return this._proxy.media;\n};\n\n/* jshint ignore:start */\n/**\n * Access the feedback\n *\n * @function feedback\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.MessageContext.FeedbackList}\n */\n/* jshint ignore:end */\nMessageInstance.prototype.feedback = function feedback() {\n  return this._proxy.feedback;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessageInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nMessageInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the MessageContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessageContext\n *\n * @property {Twilio.Api.V2010.AccountContext.MessageContext.MediaList} media -\n *          media resource\n * @property {Twilio.Api.V2010.AccountContext.MessageContext.FeedbackList} feedback -\n *          feedback resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nMessageContext = function MessageContext(version, accountSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid\n  };\n  this._uri = `/Accounts/${accountSid}/Messages/${sid}.json`;\n\n  // Dependents\n  this._media = undefined;\n  this._feedback = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * remove a MessageInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n/* jshint ignore:end */\nMessageContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a MessageInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n/* jshint ignore:end */\nMessageContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new MessageInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a MessageInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.body] - The text of the message you want to send\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n/* jshint ignore:end */\nMessageContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Body': _.get(opts, 'body')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new MessageInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(MessageContext.prototype, 'media', {\n  get: function () {\n    if (!this._media) {\n      this._media = new MediaList(this._version, this._solution.accountSid, this._solution.sid);\n    }\n    return this._media;\n  }\n});\nObject.defineProperty(MessageContext.prototype, 'feedback', {\n  get: function () {\n    if (!this._feedback) {\n      this._feedback = new FeedbackList(this._version, this._solution.accountSid, this._solution.sid);\n    }\n    return this._feedback;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessageContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nMessageContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  MessageList: MessageList,\n  MessagePage: MessagePage,\n  MessageInstance: MessageInstance,\n  MessageContext: MessageContext\n};","map":{"version":3,"names":["Q","require","_","util","FeedbackList","MediaList","Page","deserialize","serialize","values","MessageList","MessagePage","MessageInstance","MessageContext","version","accountSid","MessageListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","to","deferred","defer","data","of","map","e","bool","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","iso8601DateTime","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","body","numSegments","num_segments","direction","from","dateUpdated","rfc2822DateTime","date_updated","price","errorMessage","error_message","account_sid","numMedia","num_media","status","messagingServiceSid","messaging_service_sid","dateSent","date_sent","dateCreated","date_created","errorCode","integer","error_code","priceUnit","price_unit","apiVersion","api_version","subresourceUris","subresource_uris","_context","undefined","Object","defineProperty","remove","_proxy","fetch","update","media","feedback","_media","_feedback","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/api/v2010/account/message.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar FeedbackList = require('./message/feedback').FeedbackList;\nvar MediaList = require('./message/media').MediaList;\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar MessageList;\nvar MessagePage;\nvar MessageInstance;\nvar MessageContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the MessageList\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessageList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n */\n/* jshint ignore:end */\nMessageList = function MessageList(version, accountSid) {\n  /* jshint ignore:start */\n  /**\n   * @function messages\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.MessageContext}\n   */\n  /* jshint ignore:end */\n  function MessageListInstance(sid) {\n    return MessageListInstance.get(sid);\n  }\n\n  MessageListInstance._version = version;\n  // Path Solution\n  MessageListInstance._solution = {accountSid: accountSid};\n  MessageListInstance._uri = `/Accounts/${accountSid}/Messages.json`;\n  /* jshint ignore:start */\n  /**\n   * create a MessageInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.to - The destination phone number\n   * @param {string} [opts.statusCallback] -\n   *          The URL we should call to send status information to your application\n   * @param {string} [opts.applicationSid] - The application to use for callbacks\n   * @param {number} [opts.maxPrice] -\n   *          The total maximum price up to 4 decimal places in US dollars acceptable for the message to be delivered.\n   * @param {boolean} [opts.provideFeedback] -\n   *          Whether to confirm delivery of the message\n   * @param {number} [opts.attempt] -\n   *          Total numer of attempts made , this inclusive to send out the message\n   * @param {number} [opts.validityPeriod] -\n   *          The number of seconds that the message can remain in our outgoing queue.\n   * @param {boolean} [opts.forceDelivery] - Reserved\n   * @param {message.content_retention} [opts.contentRetention] -\n   *          Determines if the message content can be stored or redacted based on privacy settings\n   * @param {message.address_retention} [opts.addressRetention] -\n   *          Determines if the address can be stored or obfuscated based on privacy settings\n   * @param {boolean} [opts.smartEncoded] -\n   *          Whether to detect Unicode characters that have a similar GSM-7 character and replace them\n   * @param {string|list} [opts.persistentAction] -\n   *          Rich actions for Channels Messages.\n   * @param {string} [opts.from] - The phone number that initiated the message\n   * @param {string} [opts.messagingServiceSid] -\n   *          The SID of the Messaging Service you want to associate with the message.\n   * @param {string} [opts.body] -\n   *          The text of the message you want to send. Can be up to 1,600 characters in length.\n   * @param {string|list} [opts.mediaUrl] -\n   *          The URL of the media to send with the message\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed MessageInstance\n   */\n  /* jshint ignore:end */\n  MessageListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.to)) {\n      throw new Error('Required parameter \"opts.to\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'From': _.get(opts, 'from'),\n      'MessagingServiceSid': _.get(opts, 'messagingServiceSid'),\n      'Body': _.get(opts, 'body'),\n      'MediaUrl': serialize.map(_.get(opts, 'mediaUrl'), function(e) { return e; }),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'ApplicationSid': _.get(opts, 'applicationSid'),\n      'MaxPrice': _.get(opts, 'maxPrice'),\n      'ProvideFeedback': serialize.bool(_.get(opts, 'provideFeedback')),\n      'Attempt': _.get(opts, 'attempt'),\n      'ValidityPeriod': _.get(opts, 'validityPeriod'),\n      'ForceDelivery': serialize.bool(_.get(opts, 'forceDelivery')),\n      'ContentRetention': _.get(opts, 'contentRetention'),\n      'AddressRetention': _.get(opts, 'addressRetention'),\n      'SmartEncoded': serialize.bool(_.get(opts, 'smartEncoded')),\n      'PersistentAction': serialize.map(_.get(opts, 'persistentAction'), function(e) { return e; })\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MessageInstance(\n        this._version,\n        payload,\n        this._solution.accountSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams MessageInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.to] - Filter by messages sent to this number\n   * @param {string} [opts.from] - Filter by from number\n   * @param {Date} [opts.dateSentBefore] - Filter by date sent\n   * @param {Date} [opts.dateSent] - Filter by date sent\n   * @param {Date} [opts.dateSentAfter] - Filter by date sent\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  MessageListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists MessageInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.to] - Filter by messages sent to this number\n   * @param {string} [opts.from] - Filter by from number\n   * @param {Date} [opts.dateSentBefore] - Filter by date sent\n   * @param {Date} [opts.dateSent] - Filter by date sent\n   * @param {Date} [opts.dateSentAfter] - Filter by date sent\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessageListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of MessageInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.to] - Filter by messages sent to this number\n   * @param {string} [opts.from] - Filter by from number\n   * @param {Date} [opts.dateSentBefore] - Filter by date sent\n   * @param {Date} [opts.dateSent] - Filter by date sent\n   * @param {Date} [opts.dateSentAfter] - Filter by date sent\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessageListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'From': _.get(opts, 'from'),\n      'DateSent<': serialize.iso8601DateTime(_.get(opts, 'dateSentBefore')),\n      'DateSent': serialize.iso8601DateTime(_.get(opts, 'dateSent')),\n      'DateSent>': serialize.iso8601DateTime(_.get(opts, 'dateSentAfter')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MessagePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of MessageInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessageListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MessagePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a message\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.MessageContext}\n   */\n  /* jshint ignore:end */\n  MessageListInstance.get = function get(sid) {\n    return new MessageContext(this._version, this._solution.accountSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  MessageListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  MessageListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return MessageListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MessagePage\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessagePage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {MessageSolution} solution - Path solution\n *\n * @returns MessagePage\n */\n/* jshint ignore:end */\nMessagePage = function MessagePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(MessagePage.prototype, Page.prototype);\nMessagePage.prototype.constructor = MessagePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of MessageInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.MessagePage#\n *\n * @param {MessagePayload} payload - Payload response from the API\n *\n * @returns MessageInstance\n */\n/* jshint ignore:end */\nMessagePage.prototype.getInstance = function getInstance(payload) {\n  return new MessageInstance(this._version, payload, this._solution.accountSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.MessagePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessagePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nMessagePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MessageContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessageInstance\n *\n * @property {string} body - The message text\n * @property {string} numSegments -\n *          The number of messages used to deliver the message body\n * @property {message.direction} direction - The direction of the message\n * @property {string} from - The phone number that initiated the message\n * @property {string} to - The phone number that received the message\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} price - The amount billed for the message\n * @property {string} errorMessage - The description of the error_code\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} numMedia -\n *          The number of media files associated with the message\n * @property {message.status} status - The status of the message\n * @property {string} messagingServiceSid -\n *          The SID of the Messaging Service used with the message.\n * @property {string} sid - The unique string that identifies the resource\n * @property {Date} dateSent -\n *          The RFC 2822 date and time in GMT when the message was sent\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {number} errorCode - The error code associated with the message\n * @property {string} priceUnit - The currency in which price is measured\n * @property {string} apiVersion - The API version used to process the message\n * @property {string} subresourceUris -\n *          A list of related resources identified by their relative URIs\n *\n * @param {V2010} version - Version of the resource\n * @param {MessagePayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nMessageInstance = function MessageInstance(version, payload, accountSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.body = payload.body; // jshint ignore:line\n  this.numSegments = payload.num_segments; // jshint ignore:line\n  this.direction = payload.direction; // jshint ignore:line\n  this.from = payload.from; // jshint ignore:line\n  this.to = payload.to; // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.price = payload.price; // jshint ignore:line\n  this.errorMessage = payload.error_message; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.numMedia = payload.num_media; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.messagingServiceSid = payload.messaging_service_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.dateSent = deserialize.rfc2822DateTime(payload.date_sent); // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.errorCode = deserialize.integer(payload.error_code); // jshint ignore:line\n  this.priceUnit = payload.price_unit; // jshint ignore:line\n  this.apiVersion = payload.api_version; // jshint ignore:line\n  this.subresourceUris = payload.subresource_uris; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(MessageInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new MessageContext(this._version, this._solution.accountSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * remove a MessageInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n/* jshint ignore:end */\nMessageInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a MessageInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n/* jshint ignore:end */\nMessageInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a MessageInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.body] - The text of the message you want to send\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n/* jshint ignore:end */\nMessageInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the media\n *\n * @function media\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.MessageContext.MediaList}\n */\n/* jshint ignore:end */\nMessageInstance.prototype.media = function media() {\n  return this._proxy.media;\n};\n\n/* jshint ignore:start */\n/**\n * Access the feedback\n *\n * @function feedback\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.MessageContext.FeedbackList}\n */\n/* jshint ignore:end */\nMessageInstance.prototype.feedback = function feedback() {\n  return this._proxy.feedback;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessageInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nMessageInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MessageContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessageContext\n *\n * @property {Twilio.Api.V2010.AccountContext.MessageContext.MediaList} media -\n *          media resource\n * @property {Twilio.Api.V2010.AccountContext.MessageContext.FeedbackList} feedback -\n *          feedback resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nMessageContext = function MessageContext(version, accountSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, sid: sid, };\n  this._uri = `/Accounts/${accountSid}/Messages/${sid}.json`;\n\n  // Dependents\n  this._media = undefined;\n  this._feedback = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * remove a MessageInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n/* jshint ignore:end */\nMessageContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a MessageInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n/* jshint ignore:end */\nMessageContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new MessageInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a MessageInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.body] - The text of the message you want to send\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n/* jshint ignore:end */\nMessageContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({'Body': _.get(opts, 'body')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new MessageInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(MessageContext.prototype,\n  'media', {\n    get: function() {\n      if (!this._media) {\n        this._media = new MediaList(this._version, this._solution.accountSid, this._solution.sid);\n      }\n      return this._media;\n    }\n});\n\nObject.defineProperty(MessageContext.prototype,\n  'feedback', {\n    get: function() {\n      if (!this._feedback) {\n        this._feedback = new FeedbackList(this._version, this._solution.accountSid, this._solution.sid);\n      }\n      return this._feedback;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessageContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nMessageContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  MessageList: MessageList,\n  MessagePage: MessagePage,\n  MessageInstance: MessageInstance,\n  MessageContext: MessageContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}