{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar DeploymentList = require('./environment/deployment').DeploymentList;\nvar LogList = require('./environment/log').LogList;\nvar Page = require('../../../../base/Page'); /* jshint ignore:line */\nvar VariableList = require('./environment/variable').VariableList;\nvar deserialize = require('../../../../base/deserialize'); /* jshint ignore:line */\nvar values = require('../../../../base/values'); /* jshint ignore:line */\n\nvar EnvironmentList;\nvar EnvironmentPage;\nvar EnvironmentInstance;\nvar EnvironmentContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the EnvironmentList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentList\n *\n * @param {Twilio.Serverless.V1} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the Environment resource is associated with\n */\n/* jshint ignore:end */\nEnvironmentList = function EnvironmentList(version, serviceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function environments\n   * @memberof Twilio.Serverless.V1.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext}\n   */\n  /* jshint ignore:end */\n  function EnvironmentListInstance(sid) {\n    return EnvironmentListInstance.get(sid);\n  }\n  EnvironmentListInstance._version = version;\n  // Path Solution\n  EnvironmentListInstance._solution = {\n    serviceSid: serviceSid\n  };\n  EnvironmentListInstance._uri = `/Services/${serviceSid}/Environments`;\n  /* jshint ignore:start */\n  /**\n   * Streams EnvironmentInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  EnvironmentListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists EnvironmentInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  EnvironmentListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of EnvironmentInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  EnvironmentListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new EnvironmentPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of EnvironmentInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  EnvironmentListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new EnvironmentPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a EnvironmentInstance\n   *\n   * @function create\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.uniqueName -\n   *          A user-defined string that uniquely identifies the Environment resource\n   * @param {string} [opts.domainSuffix] -\n   *          A URL-friendly name that represents the environment\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed EnvironmentInstance\n   */\n  /* jshint ignore:end */\n  EnvironmentListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.uniqueName)) {\n      throw new Error('Required parameter \"opts.uniqueName\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'DomainSuffix': _.get(opts, 'domainSuffix')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new EnvironmentInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a environment\n   *\n   * @function get\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {string} sid - The SID of the Environment resource to fetch\n   *\n   * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext}\n   */\n  /* jshint ignore:end */\n  EnvironmentListInstance.get = function get(sid) {\n    return new EnvironmentContext(this._version, this._solution.serviceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  EnvironmentListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  EnvironmentListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return EnvironmentListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the EnvironmentPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {EnvironmentSolution} solution - Path solution\n *\n * @returns EnvironmentPage\n */\n/* jshint ignore:end */\nEnvironmentPage = function EnvironmentPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(EnvironmentPage.prototype, Page.prototype);\nEnvironmentPage.prototype.constructor = EnvironmentPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of EnvironmentInstance\n *\n * @function getInstance\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentPage#\n *\n * @param {EnvironmentPayload} payload - Payload response from the API\n *\n * @returns EnvironmentInstance\n */\n/* jshint ignore:end */\nEnvironmentPage.prototype.getInstance = function getInstance(payload) {\n  return new EnvironmentInstance(this._version, payload, this._solution.serviceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nEnvironmentPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nEnvironmentPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the EnvironmentContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentInstance\n *\n * @property {string} sid -\n *          The unique string that identifies the Environment resource\n * @property {string} accountSid -\n *          The SID of the Account that created the Environment resource\n * @property {string} serviceSid -\n *          The SID of the Service that the Environment resource is associated with\n * @property {string} buildSid - The SID of the build deployed in the environment\n * @property {string} uniqueName -\n *          A user-defined string that uniquely identifies the Environment resource\n * @property {string} domainSuffix -\n *          A URL-friendly name that represents the environment\n * @property {string} domainName -\n *          The base domain name for all Functions and Assets deployed in the Environment\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the Environment resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the Environment resource was last updated\n * @property {string} url - The absolute URL of the Environment resource\n * @property {string} links -\n *          The URLs of the Environment resource's nested resources\n *\n * @param {V1} version - Version of the resource\n * @param {EnvironmentPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the Environment resource is associated with\n * @param {sid} sid - The SID of the Environment resource to fetch\n */\n/* jshint ignore:end */\nEnvironmentInstance = function EnvironmentInstance(version, payload, serviceSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.buildSid = payload.build_sid; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.domainSuffix = payload.domain_suffix; // jshint ignore:line\n  this.domainName = payload.domain_name; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(EnvironmentInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new EnvironmentContext(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a EnvironmentInstance\n *\n * @function fetch\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EnvironmentInstance\n */\n/* jshint ignore:end */\nEnvironmentInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a EnvironmentInstance\n *\n * @function remove\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EnvironmentInstance\n */\n/* jshint ignore:end */\nEnvironmentInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the variables\n *\n * @function variables\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.VariableList}\n */\n/* jshint ignore:end */\nEnvironmentInstance.prototype.variables = function variables() {\n  return this._proxy.variables;\n};\n\n/* jshint ignore:start */\n/**\n * Access the deployments\n *\n * @function deployments\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentList}\n */\n/* jshint ignore:end */\nEnvironmentInstance.prototype.deployments = function deployments() {\n  return this._proxy.deployments;\n};\n\n/* jshint ignore:start */\n/**\n * Access the logs\n *\n * @function logs\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogList}\n */\n/* jshint ignore:end */\nEnvironmentInstance.prototype.logs = function logs() {\n  return this._proxy.logs;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nEnvironmentInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nEnvironmentInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the EnvironmentContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentContext\n *\n * @property {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.VariableList} variables -\n *          variables resource\n * @property {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentList} deployments -\n *          deployments resource\n * @property {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogList} logs -\n *          logs resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} serviceSid -\n *          The SID of the Service to fetch the Environment resource from\n * @param {sid} sid - The SID of the Environment resource to fetch\n */\n/* jshint ignore:end */\nEnvironmentContext = function EnvironmentContext(version, serviceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid\n  };\n  this._uri = `/Services/${serviceSid}/Environments/${sid}`;\n\n  // Dependents\n  this._variables = undefined;\n  this._deployments = undefined;\n  this._logs = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a EnvironmentInstance\n *\n * @function fetch\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EnvironmentInstance\n */\n/* jshint ignore:end */\nEnvironmentContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new EnvironmentInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a EnvironmentInstance\n *\n * @function remove\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EnvironmentInstance\n */\n/* jshint ignore:end */\nEnvironmentContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(EnvironmentContext.prototype, 'variables', {\n  get: function () {\n    if (!this._variables) {\n      this._variables = new VariableList(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n    return this._variables;\n  }\n});\nObject.defineProperty(EnvironmentContext.prototype, 'deployments', {\n  get: function () {\n    if (!this._deployments) {\n      this._deployments = new DeploymentList(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n    return this._deployments;\n  }\n});\nObject.defineProperty(EnvironmentContext.prototype, 'logs', {\n  get: function () {\n    if (!this._logs) {\n      this._logs = new LogList(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n    return this._logs;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nEnvironmentContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nEnvironmentContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  EnvironmentList: EnvironmentList,\n  EnvironmentPage: EnvironmentPage,\n  EnvironmentInstance: EnvironmentInstance,\n  EnvironmentContext: EnvironmentContext\n};","map":{"version":3,"names":["Q","require","_","util","DeploymentList","LogList","Page","VariableList","deserialize","values","EnvironmentList","EnvironmentPage","EnvironmentInstance","EnvironmentContext","version","serviceSid","EnvironmentListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","uniqueName","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","service_sid","buildSid","build_sid","unique_name","domainSuffix","domain_suffix","domainName","domain_name","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","remove","variables","deployments","logs","_variables","_deployments","_logs","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/serverless/v1/service/environment.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar DeploymentList = require('./environment/deployment').DeploymentList;\nvar LogList = require('./environment/log').LogList;\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar VariableList = require('./environment/variable').VariableList;\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar EnvironmentList;\nvar EnvironmentPage;\nvar EnvironmentInstance;\nvar EnvironmentContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the EnvironmentList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentList\n *\n * @param {Twilio.Serverless.V1} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the Environment resource is associated with\n */\n/* jshint ignore:end */\nEnvironmentList = function EnvironmentList(version, serviceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function environments\n   * @memberof Twilio.Serverless.V1.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext}\n   */\n  /* jshint ignore:end */\n  function EnvironmentListInstance(sid) {\n    return EnvironmentListInstance.get(sid);\n  }\n\n  EnvironmentListInstance._version = version;\n  // Path Solution\n  EnvironmentListInstance._solution = {serviceSid: serviceSid};\n  EnvironmentListInstance._uri = `/Services/${serviceSid}/Environments`;\n  /* jshint ignore:start */\n  /**\n   * Streams EnvironmentInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  EnvironmentListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists EnvironmentInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  EnvironmentListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of EnvironmentInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  EnvironmentListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new EnvironmentPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of EnvironmentInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  EnvironmentListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new EnvironmentPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a EnvironmentInstance\n   *\n   * @function create\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.uniqueName -\n   *          A user-defined string that uniquely identifies the Environment resource\n   * @param {string} [opts.domainSuffix] -\n   *          A URL-friendly name that represents the environment\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed EnvironmentInstance\n   */\n  /* jshint ignore:end */\n  EnvironmentListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.uniqueName)) {\n      throw new Error('Required parameter \"opts.uniqueName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'DomainSuffix': _.get(opts, 'domainSuffix')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new EnvironmentInstance(\n        this._version,\n        payload,\n        this._solution.serviceSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a environment\n   *\n   * @function get\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {string} sid - The SID of the Environment resource to fetch\n   *\n   * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext}\n   */\n  /* jshint ignore:end */\n  EnvironmentListInstance.get = function get(sid) {\n    return new EnvironmentContext(this._version, this._solution.serviceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  EnvironmentListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  EnvironmentListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return EnvironmentListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the EnvironmentPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {EnvironmentSolution} solution - Path solution\n *\n * @returns EnvironmentPage\n */\n/* jshint ignore:end */\nEnvironmentPage = function EnvironmentPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(EnvironmentPage.prototype, Page.prototype);\nEnvironmentPage.prototype.constructor = EnvironmentPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of EnvironmentInstance\n *\n * @function getInstance\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentPage#\n *\n * @param {EnvironmentPayload} payload - Payload response from the API\n *\n * @returns EnvironmentInstance\n */\n/* jshint ignore:end */\nEnvironmentPage.prototype.getInstance = function getInstance(payload) {\n  return new EnvironmentInstance(this._version, payload, this._solution.serviceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nEnvironmentPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nEnvironmentPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the EnvironmentContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentInstance\n *\n * @property {string} sid -\n *          The unique string that identifies the Environment resource\n * @property {string} accountSid -\n *          The SID of the Account that created the Environment resource\n * @property {string} serviceSid -\n *          The SID of the Service that the Environment resource is associated with\n * @property {string} buildSid - The SID of the build deployed in the environment\n * @property {string} uniqueName -\n *          A user-defined string that uniquely identifies the Environment resource\n * @property {string} domainSuffix -\n *          A URL-friendly name that represents the environment\n * @property {string} domainName -\n *          The base domain name for all Functions and Assets deployed in the Environment\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the Environment resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the Environment resource was last updated\n * @property {string} url - The absolute URL of the Environment resource\n * @property {string} links -\n *          The URLs of the Environment resource's nested resources\n *\n * @param {V1} version - Version of the resource\n * @param {EnvironmentPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the Environment resource is associated with\n * @param {sid} sid - The SID of the Environment resource to fetch\n */\n/* jshint ignore:end */\nEnvironmentInstance = function EnvironmentInstance(version, payload, serviceSid,\n                                                    sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.buildSid = payload.build_sid; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.domainSuffix = payload.domain_suffix; // jshint ignore:line\n  this.domainName = payload.domain_name; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(EnvironmentInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new EnvironmentContext(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a EnvironmentInstance\n *\n * @function fetch\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EnvironmentInstance\n */\n/* jshint ignore:end */\nEnvironmentInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a EnvironmentInstance\n *\n * @function remove\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EnvironmentInstance\n */\n/* jshint ignore:end */\nEnvironmentInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the variables\n *\n * @function variables\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.VariableList}\n */\n/* jshint ignore:end */\nEnvironmentInstance.prototype.variables = function variables() {\n  return this._proxy.variables;\n};\n\n/* jshint ignore:start */\n/**\n * Access the deployments\n *\n * @function deployments\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentList}\n */\n/* jshint ignore:end */\nEnvironmentInstance.prototype.deployments = function deployments() {\n  return this._proxy.deployments;\n};\n\n/* jshint ignore:start */\n/**\n * Access the logs\n *\n * @function logs\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogList}\n */\n/* jshint ignore:end */\nEnvironmentInstance.prototype.logs = function logs() {\n  return this._proxy.logs;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nEnvironmentInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nEnvironmentInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the EnvironmentContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentContext\n *\n * @property {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.VariableList} variables -\n *          variables resource\n * @property {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentList} deployments -\n *          deployments resource\n * @property {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogList} logs -\n *          logs resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} serviceSid -\n *          The SID of the Service to fetch the Environment resource from\n * @param {sid} sid - The SID of the Environment resource to fetch\n */\n/* jshint ignore:end */\nEnvironmentContext = function EnvironmentContext(version, serviceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, sid: sid, };\n  this._uri = `/Services/${serviceSid}/Environments/${sid}`;\n\n  // Dependents\n  this._variables = undefined;\n  this._deployments = undefined;\n  this._logs = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a EnvironmentInstance\n *\n * @function fetch\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EnvironmentInstance\n */\n/* jshint ignore:end */\nEnvironmentContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new EnvironmentInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a EnvironmentInstance\n *\n * @function remove\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EnvironmentInstance\n */\n/* jshint ignore:end */\nEnvironmentContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(EnvironmentContext.prototype,\n  'variables', {\n    get: function() {\n      if (!this._variables) {\n        this._variables = new VariableList(this._version, this._solution.serviceSid, this._solution.sid);\n      }\n      return this._variables;\n    }\n});\n\nObject.defineProperty(EnvironmentContext.prototype,\n  'deployments', {\n    get: function() {\n      if (!this._deployments) {\n        this._deployments = new DeploymentList(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.sid\n        );\n      }\n      return this._deployments;\n    }\n});\n\nObject.defineProperty(EnvironmentContext.prototype,\n  'logs', {\n    get: function() {\n      if (!this._logs) {\n        this._logs = new LogList(this._version, this._solution.serviceSid, this._solution.sid);\n      }\n      return this._logs;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nEnvironmentContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nEnvironmentContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  EnvironmentList: EnvironmentList,\n  EnvironmentPage: EnvironmentPage,\n  EnvironmentInstance: EnvironmentInstance,\n  EnvironmentContext: EnvironmentContext\n};\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAE;AACvB,IAAIC,CAAC,GAAGD,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAE;AAC5B,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC,CAAC,CAAE;AAC7B,IAAIG,cAAc,GAAGH,OAAO,CAAC,0BAA0B,CAAC,CAACG,cAAc;AACvE,IAAIC,OAAO,GAAGJ,OAAO,CAAC,mBAAmB,CAAC,CAACI,OAAO;AAClD,IAAIC,IAAI,GAAGL,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAE;AAC9C,IAAIM,YAAY,GAAGN,OAAO,CAAC,wBAAwB,CAAC,CAACM,YAAY;AACjE,IAAIC,WAAW,GAAGP,OAAO,CACrB,8BAA8B,CAAC,CAAC,CAAE;AACtC,IAAIQ,MAAM,GAAGR,OAAO,CAAC,yBAAyB,CAAC,CAAC,CAAE;;AAElD,IAAIS,eAAe;AACnB,IAAIC,eAAe;AACnB,IAAIC,mBAAmB;AACvB,IAAIC,kBAAkB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,eAAe,GAAG,SAASA,eAAeA,CAACI,OAAO,EAAEC,UAAU,EAAE;EAC9D;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACA,SAASC,uBAAuBA,CAACC,GAAG,EAAE;IACpC,OAAOD,uBAAuB,CAACE,GAAG,CAACD,GAAG,CAAC;EACzC;EAEAD,uBAAuB,CAACG,QAAQ,GAAGL,OAAO;EAC1C;EACAE,uBAAuB,CAACI,SAAS,GAAG;IAACL,UAAU,EAAEA;EAAU,CAAC;EAC5DC,uBAAuB,CAACK,IAAI,GAAI,aAAYN,UAAW,eAAc;EACrE;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAC,uBAAuB,CAACM,IAAI,GAAG,SAASA,IAAIA,CAACC,IAAI,EAAEC,QAAQ,EAAE;IAC3D,IAAItB,CAAC,CAACuB,UAAU,CAACF,IAAI,CAAC,EAAE;MACtBC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IACjB,IAAIA,IAAI,CAACC,QAAQ,EAAE;MACjBA,QAAQ,GAAGD,IAAI,CAACC,QAAQ;IAC1B;IACA,IAAItB,CAAC,CAACwB,WAAW,CAACF,QAAQ,CAAC,EAAE;MAC3B,MAAM,IAAIG,KAAK,CAAC,oCAAoC,CAAC;IACvD;IAEA,IAAIC,IAAI,GAAG,KAAK;IAChB,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAIC,eAAe,GAAG,CAAC;IACvB,IAAIC,MAAM,GAAG,IAAI,CAACZ,QAAQ,CAACa,UAAU,CAAC;MACpCC,KAAK,EAAEV,IAAI,CAACU,KAAK;MACjBC,QAAQ,EAAEX,IAAI,CAACW;IACjB,CAAC,CAAC;IAEF,SAASC,UAAUA,CAACC,KAAK,EAAE;MACzBR,IAAI,GAAG,IAAI;MACX,IAAI1B,CAAC,CAACuB,UAAU,CAACF,IAAI,CAACK,IAAI,CAAC,EAAE;QAC3BL,IAAI,CAACK,IAAI,CAACQ,KAAK,CAAC;MAClB;IACF;IAEA,SAASC,aAAaA,CAACC,EAAE,EAAE;MACzB,IAAIC,OAAO,GAAGD,EAAE,CAAC,CAAC;MAClB,IAAIpC,CAAC,CAACwB,WAAW,CAACa,OAAO,CAAC,EAAE;QAC1BJ,UAAU,CAAC,CAAC;QACZ;MACF;MAEAI,OAAO,CAACC,IAAI,CAAC,UAASC,IAAI,EAAE;QAC1BvC,CAAC,CAACoB,IAAI,CAACmB,IAAI,CAACC,SAAS,EAAE,UAASC,QAAQ,EAAE;UACxC,IAAIf,IAAI,IAAK,CAAC1B,CAAC,CAACwB,WAAW,CAACH,IAAI,CAACU,KAAK,CAAC,IAAIH,eAAe,IAAIP,IAAI,CAACU,KAAM,EAAE;YACzEL,IAAI,GAAG,IAAI;YACX,OAAO,KAAK;UACd;UAEAE,eAAe,EAAE;UACjBN,QAAQ,CAACmB,QAAQ,EAAER,UAAU,CAAC;QAChC,CAAC,CAAC;QAEF,IAAI,CAACP,IAAI,EAAE;UACTC,WAAW,EAAE;UACbQ,aAAa,CAACnC,CAAC,CAAC0C,IAAI,CAACH,IAAI,CAACI,QAAQ,EAAEJ,IAAI,CAAC,CAAC;QAC5C;MACF,CAAC,CAAC;MAEFF,OAAO,CAACO,KAAK,CAACX,UAAU,CAAC;IAC3B;IAEAE,aAAa,CAACnC,CAAC,CAAC0C,IAAI,CAAC,IAAI,CAACH,IAAI,EAAE,IAAI,EAAEvC,CAAC,CAAC6C,KAAK,CAACxB,IAAI,EAAEQ,MAAM,CAAC,CAAC,CAAC;EAC/D,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAf,uBAAuB,CAACgC,IAAI,GAAG,SAASA,IAAIA,CAACzB,IAAI,EAAEC,QAAQ,EAAE;IAC3D,IAAItB,CAAC,CAACuB,UAAU,CAACF,IAAI,CAAC,EAAE;MACtBC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IACjB,IAAI0B,QAAQ,GAAGjD,CAAC,CAACkD,KAAK,CAAC,CAAC;IACxB,IAAIC,YAAY,GAAG,EAAE;IACrB5B,IAAI,CAACC,QAAQ,GAAG,UAAS4B,QAAQ,EAAExB,IAAI,EAAE;MACvCuB,YAAY,CAACE,IAAI,CAACD,QAAQ,CAAC;MAE3B,IAAI,CAAClD,CAAC,CAACwB,WAAW,CAACH,IAAI,CAACU,KAAK,CAAC,IAAIkB,YAAY,CAACG,MAAM,KAAK/B,IAAI,CAACU,KAAK,EAAE;QACpEL,IAAI,CAAC,CAAC;MACR;IACF,CAAC;IAEDL,IAAI,CAACK,IAAI,GAAG,UAASQ,KAAK,EAAE;MAC1B,IAAIlC,CAAC,CAACwB,WAAW,CAACU,KAAK,CAAC,EAAE;QACxBa,QAAQ,CAACM,OAAO,CAACJ,YAAY,CAAC;MAChC,CAAC,MAAM;QACLF,QAAQ,CAACO,MAAM,CAACpB,KAAK,CAAC;MACxB;IACF,CAAC;IAED,IAAIlC,CAAC,CAACuB,UAAU,CAACD,QAAQ,CAAC,EAAE;MAC1ByB,QAAQ,CAACV,OAAO,CAACkB,OAAO,CAACjC,QAAQ,CAAC;IACpC;IAEA,IAAI,CAACF,IAAI,CAACC,IAAI,CAAC;IACf,OAAO0B,QAAQ,CAACV,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAvB,uBAAuB,CAACyB,IAAI,GAAG,SAASA,IAAIA,CAAClB,IAAI,EAAEC,QAAQ,EAAE;IAC3D,IAAItB,CAAC,CAACuB,UAAU,CAACF,IAAI,CAAC,EAAE;MACtBC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IAEjB,IAAI0B,QAAQ,GAAGjD,CAAC,CAACkD,KAAK,CAAC,CAAC;IACxB,IAAIQ,IAAI,GAAGjD,MAAM,CAACkD,EAAE,CAAC;MACnB,WAAW,EAAEpC,IAAI,CAACqC,SAAS;MAC3B,MAAM,EAAErC,IAAI,CAACsC,UAAU;MACvB,UAAU,EAAEtC,IAAI,CAACW;IACnB,CAAC,CAAC;IAEF,IAAIK,OAAO,GAAG,IAAI,CAACpB,QAAQ,CAACsB,IAAI,CAAC;MAACqB,GAAG,EAAE,IAAI,CAACzC,IAAI;MAAE0C,MAAM,EAAE,KAAK;MAAEC,MAAM,EAAEN;IAAI,CAAC,CAAC;IAE/EnB,OAAO,GAAGA,OAAO,CAACC,IAAI,CAAC,UAASyB,OAAO,EAAE;MACvChB,QAAQ,CAACM,OAAO,CAAC,IAAI5C,eAAe,CAAC,IAAI,CAACQ,QAAQ,EAAE8C,OAAO,EAAE,IAAI,CAAC7C,SAAS,CAAC,CAAC;IAC/E,CAAC,CAACwB,IAAI,CAAC,IAAI,CAAC,CAAC;IAEbL,OAAO,CAACO,KAAK,CAAC,UAASV,KAAK,EAAE;MAC5Ba,QAAQ,CAACO,MAAM,CAACpB,KAAK,CAAC;IACxB,CAAC,CAAC;IAEF,IAAIlC,CAAC,CAACuB,UAAU,CAACD,QAAQ,CAAC,EAAE;MAC1ByB,QAAQ,CAACV,OAAO,CAACkB,OAAO,CAACjC,QAAQ,CAAC;IACpC;IAEA,OAAOyB,QAAQ,CAACV,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAvB,uBAAuB,CAACkD,OAAO,GAAG,SAASA,OAAOA,CAACC,SAAS,EAAE3C,QAAQ,EAAE;IACtE,IAAIyB,QAAQ,GAAGjD,CAAC,CAACkD,KAAK,CAAC,CAAC;IAExB,IAAIX,OAAO,GAAG,IAAI,CAACpB,QAAQ,CAACiD,OAAO,CAACC,MAAM,CAACC,OAAO,CAAC;MAACP,MAAM,EAAE,KAAK;MAAED,GAAG,EAAEK;IAAS,CAAC,CAAC;IAEnF5B,OAAO,GAAGA,OAAO,CAACC,IAAI,CAAC,UAASyB,OAAO,EAAE;MACvChB,QAAQ,CAACM,OAAO,CAAC,IAAI5C,eAAe,CAAC,IAAI,CAACQ,QAAQ,EAAE8C,OAAO,EAAE,IAAI,CAAC7C,SAAS,CAAC,CAAC;IAC/E,CAAC,CAACwB,IAAI,CAAC,IAAI,CAAC,CAAC;IAEbL,OAAO,CAACO,KAAK,CAAC,UAASV,KAAK,EAAE;MAC5Ba,QAAQ,CAACO,MAAM,CAACpB,KAAK,CAAC;IACxB,CAAC,CAAC;IAEF,IAAIlC,CAAC,CAACuB,UAAU,CAACD,QAAQ,CAAC,EAAE;MAC1ByB,QAAQ,CAACV,OAAO,CAACkB,OAAO,CAACjC,QAAQ,CAAC;IACpC;IAEA,OAAOyB,QAAQ,CAACV,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAvB,uBAAuB,CAACuD,MAAM,GAAG,SAASA,MAAMA,CAAChD,IAAI,EAAEC,QAAQ,EAAE;IAC/D,IAAItB,CAAC,CAACwB,WAAW,CAACH,IAAI,CAAC,EAAE;MACvB,MAAM,IAAII,KAAK,CAAC,oCAAoC,CAAC;IACvD;IACA,IAAIzB,CAAC,CAACwB,WAAW,CAACH,IAAI,CAACiD,UAAU,CAAC,EAAE;MAClC,MAAM,IAAI7C,KAAK,CAAC,+CAA+C,CAAC;IAClE;IAEA,IAAIsB,QAAQ,GAAGjD,CAAC,CAACkD,KAAK,CAAC,CAAC;IACxB,IAAIQ,IAAI,GAAGjD,MAAM,CAACkD,EAAE,CAAC;MACnB,YAAY,EAAEzD,CAAC,CAACgB,GAAG,CAACK,IAAI,EAAE,YAAY,CAAC;MACvC,cAAc,EAAErB,CAAC,CAACgB,GAAG,CAACK,IAAI,EAAE,cAAc;IAC5C,CAAC,CAAC;IAEF,IAAIgB,OAAO,GAAG,IAAI,CAACpB,QAAQ,CAACoD,MAAM,CAAC;MAACT,GAAG,EAAE,IAAI,CAACzC,IAAI;MAAE0C,MAAM,EAAE,MAAM;MAAEL,IAAI,EAAEA;IAAI,CAAC,CAAC;IAEhFnB,OAAO,GAAGA,OAAO,CAACC,IAAI,CAAC,UAASyB,OAAO,EAAE;MACvChB,QAAQ,CAACM,OAAO,CAAC,IAAI3C,mBAAmB,CACtC,IAAI,CAACO,QAAQ,EACb8C,OAAO,EACP,IAAI,CAAC7C,SAAS,CAACL,UAAU,EACzB,IAAI,CAACK,SAAS,CAACH,GACjB,CAAC,CAAC;IACJ,CAAC,CAAC2B,IAAI,CAAC,IAAI,CAAC,CAAC;IAEbL,OAAO,CAACO,KAAK,CAAC,UAASV,KAAK,EAAE;MAC5Ba,QAAQ,CAACO,MAAM,CAACpB,KAAK,CAAC;IACxB,CAAC,CAAC;IAEF,IAAIlC,CAAC,CAACuB,UAAU,CAACD,QAAQ,CAAC,EAAE;MAC1ByB,QAAQ,CAACV,OAAO,CAACkB,OAAO,CAACjC,QAAQ,CAAC;IACpC;IAEA,OAAOyB,QAAQ,CAACV,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAvB,uBAAuB,CAACE,GAAG,GAAG,SAASA,GAAGA,CAACD,GAAG,EAAE;IAC9C,OAAO,IAAIJ,kBAAkB,CAAC,IAAI,CAACM,QAAQ,EAAE,IAAI,CAACC,SAAS,CAACL,UAAU,EAAEE,GAAG,CAAC;EAC9E,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAD,uBAAuB,CAACyD,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;IACjD,OAAO,IAAI,CAACrD,SAAS;EACvB,CAAC;EAEDJ,uBAAuB,CAACb,IAAI,CAACuE,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EAAEC,OAAO,EAC1E;IACF,OAAO1E,IAAI,CAACuE,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;EAC7C,CAAC;EAED,OAAO7D,uBAAuB;AAChC,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAL,eAAe,GAAG,SAASA,eAAeA,CAACG,OAAO,EAAEgE,QAAQ,EAAEC,QAAQ,EAAE;EACtE;EACA,IAAI,CAAC3D,SAAS,GAAG2D,QAAQ;EAEzBzE,IAAI,CAAC0E,SAAS,CAACC,WAAW,CAACC,IAAI,CAAC,IAAI,EAAEpE,OAAO,EAAEgE,QAAQ,EAAE,IAAI,CAAC1D,SAAS,CAAC;AAC1E,CAAC;AAEDlB,CAAC,CAACiF,MAAM,CAACxE,eAAe,CAACqE,SAAS,EAAE1E,IAAI,CAAC0E,SAAS,CAAC;AACnDrE,eAAe,CAACqE,SAAS,CAACC,WAAW,GAAGtE,eAAe;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,eAAe,CAACqE,SAAS,CAACI,WAAW,GAAG,SAASA,WAAWA,CAACnB,OAAO,EAAE;EACpE,OAAO,IAAIrD,mBAAmB,CAAC,IAAI,CAACO,QAAQ,EAAE8C,OAAO,EAAE,IAAI,CAAC7C,SAAS,CAACL,UAAU,CAAC;AACnF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,eAAe,CAACqE,SAAS,CAACP,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EACnD,IAAIY,KAAK,GAAG,CAAC,CAAC;EACdnF,CAAC,CAACoF,MAAM,CAAC,IAAI,EAAE,UAASC,KAAK,EAAEC,GAAG,EAAE;IAClC,IAAI,CAACtF,CAAC,CAACuF,UAAU,CAACD,GAAG,EAAE,GAAG,CAAC,IAAI,CAAEtF,CAAC,CAACuB,UAAU,CAAC8D,KAAK,CAAC,EAAE;MACpDF,KAAK,CAACG,GAAG,CAAC,GAAGD,KAAK;IACpB;EACF,CAAC,CAAC;EACF,OAAOF,KAAK;AACd,CAAC;AAED1E,eAAe,CAACqE,SAAS,CAAC7E,IAAI,CAACuE,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EACnEC,OAAO,EAAE;EACX,OAAO1E,IAAI,CAACuE,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;AAC7C,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjE,mBAAmB,GAAG,SAASA,mBAAmBA,CAACE,OAAO,EAAEmD,OAAO,EAAElD,UAAU,EAC3BE,GAAG,EAAE;EACvD,IAAI,CAACE,QAAQ,GAAGL,OAAO;;EAEvB;EACA,IAAI,CAACG,GAAG,GAAGgD,OAAO,CAAChD,GAAG,CAAC,CAAC;EACxB,IAAI,CAACyE,UAAU,GAAGzB,OAAO,CAAC0B,WAAW,CAAC,CAAC;EACvC,IAAI,CAAC5E,UAAU,GAAGkD,OAAO,CAAC2B,WAAW,CAAC,CAAC;EACvC,IAAI,CAACC,QAAQ,GAAG5B,OAAO,CAAC6B,SAAS,CAAC,CAAC;EACnC,IAAI,CAACtB,UAAU,GAAGP,OAAO,CAAC8B,WAAW,CAAC,CAAC;EACvC,IAAI,CAACC,YAAY,GAAG/B,OAAO,CAACgC,aAAa,CAAC,CAAC;EAC3C,IAAI,CAACC,UAAU,GAAGjC,OAAO,CAACkC,WAAW,CAAC,CAAC;EACvC,IAAI,CAACC,WAAW,GAAG5F,WAAW,CAAC6F,eAAe,CAACpC,OAAO,CAACqC,YAAY,CAAC,CAAC,CAAC;EACtE,IAAI,CAACC,WAAW,GAAG/F,WAAW,CAAC6F,eAAe,CAACpC,OAAO,CAACuC,YAAY,CAAC,CAAC,CAAC;EACtE,IAAI,CAACC,GAAG,GAAGxC,OAAO,CAACwC,GAAG,CAAC,CAAC;EACxB,IAAI,CAACC,KAAK,GAAGzC,OAAO,CAACyC,KAAK,CAAC,CAAC;;EAE5B;EACA,IAAI,CAACC,QAAQ,GAAGC,SAAS;EACzB,IAAI,CAACxF,SAAS,GAAG;IAACL,UAAU,EAAEA,UAAU;IAAEE,GAAG,EAAEA,GAAG,IAAI,IAAI,CAACA;EAAK,CAAC;AACnE,CAAC;AAED4F,MAAM,CAACC,cAAc,CAAClG,mBAAmB,CAACoE,SAAS,EACjD,QAAQ,EAAE;EACR9D,GAAG,EAAE,SAAAA,CAAA,EAAW;IACd,IAAI,CAAC,IAAI,CAACyF,QAAQ,EAAE;MAClB,IAAI,CAACA,QAAQ,GAAG,IAAI9F,kBAAkB,CACpC,IAAI,CAACM,QAAQ,EACb,IAAI,CAACC,SAAS,CAACL,UAAU,EACzB,IAAI,CAACK,SAAS,CAACH,GACjB,CAAC;IACH;IAEA,OAAO,IAAI,CAAC0F,QAAQ;EACtB;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA/F,mBAAmB,CAACoE,SAAS,CAAC+B,KAAK,GAAG,SAASA,KAAKA,CAACvF,QAAQ,EAAE;EAC7D,OAAO,IAAI,CAACwF,MAAM,CAACD,KAAK,CAACvF,QAAQ,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAZ,mBAAmB,CAACoE,SAAS,CAACiC,MAAM,GAAG,SAASA,MAAMA,CAACzF,QAAQ,EAAE;EAC/D,OAAO,IAAI,CAACwF,MAAM,CAACC,MAAM,CAACzF,QAAQ,CAAC;AACrC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAZ,mBAAmB,CAACoE,SAAS,CAACkC,SAAS,GAAG,SAASA,SAASA,CAAA,EAAG;EAC7D,OAAO,IAAI,CAACF,MAAM,CAACE,SAAS;AAC9B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtG,mBAAmB,CAACoE,SAAS,CAACmC,WAAW,GAAG,SAASA,WAAWA,CAAA,EAAG;EACjE,OAAO,IAAI,CAACH,MAAM,CAACG,WAAW;AAChC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAvG,mBAAmB,CAACoE,SAAS,CAACoC,IAAI,GAAG,SAASA,IAAIA,CAAA,EAAG;EACnD,OAAO,IAAI,CAACJ,MAAM,CAACI,IAAI;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAxG,mBAAmB,CAACoE,SAAS,CAACP,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EACvD,IAAIY,KAAK,GAAG,CAAC,CAAC;EACdnF,CAAC,CAACoF,MAAM,CAAC,IAAI,EAAE,UAASC,KAAK,EAAEC,GAAG,EAAE;IAClC,IAAI,CAACtF,CAAC,CAACuF,UAAU,CAACD,GAAG,EAAE,GAAG,CAAC,IAAI,CAAEtF,CAAC,CAACuB,UAAU,CAAC8D,KAAK,CAAC,EAAE;MACpDF,KAAK,CAACG,GAAG,CAAC,GAAGD,KAAK;IACpB;EACF,CAAC,CAAC;EACF,OAAOF,KAAK;AACd,CAAC;AAEDzE,mBAAmB,CAACoE,SAAS,CAAC7E,IAAI,CAACuE,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EACvEC,OAAO,EAAE;EACX,OAAO1E,IAAI,CAACuE,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;AAC7C,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAhE,kBAAkB,GAAG,SAASA,kBAAkBA,CAACC,OAAO,EAAEC,UAAU,EAAEE,GAAG,EAAE;EACzE,IAAI,CAACE,QAAQ,GAAGL,OAAO;;EAEvB;EACA,IAAI,CAACM,SAAS,GAAG;IAACL,UAAU,EAAEA,UAAU;IAAEE,GAAG,EAAEA;EAAK,CAAC;EACrD,IAAI,CAACI,IAAI,GAAI,aAAYN,UAAW,iBAAgBE,GAAI,EAAC;;EAEzD;EACA,IAAI,CAACoG,UAAU,GAAGT,SAAS;EAC3B,IAAI,CAACU,YAAY,GAAGV,SAAS;EAC7B,IAAI,CAACW,KAAK,GAAGX,SAAS;AACxB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA/F,kBAAkB,CAACmE,SAAS,CAAC+B,KAAK,GAAG,SAASA,KAAKA,CAACvF,QAAQ,EAAE;EAC5D,IAAIyB,QAAQ,GAAGjD,CAAC,CAACkD,KAAK,CAAC,CAAC;EACxB,IAAIX,OAAO,GAAG,IAAI,CAACpB,QAAQ,CAAC4F,KAAK,CAAC;IAACjD,GAAG,EAAE,IAAI,CAACzC,IAAI;IAAE0C,MAAM,EAAE;EAAK,CAAC,CAAC;EAElExB,OAAO,GAAGA,OAAO,CAACC,IAAI,CAAC,UAASyB,OAAO,EAAE;IACvChB,QAAQ,CAACM,OAAO,CAAC,IAAI3C,mBAAmB,CACtC,IAAI,CAACO,QAAQ,EACb8C,OAAO,EACP,IAAI,CAAC7C,SAAS,CAACL,UAAU,EACzB,IAAI,CAACK,SAAS,CAACH,GACjB,CAAC,CAAC;EACJ,CAAC,CAAC2B,IAAI,CAAC,IAAI,CAAC,CAAC;EAEbL,OAAO,CAACO,KAAK,CAAC,UAASV,KAAK,EAAE;IAC5Ba,QAAQ,CAACO,MAAM,CAACpB,KAAK,CAAC;EACxB,CAAC,CAAC;EAEF,IAAIlC,CAAC,CAACuB,UAAU,CAACD,QAAQ,CAAC,EAAE;IAC1ByB,QAAQ,CAACV,OAAO,CAACkB,OAAO,CAACjC,QAAQ,CAAC;EACpC;EAEA,OAAOyB,QAAQ,CAACV,OAAO;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA1B,kBAAkB,CAACmE,SAAS,CAACiC,MAAM,GAAG,SAASA,MAAMA,CAACzF,QAAQ,EAAE;EAC9D,IAAIyB,QAAQ,GAAGjD,CAAC,CAACkD,KAAK,CAAC,CAAC;EACxB,IAAIX,OAAO,GAAG,IAAI,CAACpB,QAAQ,CAAC8F,MAAM,CAAC;IAACnD,GAAG,EAAE,IAAI,CAACzC,IAAI;IAAE0C,MAAM,EAAE;EAAQ,CAAC,CAAC;EAEtExB,OAAO,GAAGA,OAAO,CAACC,IAAI,CAAC,UAASyB,OAAO,EAAE;IACvChB,QAAQ,CAACM,OAAO,CAACU,OAAO,CAAC;EAC3B,CAAC,CAACrB,IAAI,CAAC,IAAI,CAAC,CAAC;EAEbL,OAAO,CAACO,KAAK,CAAC,UAASV,KAAK,EAAE;IAC5Ba,QAAQ,CAACO,MAAM,CAACpB,KAAK,CAAC;EACxB,CAAC,CAAC;EAEF,IAAIlC,CAAC,CAACuB,UAAU,CAACD,QAAQ,CAAC,EAAE;IAC1ByB,QAAQ,CAACV,OAAO,CAACkB,OAAO,CAACjC,QAAQ,CAAC;EACpC;EAEA,OAAOyB,QAAQ,CAACV,OAAO;AACzB,CAAC;AAEDsE,MAAM,CAACC,cAAc,CAACjG,kBAAkB,CAACmE,SAAS,EAChD,WAAW,EAAE;EACX9D,GAAG,EAAE,SAAAA,CAAA,EAAW;IACd,IAAI,CAAC,IAAI,CAACmG,UAAU,EAAE;MACpB,IAAI,CAACA,UAAU,GAAG,IAAI9G,YAAY,CAAC,IAAI,CAACY,QAAQ,EAAE,IAAI,CAACC,SAAS,CAACL,UAAU,EAAE,IAAI,CAACK,SAAS,CAACH,GAAG,CAAC;IAClG;IACA,OAAO,IAAI,CAACoG,UAAU;EACxB;AACJ,CAAC,CAAC;AAEFR,MAAM,CAACC,cAAc,CAACjG,kBAAkB,CAACmE,SAAS,EAChD,aAAa,EAAE;EACb9D,GAAG,EAAE,SAAAA,CAAA,EAAW;IACd,IAAI,CAAC,IAAI,CAACoG,YAAY,EAAE;MACtB,IAAI,CAACA,YAAY,GAAG,IAAIlH,cAAc,CACpC,IAAI,CAACe,QAAQ,EACb,IAAI,CAACC,SAAS,CAACL,UAAU,EACzB,IAAI,CAACK,SAAS,CAACH,GACjB,CAAC;IACH;IACA,OAAO,IAAI,CAACqG,YAAY;EAC1B;AACJ,CAAC,CAAC;AAEFT,MAAM,CAACC,cAAc,CAACjG,kBAAkB,CAACmE,SAAS,EAChD,MAAM,EAAE;EACN9D,GAAG,EAAE,SAAAA,CAAA,EAAW;IACd,IAAI,CAAC,IAAI,CAACqG,KAAK,EAAE;MACf,IAAI,CAACA,KAAK,GAAG,IAAIlH,OAAO,CAAC,IAAI,CAACc,QAAQ,EAAE,IAAI,CAACC,SAAS,CAACL,UAAU,EAAE,IAAI,CAACK,SAAS,CAACH,GAAG,CAAC;IACxF;IACA,OAAO,IAAI,CAACsG,KAAK;EACnB;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA1G,kBAAkB,CAACmE,SAAS,CAACP,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EACtD,OAAO,IAAI,CAACrD,SAAS;AACvB,CAAC;AAEDP,kBAAkB,CAACmE,SAAS,CAAC7E,IAAI,CAACuE,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EACtEC,OAAO,EAAE;EACX,OAAO1E,IAAI,CAACuE,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;AAC7C,CAAC;AAED2C,MAAM,CAACC,OAAO,GAAG;EACf/G,eAAe,EAAEA,eAAe;EAChCC,eAAe,EAAEA,eAAe;EAChCC,mBAAmB,EAAEA,mBAAmB;EACxCC,kBAAkB,EAAEA;AACtB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}