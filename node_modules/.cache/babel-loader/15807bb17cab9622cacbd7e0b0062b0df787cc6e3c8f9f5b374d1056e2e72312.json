{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../../../../base/deserialize'); /* jshint ignore:line */\nvar values = require('../../../../../../base/values'); /* jshint ignore:line */\n\nvar IpAddressList;\nvar IpAddressPage;\nvar IpAddressInstance;\nvar IpAddressContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the IpAddressList\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          The unique id of the Account that is responsible for this resource.\n * @param {string} ipAccessControlListSid -\n *          The unique id of the IpAccessControlList resource that includes this resource.\n */\n/* jshint ignore:end */\nIpAddressList = function IpAddressList(version, accountSid, ipAccessControlListSid) {\n  /* jshint ignore:start */\n  /**\n   * @function ipAddresses\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressContext}\n   */\n  /* jshint ignore:end */\n  function IpAddressListInstance(sid) {\n    return IpAddressListInstance.get(sid);\n  }\n  IpAddressListInstance._version = version;\n  // Path Solution\n  IpAddressListInstance._solution = {\n    accountSid: accountSid,\n    ipAccessControlListSid: ipAccessControlListSid\n  };\n  IpAddressListInstance._uri = `/Accounts/${accountSid}/SIP/IpAccessControlLists/${ipAccessControlListSid}/IpAddresses.json`;\n  /* jshint ignore:start */\n  /**\n   * Streams IpAddressInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  IpAddressListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists IpAddressInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  IpAddressListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of IpAddressInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  IpAddressListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new IpAddressPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of IpAddressInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  IpAddressListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new IpAddressPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a IpAddressInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName -\n   *          A human readable descriptive text for this resource, up to 64 characters long.\n   * @param {string} opts.ipAddress -\n   *          An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.\n   * @param {number} [opts.cidrPrefixLength] -\n   *          An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed IpAddressInstance\n   */\n  /* jshint ignore:end */\n  IpAddressListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n    if (_.isUndefined(opts.ipAddress)) {\n      throw new Error('Required parameter \"opts.ipAddress\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'IpAddress': _.get(opts, 'ipAddress'),\n      'CidrPrefixLength': _.get(opts, 'cidrPrefixLength')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new IpAddressInstance(this._version, payload, this._solution.accountSid, this._solution.ipAccessControlListSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a ip_address\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressList#\n   *\n   * @param {string} sid - A string that identifies the IpAddress resource to fetch\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressContext}\n   */\n  /* jshint ignore:end */\n  IpAddressListInstance.get = function get(sid) {\n    return new IpAddressContext(this._version, this._solution.accountSid, this._solution.ipAccessControlListSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  IpAddressListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  IpAddressListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return IpAddressListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the IpAddressPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {IpAddressSolution} solution - Path solution\n *\n * @returns IpAddressPage\n */\n/* jshint ignore:end */\nIpAddressPage = function IpAddressPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(IpAddressPage.prototype, Page.prototype);\nIpAddressPage.prototype.constructor = IpAddressPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of IpAddressInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressPage#\n *\n * @param {IpAddressPayload} payload - Payload response from the API\n *\n * @returns IpAddressInstance\n */\n/* jshint ignore:end */\nIpAddressPage.prototype.getInstance = function getInstance(payload) {\n  return new IpAddressInstance(this._version, payload, this._solution.accountSid, this._solution.ipAccessControlListSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nIpAddressPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nIpAddressPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the IpAddressContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressInstance\n *\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this resource.\n * @property {string} accountSid -\n *          The unique id of the Account that is responsible for this resource.\n * @property {string} friendlyName -\n *          A human readable descriptive text for this resource, up to 64 characters long.\n * @property {string} ipAddress -\n *          An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.\n * @property {number} cidrPrefixLength -\n *          An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.\n * @property {string} ipAccessControlListSid -\n *          The unique id of the IpAccessControlList resource that includes this resource.\n * @property {Date} dateCreated -\n *          The date that this resource was created, given as GMT in RFC 2822 format.\n * @property {Date} dateUpdated -\n *          The date that this resource was last updated, given as GMT in RFC 2822 format.\n * @property {string} uri -\n *          The URI for this resource, relative to https://api.twilio.com\n *\n * @param {V2010} version - Version of the resource\n * @param {IpAddressPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          The unique id of the Account that is responsible for this resource.\n * @param {sid} ipAccessControlListSid -\n *          The unique id of the IpAccessControlList resource that includes this resource.\n * @param {sid} sid - A string that identifies the IpAddress resource to fetch\n */\n/* jshint ignore:end */\nIpAddressInstance = function IpAddressInstance(version, payload, accountSid, ipAccessControlListSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.ipAddress = payload.ip_address; // jshint ignore:line\n  this.cidrPrefixLength = deserialize.integer(payload.cidr_prefix_length); // jshint ignore:line\n  this.ipAccessControlListSid = payload.ip_access_control_list_sid; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    ipAccessControlListSid: ipAccessControlListSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(IpAddressInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new IpAddressContext(this._version, this._solution.accountSid, this._solution.ipAccessControlListSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a IpAddressInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAddressInstance\n */\n/* jshint ignore:end */\nIpAddressInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a IpAddressInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.ipAddress] -\n *          An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.\n * @param {string} [opts.friendlyName] -\n *          A human readable descriptive text for this resource, up to 64 characters long.\n * @param {number} [opts.cidrPrefixLength] -\n *          An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAddressInstance\n */\n/* jshint ignore:end */\nIpAddressInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a IpAddressInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAddressInstance\n */\n/* jshint ignore:end */\nIpAddressInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nIpAddressInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nIpAddressInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the IpAddressContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid - The unique sid that identifies this account\n * @param {sid} ipAccessControlListSid -\n *          The IpAccessControlList Sid that identifies the IpAddress resources to fetch\n * @param {sid} sid - A string that identifies the IpAddress resource to fetch\n */\n/* jshint ignore:end */\nIpAddressContext = function IpAddressContext(version, accountSid, ipAccessControlListSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    accountSid: accountSid,\n    ipAccessControlListSid: ipAccessControlListSid,\n    sid: sid\n  };\n  this._uri = `/Accounts/${accountSid}/SIP/IpAccessControlLists/${ipAccessControlListSid}/IpAddresses/${sid}.json`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a IpAddressInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAddressInstance\n */\n/* jshint ignore:end */\nIpAddressContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new IpAddressInstance(this._version, payload, this._solution.accountSid, this._solution.ipAccessControlListSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a IpAddressInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.ipAddress] -\n *          An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.\n * @param {string} [opts.friendlyName] -\n *          A human readable descriptive text for this resource, up to 64 characters long.\n * @param {number} [opts.cidrPrefixLength] -\n *          An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAddressInstance\n */\n/* jshint ignore:end */\nIpAddressContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'IpAddress': _.get(opts, 'ipAddress'),\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'CidrPrefixLength': _.get(opts, 'cidrPrefixLength')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new IpAddressInstance(this._version, payload, this._solution.accountSid, this._solution.ipAccessControlListSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a IpAddressInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAddressInstance\n */\n/* jshint ignore:end */\nIpAddressContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nIpAddressContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nIpAddressContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  IpAddressList: IpAddressList,\n  IpAddressPage: IpAddressPage,\n  IpAddressInstance: IpAddressInstance,\n  IpAddressContext: IpAddressContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","values","IpAddressList","IpAddressPage","IpAddressInstance","IpAddressContext","version","accountSid","ipAccessControlListSid","IpAddressListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","friendlyName","ipAddress","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","account_sid","friendly_name","ip_address","cidrPrefixLength","integer","cidr_prefix_length","ip_access_control_list_sid","dateCreated","rfc2822DateTime","date_created","dateUpdated","date_updated","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/api/v2010/account/sip/ipAccessControlList/ipAddress.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../../../base/values');  /* jshint ignore:line */\n\nvar IpAddressList;\nvar IpAddressPage;\nvar IpAddressInstance;\nvar IpAddressContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the IpAddressList\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          The unique id of the Account that is responsible for this resource.\n * @param {string} ipAccessControlListSid -\n *          The unique id of the IpAccessControlList resource that includes this resource.\n */\n/* jshint ignore:end */\nIpAddressList = function IpAddressList(version, accountSid,\n                                        ipAccessControlListSid) {\n  /* jshint ignore:start */\n  /**\n   * @function ipAddresses\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressContext}\n   */\n  /* jshint ignore:end */\n  function IpAddressListInstance(sid) {\n    return IpAddressListInstance.get(sid);\n  }\n\n  IpAddressListInstance._version = version;\n  // Path Solution\n  IpAddressListInstance._solution = {\n    accountSid: accountSid,\n    ipAccessControlListSid: ipAccessControlListSid\n  };\n  IpAddressListInstance._uri = `/Accounts/${accountSid}/SIP/IpAccessControlLists/${ipAccessControlListSid}/IpAddresses.json`;\n  /* jshint ignore:start */\n  /**\n   * Streams IpAddressInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  IpAddressListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists IpAddressInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  IpAddressListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of IpAddressInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  IpAddressListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new IpAddressPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of IpAddressInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  IpAddressListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new IpAddressPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a IpAddressInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName -\n   *          A human readable descriptive text for this resource, up to 64 characters long.\n   * @param {string} opts.ipAddress -\n   *          An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.\n   * @param {number} [opts.cidrPrefixLength] -\n   *          An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed IpAddressInstance\n   */\n  /* jshint ignore:end */\n  IpAddressListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n    if (_.isUndefined(opts.ipAddress)) {\n      throw new Error('Required parameter \"opts.ipAddress\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'IpAddress': _.get(opts, 'ipAddress'),\n      'CidrPrefixLength': _.get(opts, 'cidrPrefixLength')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new IpAddressInstance(\n        this._version,\n        payload,\n        this._solution.accountSid,\n        this._solution.ipAccessControlListSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a ip_address\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressList#\n   *\n   * @param {string} sid - A string that identifies the IpAddress resource to fetch\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressContext}\n   */\n  /* jshint ignore:end */\n  IpAddressListInstance.get = function get(sid) {\n    return new IpAddressContext(\n      this._version,\n      this._solution.accountSid,\n      this._solution.ipAccessControlListSid,\n      sid\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  IpAddressListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  IpAddressListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return IpAddressListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the IpAddressPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {IpAddressSolution} solution - Path solution\n *\n * @returns IpAddressPage\n */\n/* jshint ignore:end */\nIpAddressPage = function IpAddressPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(IpAddressPage.prototype, Page.prototype);\nIpAddressPage.prototype.constructor = IpAddressPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of IpAddressInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressPage#\n *\n * @param {IpAddressPayload} payload - Payload response from the API\n *\n * @returns IpAddressInstance\n */\n/* jshint ignore:end */\nIpAddressPage.prototype.getInstance = function getInstance(payload) {\n  return new IpAddressInstance(\n    this._version,\n    payload,\n    this._solution.accountSid,\n    this._solution.ipAccessControlListSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nIpAddressPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nIpAddressPage.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the IpAddressContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressInstance\n *\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this resource.\n * @property {string} accountSid -\n *          The unique id of the Account that is responsible for this resource.\n * @property {string} friendlyName -\n *          A human readable descriptive text for this resource, up to 64 characters long.\n * @property {string} ipAddress -\n *          An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.\n * @property {number} cidrPrefixLength -\n *          An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.\n * @property {string} ipAccessControlListSid -\n *          The unique id of the IpAccessControlList resource that includes this resource.\n * @property {Date} dateCreated -\n *          The date that this resource was created, given as GMT in RFC 2822 format.\n * @property {Date} dateUpdated -\n *          The date that this resource was last updated, given as GMT in RFC 2822 format.\n * @property {string} uri -\n *          The URI for this resource, relative to https://api.twilio.com\n *\n * @param {V2010} version - Version of the resource\n * @param {IpAddressPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          The unique id of the Account that is responsible for this resource.\n * @param {sid} ipAccessControlListSid -\n *          The unique id of the IpAccessControlList resource that includes this resource.\n * @param {sid} sid - A string that identifies the IpAddress resource to fetch\n */\n/* jshint ignore:end */\nIpAddressInstance = function IpAddressInstance(version, payload, accountSid,\n                                                ipAccessControlListSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.ipAddress = payload.ip_address; // jshint ignore:line\n  this.cidrPrefixLength = deserialize.integer(payload.cidr_prefix_length); // jshint ignore:line\n  this.ipAccessControlListSid = payload.ip_access_control_list_sid; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    ipAccessControlListSid: ipAccessControlListSid,\n    sid: sid || this.sid,\n  };\n};\n\nObject.defineProperty(IpAddressInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new IpAddressContext(\n          this._version,\n          this._solution.accountSid,\n          this._solution.ipAccessControlListSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a IpAddressInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAddressInstance\n */\n/* jshint ignore:end */\nIpAddressInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a IpAddressInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.ipAddress] -\n *          An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.\n * @param {string} [opts.friendlyName] -\n *          A human readable descriptive text for this resource, up to 64 characters long.\n * @param {number} [opts.cidrPrefixLength] -\n *          An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAddressInstance\n */\n/* jshint ignore:end */\nIpAddressInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a IpAddressInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAddressInstance\n */\n/* jshint ignore:end */\nIpAddressInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nIpAddressInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nIpAddressInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the IpAddressContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid - The unique sid that identifies this account\n * @param {sid} ipAccessControlListSid -\n *          The IpAccessControlList Sid that identifies the IpAddress resources to fetch\n * @param {sid} sid - A string that identifies the IpAddress resource to fetch\n */\n/* jshint ignore:end */\nIpAddressContext = function IpAddressContext(version, accountSid,\n                                              ipAccessControlListSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, ipAccessControlListSid: ipAccessControlListSid, sid: sid, };\n  this._uri = `/Accounts/${accountSid}/SIP/IpAccessControlLists/${ipAccessControlListSid}/IpAddresses/${sid}.json`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a IpAddressInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAddressInstance\n */\n/* jshint ignore:end */\nIpAddressContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new IpAddressInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.ipAccessControlListSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a IpAddressInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.ipAddress] -\n *          An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.\n * @param {string} [opts.friendlyName] -\n *          A human readable descriptive text for this resource, up to 64 characters long.\n * @param {number} [opts.cidrPrefixLength] -\n *          An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAddressInstance\n */\n/* jshint ignore:end */\nIpAddressContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'IpAddress': _.get(opts, 'ipAddress'),\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'CidrPrefixLength': _.get(opts, 'cidrPrefixLength')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new IpAddressInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.ipAccessControlListSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a IpAddressInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAddressInstance\n */\n/* jshint ignore:end */\nIpAddressContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nIpAddressContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nIpAddressContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  IpAddressList: IpAddressList,\n  IpAddressPage: IpAddressPage,\n  IpAddressInstance: IpAddressInstance,\n  IpAddressContext: IpAddressContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}