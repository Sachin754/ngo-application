{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar HighriskSpecialPrefixList = require('./country/highriskSpecialPrefix').HighriskSpecialPrefixList;\nvar Page = require('../../../../base/Page'); /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../../base/values'); /* jshint ignore:line */\n\nvar CountryList;\nvar CountryPage;\nvar CountryInstance;\nvar CountryContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the CountryList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Voice.V1.DialingPermissionsContext.CountryList\n *\n * @param {Twilio.Voice.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nCountryList = function CountryList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function countries\n   * @memberof Twilio.Voice.V1.DialingPermissionsContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Voice.V1.DialingPermissionsContext.CountryContext}\n   */\n  /* jshint ignore:end */\n  function CountryListInstance(sid) {\n    return CountryListInstance.get(sid);\n  }\n  CountryListInstance._version = version;\n  // Path Solution\n  CountryListInstance._solution = {};\n  CountryListInstance._uri = `/DialingPermissions/Countries`;\n  /* jshint ignore:start */\n  /**\n   * Streams CountryInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.isoCode] -\n   *          Filter to retrieve the country permissions by specifying the ISO country code\n   * @param {string} [opts.continent] -\n   *          Filter to retrieve the country permissions by specifying the continent\n   * @param {string} [opts.countryCode] - Country code filter\n   * @param {boolean} [opts.lowRiskNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to low-risk numbers enabled\n   * @param {boolean} [opts.highRiskSpecialNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to high-risk special service numbers enabled\n   * @param {boolean} [opts.highRiskTollfraudNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to high-risk toll fraud numbers enabled\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  CountryListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists CountryInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.isoCode] -\n   *          Filter to retrieve the country permissions by specifying the ISO country code\n   * @param {string} [opts.continent] -\n   *          Filter to retrieve the country permissions by specifying the continent\n   * @param {string} [opts.countryCode] - Country code filter\n   * @param {boolean} [opts.lowRiskNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to low-risk numbers enabled\n   * @param {boolean} [opts.highRiskSpecialNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to high-risk special service numbers enabled\n   * @param {boolean} [opts.highRiskTollfraudNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to high-risk toll fraud numbers enabled\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CountryListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of CountryInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.isoCode] -\n   *          Filter to retrieve the country permissions by specifying the ISO country code\n   * @param {string} [opts.continent] -\n   *          Filter to retrieve the country permissions by specifying the continent\n   * @param {string} [opts.countryCode] - Country code filter\n   * @param {boolean} [opts.lowRiskNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to low-risk numbers enabled\n   * @param {boolean} [opts.highRiskSpecialNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to high-risk special service numbers enabled\n   * @param {boolean} [opts.highRiskTollfraudNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to high-risk toll fraud numbers enabled\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CountryListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'IsoCode': _.get(opts, 'isoCode'),\n      'Continent': _.get(opts, 'continent'),\n      'CountryCode': _.get(opts, 'countryCode'),\n      'LowRiskNumbersEnabled': serialize.bool(_.get(opts, 'lowRiskNumbersEnabled')),\n      'HighRiskSpecialNumbersEnabled': serialize.bool(_.get(opts, 'highRiskSpecialNumbersEnabled')),\n      'HighRiskTollfraudNumbersEnabled': serialize.bool(_.get(opts, 'highRiskTollfraudNumbersEnabled')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new CountryPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of CountryInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CountryListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new CountryPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a country\n   *\n   * @function get\n   * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryList#\n   *\n   * @param {string} isoCode - The ISO country code\n   *\n   * @returns {Twilio.Voice.V1.DialingPermissionsContext.CountryContext}\n   */\n  /* jshint ignore:end */\n  CountryListInstance.get = function get(isoCode) {\n    return new CountryContext(this._version, isoCode);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  CountryListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  CountryListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return CountryListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the CountryPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Voice.V1.DialingPermissionsContext.CountryPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {CountrySolution} solution - Path solution\n *\n * @returns CountryPage\n */\n/* jshint ignore:end */\nCountryPage = function CountryPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(CountryPage.prototype, Page.prototype);\nCountryPage.prototype.constructor = CountryPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of CountryInstance\n *\n * @function getInstance\n * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryPage#\n *\n * @param {CountryPayload} payload - Payload response from the API\n *\n * @returns CountryInstance\n */\n/* jshint ignore:end */\nCountryPage.prototype.getInstance = function getInstance(payload) {\n  return new CountryInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCountryPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nCountryPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the CountryContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Voice.V1.DialingPermissionsContext.CountryInstance\n *\n * @property {string} isoCode - The ISO country code\n * @property {string} name - The name of the country\n * @property {string} continent -\n *          The name of the continent in which the country is located\n * @property {string} countryCodes - The E.164 assigned country codes(s)\n * @property {boolean} lowRiskNumbersEnabled -\n *          Whether dialing to low-risk numbers is enabled\n * @property {boolean} highRiskSpecialNumbersEnabled -\n *          Whether dialing to high-risk special services numbers is enabled\n * @property {boolean} highRiskTollfraudNumbersEnabled -\n *          Whether dialing to high-risk toll fraud numbers is enabled, else `false`\n * @property {string} url - The absolute URL of this resource\n * @property {string} links - A list of URLs related to this resource\n *\n * @param {V1} version - Version of the resource\n * @param {CountryPayload} payload - The instance payload\n * @param {iso_country_code} isoCode - The ISO country code\n */\n/* jshint ignore:end */\nCountryInstance = function CountryInstance(version, payload, isoCode) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.isoCode = payload.iso_code; // jshint ignore:line\n  this.name = payload.name; // jshint ignore:line\n  this.continent = payload.continent; // jshint ignore:line\n  this.countryCodes = payload.country_codes; // jshint ignore:line\n  this.lowRiskNumbersEnabled = payload.low_risk_numbers_enabled; // jshint ignore:line\n  this.highRiskSpecialNumbersEnabled = payload.high_risk_special_numbers_enabled; // jshint ignore:line\n  this.highRiskTollfraudNumbersEnabled = payload.high_risk_tollfraud_numbers_enabled; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    isoCode: isoCode || this.isoCode\n  };\n};\nObject.defineProperty(CountryInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new CountryContext(this._version, this._solution.isoCode);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a CountryInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CountryInstance\n */\n/* jshint ignore:end */\nCountryInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the highriskSpecialPrefixes\n *\n * @function highriskSpecialPrefixes\n * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryInstance#\n *\n * @returns {Twilio.Voice.V1.DialingPermissionsContext.CountryContext.HighriskSpecialPrefixList}\n */\n/* jshint ignore:end */\nCountryInstance.prototype.highriskSpecialPrefixes = function highriskSpecialPrefixes() {\n  return this._proxy.highriskSpecialPrefixes;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCountryInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nCountryInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the CountryContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Voice.V1.DialingPermissionsContext.CountryContext\n *\n * @property {Twilio.Voice.V1.DialingPermissionsContext.CountryContext.HighriskSpecialPrefixList} highriskSpecialPrefixes -\n *          highriskSpecialPrefixes resource\n *\n * @param {V1} version - Version of the resource\n * @param {iso_country_code} isoCode - The ISO country code\n */\n/* jshint ignore:end */\nCountryContext = function CountryContext(version, isoCode) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    isoCode: isoCode\n  };\n  this._uri = `/DialingPermissions/Countries/${isoCode}`;\n\n  // Dependents\n  this._highriskSpecialPrefixes = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a CountryInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CountryInstance\n */\n/* jshint ignore:end */\nCountryContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new CountryInstance(this._version, payload, this._solution.isoCode));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(CountryContext.prototype, 'highriskSpecialPrefixes', {\n  get: function () {\n    if (!this._highriskSpecialPrefixes) {\n      this._highriskSpecialPrefixes = new HighriskSpecialPrefixList(this._version, this._solution.isoCode);\n    }\n    return this._highriskSpecialPrefixes;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCountryContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nCountryContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  CountryList: CountryList,\n  CountryPage: CountryPage,\n  CountryInstance: CountryInstance,\n  CountryContext: CountryContext\n};","map":{"version":3,"names":["Q","require","_","util","HighriskSpecialPrefixList","Page","serialize","values","CountryList","CountryPage","CountryInstance","CountryContext","version","CountryListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","bool","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","isoCode","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","iso_code","name","continent","countryCodes","country_codes","lowRiskNumbersEnabled","low_risk_numbers_enabled","highRiskSpecialNumbersEnabled","high_risk_special_numbers_enabled","highRiskTollfraudNumbersEnabled","high_risk_tollfraud_numbers_enabled","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","highriskSpecialPrefixes","_highriskSpecialPrefixes","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/voice/v1/dialingPermissions/country.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar HighriskSpecialPrefixList = require(\n    './country/highriskSpecialPrefix').HighriskSpecialPrefixList;\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar CountryList;\nvar CountryPage;\nvar CountryInstance;\nvar CountryContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the CountryList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Voice.V1.DialingPermissionsContext.CountryList\n *\n * @param {Twilio.Voice.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nCountryList = function CountryList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function countries\n   * @memberof Twilio.Voice.V1.DialingPermissionsContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Voice.V1.DialingPermissionsContext.CountryContext}\n   */\n  /* jshint ignore:end */\n  function CountryListInstance(sid) {\n    return CountryListInstance.get(sid);\n  }\n\n  CountryListInstance._version = version;\n  // Path Solution\n  CountryListInstance._solution = {};\n  CountryListInstance._uri = `/DialingPermissions/Countries`;\n  /* jshint ignore:start */\n  /**\n   * Streams CountryInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.isoCode] -\n   *          Filter to retrieve the country permissions by specifying the ISO country code\n   * @param {string} [opts.continent] -\n   *          Filter to retrieve the country permissions by specifying the continent\n   * @param {string} [opts.countryCode] - Country code filter\n   * @param {boolean} [opts.lowRiskNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to low-risk numbers enabled\n   * @param {boolean} [opts.highRiskSpecialNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to high-risk special service numbers enabled\n   * @param {boolean} [opts.highRiskTollfraudNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to high-risk toll fraud numbers enabled\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  CountryListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists CountryInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.isoCode] -\n   *          Filter to retrieve the country permissions by specifying the ISO country code\n   * @param {string} [opts.continent] -\n   *          Filter to retrieve the country permissions by specifying the continent\n   * @param {string} [opts.countryCode] - Country code filter\n   * @param {boolean} [opts.lowRiskNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to low-risk numbers enabled\n   * @param {boolean} [opts.highRiskSpecialNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to high-risk special service numbers enabled\n   * @param {boolean} [opts.highRiskTollfraudNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to high-risk toll fraud numbers enabled\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CountryListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of CountryInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.isoCode] -\n   *          Filter to retrieve the country permissions by specifying the ISO country code\n   * @param {string} [opts.continent] -\n   *          Filter to retrieve the country permissions by specifying the continent\n   * @param {string} [opts.countryCode] - Country code filter\n   * @param {boolean} [opts.lowRiskNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to low-risk numbers enabled\n   * @param {boolean} [opts.highRiskSpecialNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to high-risk special service numbers enabled\n   * @param {boolean} [opts.highRiskTollfraudNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to high-risk toll fraud numbers enabled\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CountryListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'IsoCode': _.get(opts, 'isoCode'),\n      'Continent': _.get(opts, 'continent'),\n      'CountryCode': _.get(opts, 'countryCode'),\n      'LowRiskNumbersEnabled': serialize.bool(_.get(opts, 'lowRiskNumbersEnabled')),\n      'HighRiskSpecialNumbersEnabled': serialize.bool(_.get(opts, 'highRiskSpecialNumbersEnabled')),\n      'HighRiskTollfraudNumbersEnabled': serialize.bool(_.get(opts, 'highRiskTollfraudNumbersEnabled')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new CountryPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of CountryInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CountryListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new CountryPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a country\n   *\n   * @function get\n   * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryList#\n   *\n   * @param {string} isoCode - The ISO country code\n   *\n   * @returns {Twilio.Voice.V1.DialingPermissionsContext.CountryContext}\n   */\n  /* jshint ignore:end */\n  CountryListInstance.get = function get(isoCode) {\n    return new CountryContext(this._version, isoCode);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  CountryListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  CountryListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return CountryListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the CountryPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Voice.V1.DialingPermissionsContext.CountryPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {CountrySolution} solution - Path solution\n *\n * @returns CountryPage\n */\n/* jshint ignore:end */\nCountryPage = function CountryPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(CountryPage.prototype, Page.prototype);\nCountryPage.prototype.constructor = CountryPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of CountryInstance\n *\n * @function getInstance\n * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryPage#\n *\n * @param {CountryPayload} payload - Payload response from the API\n *\n * @returns CountryInstance\n */\n/* jshint ignore:end */\nCountryPage.prototype.getInstance = function getInstance(payload) {\n  return new CountryInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCountryPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nCountryPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the CountryContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Voice.V1.DialingPermissionsContext.CountryInstance\n *\n * @property {string} isoCode - The ISO country code\n * @property {string} name - The name of the country\n * @property {string} continent -\n *          The name of the continent in which the country is located\n * @property {string} countryCodes - The E.164 assigned country codes(s)\n * @property {boolean} lowRiskNumbersEnabled -\n *          Whether dialing to low-risk numbers is enabled\n * @property {boolean} highRiskSpecialNumbersEnabled -\n *          Whether dialing to high-risk special services numbers is enabled\n * @property {boolean} highRiskTollfraudNumbersEnabled -\n *          Whether dialing to high-risk toll fraud numbers is enabled, else `false`\n * @property {string} url - The absolute URL of this resource\n * @property {string} links - A list of URLs related to this resource\n *\n * @param {V1} version - Version of the resource\n * @param {CountryPayload} payload - The instance payload\n * @param {iso_country_code} isoCode - The ISO country code\n */\n/* jshint ignore:end */\nCountryInstance = function CountryInstance(version, payload, isoCode) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.isoCode = payload.iso_code; // jshint ignore:line\n  this.name = payload.name; // jshint ignore:line\n  this.continent = payload.continent; // jshint ignore:line\n  this.countryCodes = payload.country_codes; // jshint ignore:line\n  this.lowRiskNumbersEnabled = payload.low_risk_numbers_enabled; // jshint ignore:line\n  this.highRiskSpecialNumbersEnabled = payload.high_risk_special_numbers_enabled; // jshint ignore:line\n  this.highRiskTollfraudNumbersEnabled = payload.high_risk_tollfraud_numbers_enabled; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {isoCode: isoCode || this.isoCode, };\n};\n\nObject.defineProperty(CountryInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new CountryContext(this._version, this._solution.isoCode);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a CountryInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CountryInstance\n */\n/* jshint ignore:end */\nCountryInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the highriskSpecialPrefixes\n *\n * @function highriskSpecialPrefixes\n * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryInstance#\n *\n * @returns {Twilio.Voice.V1.DialingPermissionsContext.CountryContext.HighriskSpecialPrefixList}\n */\n/* jshint ignore:end */\nCountryInstance.prototype.highriskSpecialPrefixes = function\n    highriskSpecialPrefixes() {\n  return this._proxy.highriskSpecialPrefixes;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCountryInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nCountryInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the CountryContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Voice.V1.DialingPermissionsContext.CountryContext\n *\n * @property {Twilio.Voice.V1.DialingPermissionsContext.CountryContext.HighriskSpecialPrefixList} highriskSpecialPrefixes -\n *          highriskSpecialPrefixes resource\n *\n * @param {V1} version - Version of the resource\n * @param {iso_country_code} isoCode - The ISO country code\n */\n/* jshint ignore:end */\nCountryContext = function CountryContext(version, isoCode) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {isoCode: isoCode, };\n  this._uri = `/DialingPermissions/Countries/${isoCode}`;\n\n  // Dependents\n  this._highriskSpecialPrefixes = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a CountryInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CountryInstance\n */\n/* jshint ignore:end */\nCountryContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new CountryInstance(this._version, payload, this._solution.isoCode));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(CountryContext.prototype,\n  'highriskSpecialPrefixes', {\n    get: function() {\n      if (!this._highriskSpecialPrefixes) {\n        this._highriskSpecialPrefixes = new HighriskSpecialPrefixList(\n          this._version,\n          this._solution.isoCode\n        );\n      }\n      return this._highriskSpecialPrefixes;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCountryContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nCountryContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  CountryList: CountryList,\n  CountryPage: CountryPage,\n  CountryInstance: CountryInstance,\n  CountryContext: CountryContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}