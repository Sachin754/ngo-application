{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../base/Page'); /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../../base/values'); /* jshint ignore:line */\n\nvar UsageRecordList;\nvar UsageRecordPage;\nvar UsageRecordInstance;\n\n/* jshint ignore:start */\n/**\n * Initialize the UsageRecordList\n *\n * @constructor Twilio.Wireless.V1.SimContext.UsageRecordList\n *\n * @param {Twilio.Wireless.V1} version - Version of the resource\n * @param {string} simSid -\n *          The SID of the Sim resource that this Usage Record is for\n */\n/* jshint ignore:end */\nUsageRecordList = function UsageRecordList(version, simSid) {\n  /* jshint ignore:start */\n  /**\n   * @function usageRecords\n   * @memberof Twilio.Wireless.V1.SimContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Wireless.V1.SimContext.UsageRecordContext}\n   */\n  /* jshint ignore:end */\n  function UsageRecordListInstance(sid) {\n    return UsageRecordListInstance.get(sid);\n  }\n  UsageRecordListInstance._version = version;\n  // Path Solution\n  UsageRecordListInstance._solution = {\n    simSid: simSid\n  };\n  UsageRecordListInstance._uri = `/Sims/${simSid}/UsageRecords`;\n  /* jshint ignore:start */\n  /**\n   * Streams UsageRecordInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Wireless.V1.SimContext.UsageRecordList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.end] -\n   *          Only include usage that occurred on or before this date\n   * @param {Date} [opts.start] -\n   *          Only include usage that has occurred on or after this date\n   * @param {usage_record.granularity} [opts.granularity] -\n   *          The time-based grouping that results are aggregated by\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  UsageRecordListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists UsageRecordInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Wireless.V1.SimContext.UsageRecordList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.end] -\n   *          Only include usage that occurred on or before this date\n   * @param {Date} [opts.start] -\n   *          Only include usage that has occurred on or after this date\n   * @param {usage_record.granularity} [opts.granularity] -\n   *          The time-based grouping that results are aggregated by\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  UsageRecordListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of UsageRecordInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Wireless.V1.SimContext.UsageRecordList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.end] -\n   *          Only include usage that occurred on or before this date\n   * @param {Date} [opts.start] -\n   *          Only include usage that has occurred on or after this date\n   * @param {usage_record.granularity} [opts.granularity] -\n   *          The time-based grouping that results are aggregated by\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  UsageRecordListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'End': serialize.iso8601DateTime(_.get(opts, 'end')),\n      'Start': serialize.iso8601DateTime(_.get(opts, 'start')),\n      'Granularity': _.get(opts, 'granularity'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new UsageRecordPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of UsageRecordInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Wireless.V1.SimContext.UsageRecordList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  UsageRecordListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new UsageRecordPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Wireless.V1.SimContext.UsageRecordList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  UsageRecordListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  UsageRecordListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return UsageRecordListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the UsageRecordPage\n *\n * @constructor Twilio.Wireless.V1.SimContext.UsageRecordPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {UsageRecordSolution} solution - Path solution\n *\n * @returns UsageRecordPage\n */\n/* jshint ignore:end */\nUsageRecordPage = function UsageRecordPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(UsageRecordPage.prototype, Page.prototype);\nUsageRecordPage.prototype.constructor = UsageRecordPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of UsageRecordInstance\n *\n * @function getInstance\n * @memberof Twilio.Wireless.V1.SimContext.UsageRecordPage#\n *\n * @param {UsageRecordPayload} payload - Payload response from the API\n *\n * @returns UsageRecordInstance\n */\n/* jshint ignore:end */\nUsageRecordPage.prototype.getInstance = function getInstance(payload) {\n  return new UsageRecordInstance(this._version, payload, this._solution.simSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Wireless.V1.SimContext.UsageRecordPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nUsageRecordPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nUsageRecordPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the UsageRecordContext\n *\n * @constructor Twilio.Wireless.V1.SimContext.UsageRecordInstance\n *\n * @property {string} simSid -\n *          The SID of the Sim resource that this Usage Record is for\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {object} period - The time period for which the usage is reported\n * @property {object} commands -\n *          An object that describes the SIM's usage of Commands during the specified period\n * @property {object} data -\n *          An object that describes the SIM's data usage during the specified period\n *\n * @param {V1} version - Version of the resource\n * @param {UsageRecordPayload} payload - The instance payload\n * @param {sid_like} simSid -\n *          The SID of the Sim resource that this Usage Record is for\n */\n/* jshint ignore:end */\nUsageRecordInstance = function UsageRecordInstance(version, payload, simSid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.simSid = payload.sim_sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.period = payload.period; // jshint ignore:line\n  this.commands = payload.commands; // jshint ignore:line\n  this.data = payload.data; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    simSid: simSid\n  };\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Wireless.V1.SimContext.UsageRecordInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nUsageRecordInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nUsageRecordInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  UsageRecordList: UsageRecordList,\n  UsageRecordPage: UsageRecordPage,\n  UsageRecordInstance: UsageRecordInstance\n};","map":{"version":3,"names":["Q","require","_","util","Page","serialize","values","UsageRecordList","UsageRecordPage","UsageRecordInstance","version","simSid","UsageRecordListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","iso8601DateTime","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","sim_sid","accountSid","account_sid","period","commands","_context","undefined","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/wireless/v1/sim/usageRecord.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar UsageRecordList;\nvar UsageRecordPage;\nvar UsageRecordInstance;\n\n/* jshint ignore:start */\n/**\n * Initialize the UsageRecordList\n *\n * @constructor Twilio.Wireless.V1.SimContext.UsageRecordList\n *\n * @param {Twilio.Wireless.V1} version - Version of the resource\n * @param {string} simSid -\n *          The SID of the Sim resource that this Usage Record is for\n */\n/* jshint ignore:end */\nUsageRecordList = function UsageRecordList(version, simSid) {\n  /* jshint ignore:start */\n  /**\n   * @function usageRecords\n   * @memberof Twilio.Wireless.V1.SimContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Wireless.V1.SimContext.UsageRecordContext}\n   */\n  /* jshint ignore:end */\n  function UsageRecordListInstance(sid) {\n    return UsageRecordListInstance.get(sid);\n  }\n\n  UsageRecordListInstance._version = version;\n  // Path Solution\n  UsageRecordListInstance._solution = {simSid: simSid};\n  UsageRecordListInstance._uri = `/Sims/${simSid}/UsageRecords`;\n  /* jshint ignore:start */\n  /**\n   * Streams UsageRecordInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Wireless.V1.SimContext.UsageRecordList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.end] -\n   *          Only include usage that occurred on or before this date\n   * @param {Date} [opts.start] -\n   *          Only include usage that has occurred on or after this date\n   * @param {usage_record.granularity} [opts.granularity] -\n   *          The time-based grouping that results are aggregated by\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  UsageRecordListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists UsageRecordInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Wireless.V1.SimContext.UsageRecordList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.end] -\n   *          Only include usage that occurred on or before this date\n   * @param {Date} [opts.start] -\n   *          Only include usage that has occurred on or after this date\n   * @param {usage_record.granularity} [opts.granularity] -\n   *          The time-based grouping that results are aggregated by\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  UsageRecordListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of UsageRecordInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Wireless.V1.SimContext.UsageRecordList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.end] -\n   *          Only include usage that occurred on or before this date\n   * @param {Date} [opts.start] -\n   *          Only include usage that has occurred on or after this date\n   * @param {usage_record.granularity} [opts.granularity] -\n   *          The time-based grouping that results are aggregated by\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  UsageRecordListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'End': serialize.iso8601DateTime(_.get(opts, 'end')),\n      'Start': serialize.iso8601DateTime(_.get(opts, 'start')),\n      'Granularity': _.get(opts, 'granularity'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new UsageRecordPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of UsageRecordInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Wireless.V1.SimContext.UsageRecordList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  UsageRecordListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new UsageRecordPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Wireless.V1.SimContext.UsageRecordList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  UsageRecordListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  UsageRecordListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return UsageRecordListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the UsageRecordPage\n *\n * @constructor Twilio.Wireless.V1.SimContext.UsageRecordPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {UsageRecordSolution} solution - Path solution\n *\n * @returns UsageRecordPage\n */\n/* jshint ignore:end */\nUsageRecordPage = function UsageRecordPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(UsageRecordPage.prototype, Page.prototype);\nUsageRecordPage.prototype.constructor = UsageRecordPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of UsageRecordInstance\n *\n * @function getInstance\n * @memberof Twilio.Wireless.V1.SimContext.UsageRecordPage#\n *\n * @param {UsageRecordPayload} payload - Payload response from the API\n *\n * @returns UsageRecordInstance\n */\n/* jshint ignore:end */\nUsageRecordPage.prototype.getInstance = function getInstance(payload) {\n  return new UsageRecordInstance(this._version, payload, this._solution.simSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Wireless.V1.SimContext.UsageRecordPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nUsageRecordPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nUsageRecordPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the UsageRecordContext\n *\n * @constructor Twilio.Wireless.V1.SimContext.UsageRecordInstance\n *\n * @property {string} simSid -\n *          The SID of the Sim resource that this Usage Record is for\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {object} period - The time period for which the usage is reported\n * @property {object} commands -\n *          An object that describes the SIM's usage of Commands during the specified period\n * @property {object} data -\n *          An object that describes the SIM's data usage during the specified period\n *\n * @param {V1} version - Version of the resource\n * @param {UsageRecordPayload} payload - The instance payload\n * @param {sid_like} simSid -\n *          The SID of the Sim resource that this Usage Record is for\n */\n/* jshint ignore:end */\nUsageRecordInstance = function UsageRecordInstance(version, payload, simSid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.simSid = payload.sim_sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.period = payload.period; // jshint ignore:line\n  this.commands = payload.commands; // jshint ignore:line\n  this.data = payload.data; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {simSid: simSid, };\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Wireless.V1.SimContext.UsageRecordInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nUsageRecordInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nUsageRecordInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  UsageRecordList: UsageRecordList,\n  UsageRecordPage: UsageRecordPage,\n  UsageRecordInstance: UsageRecordInstance\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}