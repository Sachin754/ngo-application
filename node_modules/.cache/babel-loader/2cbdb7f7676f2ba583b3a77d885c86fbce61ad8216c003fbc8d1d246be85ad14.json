{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar ConnectionPolicyTargetList = require('./connectionPolicy/connectionPolicyTarget').ConnectionPolicyTargetList;\nvar Page = require('../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../base/deserialize'); /* jshint ignore:line */\nvar values = require('../../../base/values'); /* jshint ignore:line */\n\nvar ConnectionPolicyList;\nvar ConnectionPolicyPage;\nvar ConnectionPolicyInstance;\nvar ConnectionPolicyContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ConnectionPolicyList\n *\n * @constructor Twilio.Voice.V1.ConnectionPolicyList\n *\n * @param {Twilio.Voice.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nConnectionPolicyList = function ConnectionPolicyList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function connectionPolicies\n   * @memberof Twilio.Voice.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Voice.V1.ConnectionPolicyContext}\n   */\n  /* jshint ignore:end */\n  function ConnectionPolicyListInstance(sid) {\n    return ConnectionPolicyListInstance.get(sid);\n  }\n  ConnectionPolicyListInstance._version = version;\n  // Path Solution\n  ConnectionPolicyListInstance._solution = {};\n  ConnectionPolicyListInstance._uri = `/ConnectionPolicies`;\n  /* jshint ignore:start */\n  /**\n   * create a ConnectionPolicyInstance\n   *\n   * @function create\n   * @memberof Twilio.Voice.V1.ConnectionPolicyList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] - A string to describe the resource\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ConnectionPolicyInstance\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ConnectionPolicyInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ConnectionPolicyInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Voice.V1.ConnectionPolicyList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ConnectionPolicyInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Voice.V1.ConnectionPolicyList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ConnectionPolicyInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Voice.V1.ConnectionPolicyList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ConnectionPolicyPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ConnectionPolicyInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Voice.V1.ConnectionPolicyList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ConnectionPolicyPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a connection_policy\n   *\n   * @function get\n   * @memberof Twilio.Voice.V1.ConnectionPolicyList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Voice.V1.ConnectionPolicyContext}\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyListInstance.get = function get(sid) {\n    return new ConnectionPolicyContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Voice.V1.ConnectionPolicyList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  ConnectionPolicyListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return ConnectionPolicyListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ConnectionPolicyPage\n *\n * @constructor Twilio.Voice.V1.ConnectionPolicyPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ConnectionPolicySolution} solution - Path solution\n *\n * @returns ConnectionPolicyPage\n */\n/* jshint ignore:end */\nConnectionPolicyPage = function ConnectionPolicyPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(ConnectionPolicyPage.prototype, Page.prototype);\nConnectionPolicyPage.prototype.constructor = ConnectionPolicyPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ConnectionPolicyInstance\n *\n * @function getInstance\n * @memberof Twilio.Voice.V1.ConnectionPolicyPage#\n *\n * @param {ConnectionPolicyPayload} payload - Payload response from the API\n *\n * @returns ConnectionPolicyInstance\n */\n/* jshint ignore:end */\nConnectionPolicyPage.prototype.getInstance = function getInstance(payload) {\n  return new ConnectionPolicyInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.ConnectionPolicyPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConnectionPolicyPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nConnectionPolicyPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ConnectionPolicyContext\n *\n * @constructor Twilio.Voice.V1.ConnectionPolicyInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {ConnectionPolicyPayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nConnectionPolicyInstance = function ConnectionPolicyInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(ConnectionPolicyInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ConnectionPolicyContext(this._version, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ConnectionPolicyInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.ConnectionPolicyInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyInstance\n */\n/* jshint ignore:end */\nConnectionPolicyInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ConnectionPolicyInstance\n *\n * @function update\n * @memberof Twilio.Voice.V1.ConnectionPolicyInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyInstance\n */\n/* jshint ignore:end */\nConnectionPolicyInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a ConnectionPolicyInstance\n *\n * @function remove\n * @memberof Twilio.Voice.V1.ConnectionPolicyInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyInstance\n */\n/* jshint ignore:end */\nConnectionPolicyInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the targets\n *\n * @function targets\n * @memberof Twilio.Voice.V1.ConnectionPolicyInstance#\n *\n * @returns {Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList}\n */\n/* jshint ignore:end */\nConnectionPolicyInstance.prototype.targets = function targets() {\n  return this._proxy.targets;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.ConnectionPolicyInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConnectionPolicyInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nConnectionPolicyInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ConnectionPolicyContext\n *\n * @constructor Twilio.Voice.V1.ConnectionPolicyContext\n *\n * @property {Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList} targets -\n *          targets resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nConnectionPolicyContext = function ConnectionPolicyContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/ConnectionPolicies/${sid}`;\n\n  // Dependents\n  this._targets = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ConnectionPolicyInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyInstance\n */\n/* jshint ignore:end */\nConnectionPolicyContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ConnectionPolicyInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ConnectionPolicyInstance\n *\n * @function update\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyInstance\n */\n/* jshint ignore:end */\nConnectionPolicyContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ConnectionPolicyInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ConnectionPolicyInstance\n *\n * @function remove\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyInstance\n */\n/* jshint ignore:end */\nConnectionPolicyContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(ConnectionPolicyContext.prototype, 'targets', {\n  get: function () {\n    if (!this._targets) {\n      this._targets = new ConnectionPolicyTargetList(this._version, this._solution.sid);\n    }\n    return this._targets;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConnectionPolicyContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nConnectionPolicyContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  ConnectionPolicyList: ConnectionPolicyList,\n  ConnectionPolicyPage: ConnectionPolicyPage,\n  ConnectionPolicyInstance: ConnectionPolicyInstance,\n  ConnectionPolicyContext: ConnectionPolicyContext\n};","map":{"version":3,"names":["Q","require","_","util","ConnectionPolicyTargetList","Page","deserialize","values","ConnectionPolicyList","ConnectionPolicyPage","ConnectionPolicyInstance","ConnectionPolicyContext","version","ConnectionPolicyListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isFunction","deferred","defer","data","of","promise","uri","method","then","payload","resolve","bind","catch","error","reject","nodeify","each","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","friendlyName","friendly_name","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","targets","_targets","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/voice/v1/connectionPolicy.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar ConnectionPolicyTargetList = require(\n    './connectionPolicy/connectionPolicyTarget').ConnectionPolicyTargetList;\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar ConnectionPolicyList;\nvar ConnectionPolicyPage;\nvar ConnectionPolicyInstance;\nvar ConnectionPolicyContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ConnectionPolicyList\n *\n * @constructor Twilio.Voice.V1.ConnectionPolicyList\n *\n * @param {Twilio.Voice.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nConnectionPolicyList = function ConnectionPolicyList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function connectionPolicies\n   * @memberof Twilio.Voice.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Voice.V1.ConnectionPolicyContext}\n   */\n  /* jshint ignore:end */\n  function ConnectionPolicyListInstance(sid) {\n    return ConnectionPolicyListInstance.get(sid);\n  }\n\n  ConnectionPolicyListInstance._version = version;\n  // Path Solution\n  ConnectionPolicyListInstance._solution = {};\n  ConnectionPolicyListInstance._uri = `/ConnectionPolicies`;\n  /* jshint ignore:start */\n  /**\n   * create a ConnectionPolicyInstance\n   *\n   * @function create\n   * @memberof Twilio.Voice.V1.ConnectionPolicyList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] - A string to describe the resource\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ConnectionPolicyInstance\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({'FriendlyName': _.get(opts, 'friendlyName')});\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ConnectionPolicyInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ConnectionPolicyInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Voice.V1.ConnectionPolicyList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ConnectionPolicyInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Voice.V1.ConnectionPolicyList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ConnectionPolicyInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Voice.V1.ConnectionPolicyList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ConnectionPolicyPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ConnectionPolicyInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Voice.V1.ConnectionPolicyList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ConnectionPolicyPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a connection_policy\n   *\n   * @function get\n   * @memberof Twilio.Voice.V1.ConnectionPolicyList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Voice.V1.ConnectionPolicyContext}\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyListInstance.get = function get(sid) {\n    return new ConnectionPolicyContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Voice.V1.ConnectionPolicyList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ConnectionPolicyListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ConnectionPolicyListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ConnectionPolicyPage\n *\n * @constructor Twilio.Voice.V1.ConnectionPolicyPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ConnectionPolicySolution} solution - Path solution\n *\n * @returns ConnectionPolicyPage\n */\n/* jshint ignore:end */\nConnectionPolicyPage = function ConnectionPolicyPage(version, response,\n                                                      solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ConnectionPolicyPage.prototype, Page.prototype);\nConnectionPolicyPage.prototype.constructor = ConnectionPolicyPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ConnectionPolicyInstance\n *\n * @function getInstance\n * @memberof Twilio.Voice.V1.ConnectionPolicyPage#\n *\n * @param {ConnectionPolicyPayload} payload - Payload response from the API\n *\n * @returns ConnectionPolicyInstance\n */\n/* jshint ignore:end */\nConnectionPolicyPage.prototype.getInstance = function getInstance(payload) {\n  return new ConnectionPolicyInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.ConnectionPolicyPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConnectionPolicyPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nConnectionPolicyPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ConnectionPolicyContext\n *\n * @constructor Twilio.Voice.V1.ConnectionPolicyInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {ConnectionPolicyPayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nConnectionPolicyInstance = function ConnectionPolicyInstance(version, payload,\n    sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(ConnectionPolicyInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new ConnectionPolicyContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ConnectionPolicyInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.ConnectionPolicyInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyInstance\n */\n/* jshint ignore:end */\nConnectionPolicyInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ConnectionPolicyInstance\n *\n * @function update\n * @memberof Twilio.Voice.V1.ConnectionPolicyInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyInstance\n */\n/* jshint ignore:end */\nConnectionPolicyInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a ConnectionPolicyInstance\n *\n * @function remove\n * @memberof Twilio.Voice.V1.ConnectionPolicyInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyInstance\n */\n/* jshint ignore:end */\nConnectionPolicyInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the targets\n *\n * @function targets\n * @memberof Twilio.Voice.V1.ConnectionPolicyInstance#\n *\n * @returns {Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList}\n */\n/* jshint ignore:end */\nConnectionPolicyInstance.prototype.targets = function targets() {\n  return this._proxy.targets;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.ConnectionPolicyInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConnectionPolicyInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nConnectionPolicyInstance.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ConnectionPolicyContext\n *\n * @constructor Twilio.Voice.V1.ConnectionPolicyContext\n *\n * @property {Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList} targets -\n *          targets resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nConnectionPolicyContext = function ConnectionPolicyContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/ConnectionPolicies/${sid}`;\n\n  // Dependents\n  this._targets = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ConnectionPolicyInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyInstance\n */\n/* jshint ignore:end */\nConnectionPolicyContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ConnectionPolicyInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ConnectionPolicyInstance\n *\n * @function update\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyInstance\n */\n/* jshint ignore:end */\nConnectionPolicyContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({'FriendlyName': _.get(opts, 'friendlyName')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ConnectionPolicyInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ConnectionPolicyInstance\n *\n * @function remove\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyInstance\n */\n/* jshint ignore:end */\nConnectionPolicyContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ConnectionPolicyContext.prototype,\n  'targets', {\n    get: function() {\n      if (!this._targets) {\n        this._targets = new ConnectionPolicyTargetList(this._version, this._solution.sid);\n      }\n      return this._targets;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConnectionPolicyContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nConnectionPolicyContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ConnectionPolicyList: ConnectionPolicyList,\n  ConnectionPolicyPage: ConnectionPolicyPage,\n  ConnectionPolicyInstance: ConnectionPolicyInstance,\n  ConnectionPolicyContext: ConnectionPolicyContext\n};\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAE;AACvB,IAAIC,CAAC,GAAGD,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAE;AAC5B,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC,CAAC,CAAE;AAC7B,IAAIG,0BAA0B,GAAGH,OAAO,CACpC,2CAA2C,CAAC,CAACG,0BAA0B;AAC3E,IAAIC,IAAI,GAAGJ,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAE;AAC3C,IAAIK,WAAW,GAAGL,OAAO,CACrB,2BAA2B,CAAC,CAAC,CAAE;AACnC,IAAIM,MAAM,GAAGN,OAAO,CAAC,sBAAsB,CAAC,CAAC,CAAE;;AAE/C,IAAIO,oBAAoB;AACxB,IAAIC,oBAAoB;AACxB,IAAIC,wBAAwB;AAC5B,IAAIC,uBAAuB;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,oBAAoB,GAAG,SAASA,oBAAoBA,CAACI,OAAO,EAAE;EAC5D;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACA,SAASC,4BAA4BA,CAACC,GAAG,EAAE;IACzC,OAAOD,4BAA4B,CAACE,GAAG,CAACD,GAAG,CAAC;EAC9C;EAEAD,4BAA4B,CAACG,QAAQ,GAAGJ,OAAO;EAC/C;EACAC,4BAA4B,CAACI,SAAS,GAAG,CAAC,CAAC;EAC3CJ,4BAA4B,CAACK,IAAI,GAAI,qBAAoB;EACzD;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAL,4BAA4B,CAACM,MAAM,GAAG,SAASA,MAAMA,CAACC,IAAI,EAAEC,QAAQ,EAAE;IACpE,IAAInB,CAAC,CAACoB,UAAU,CAACF,IAAI,CAAC,EAAE;MACtBC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IAEjB,IAAIG,QAAQ,GAAGvB,CAAC,CAACwB,KAAK,CAAC,CAAC;IACxB,IAAIC,IAAI,GAAGlB,MAAM,CAACmB,EAAE,CAAC;MAAC,cAAc,EAAExB,CAAC,CAACa,GAAG,CAACK,IAAI,EAAE,cAAc;IAAC,CAAC,CAAC;IAEnE,IAAIO,OAAO,GAAG,IAAI,CAACX,QAAQ,CAACG,MAAM,CAAC;MAACS,GAAG,EAAE,IAAI,CAACV,IAAI;MAAEW,MAAM,EAAE,MAAM;MAAEJ,IAAI,EAAEA;IAAI,CAAC,CAAC;IAEhFE,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;MACvCR,QAAQ,CAACS,OAAO,CAAC,IAAItB,wBAAwB,CAAC,IAAI,CAACM,QAAQ,EAAEe,OAAO,EAAE,IAAI,CAACd,SAAS,CAACH,GAAG,CAAC,CAAC;IAC5F,CAAC,CAACmB,IAAI,CAAC,IAAI,CAAC,CAAC;IAEbN,OAAO,CAACO,KAAK,CAAC,UAASC,KAAK,EAAE;MAC5BZ,QAAQ,CAACa,MAAM,CAACD,KAAK,CAAC;IACxB,CAAC,CAAC;IAEF,IAAIjC,CAAC,CAACoB,UAAU,CAACD,QAAQ,CAAC,EAAE;MAC1BE,QAAQ,CAACI,OAAO,CAACU,OAAO,CAAChB,QAAQ,CAAC;IACpC;IAEA,OAAOE,QAAQ,CAACI,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAd,4BAA4B,CAACyB,IAAI,GAAG,SAASA,IAAIA,CAAClB,IAAI,EAAEC,QAAQ,EAAE;IAChE,IAAInB,CAAC,CAACoB,UAAU,CAACF,IAAI,CAAC,EAAE;MACtBC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IACjB,IAAIA,IAAI,CAACC,QAAQ,EAAE;MACjBA,QAAQ,GAAGD,IAAI,CAACC,QAAQ;IAC1B;IACA,IAAInB,CAAC,CAACqC,WAAW,CAAClB,QAAQ,CAAC,EAAE;MAC3B,MAAM,IAAImB,KAAK,CAAC,oCAAoC,CAAC;IACvD;IAEA,IAAIC,IAAI,GAAG,KAAK;IAChB,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAIC,eAAe,GAAG,CAAC;IACvB,IAAIC,MAAM,GAAG,IAAI,CAAC5B,QAAQ,CAAC6B,UAAU,CAAC;MACpCC,KAAK,EAAE1B,IAAI,CAAC0B,KAAK;MACjBC,QAAQ,EAAE3B,IAAI,CAAC2B;IACjB,CAAC,CAAC;IAEF,SAASC,UAAUA,CAACb,KAAK,EAAE;MACzBM,IAAI,GAAG,IAAI;MACX,IAAIvC,CAAC,CAACoB,UAAU,CAACF,IAAI,CAACqB,IAAI,CAAC,EAAE;QAC3BrB,IAAI,CAACqB,IAAI,CAACN,KAAK,CAAC;MAClB;IACF;IAEA,SAASc,aAAaA,CAACC,EAAE,EAAE;MACzB,IAAIvB,OAAO,GAAGuB,EAAE,CAAC,CAAC;MAClB,IAAIhD,CAAC,CAACqC,WAAW,CAACZ,OAAO,CAAC,EAAE;QAC1BqB,UAAU,CAAC,CAAC;QACZ;MACF;MAEArB,OAAO,CAACG,IAAI,CAAC,UAASqB,IAAI,EAAE;QAC1BjD,CAAC,CAACoC,IAAI,CAACa,IAAI,CAACC,SAAS,EAAE,UAASC,QAAQ,EAAE;UACxC,IAAIZ,IAAI,IAAK,CAACvC,CAAC,CAACqC,WAAW,CAACnB,IAAI,CAAC0B,KAAK,CAAC,IAAIH,eAAe,IAAIvB,IAAI,CAAC0B,KAAM,EAAE;YACzEL,IAAI,GAAG,IAAI;YACX,OAAO,KAAK;UACd;UAEAE,eAAe,EAAE;UACjBtB,QAAQ,CAACgC,QAAQ,EAAEL,UAAU,CAAC;QAChC,CAAC,CAAC;QAEF,IAAI,CAACP,IAAI,EAAE;UACTC,WAAW,EAAE;UACbO,aAAa,CAAC/C,CAAC,CAAC+B,IAAI,CAACkB,IAAI,CAACG,QAAQ,EAAEH,IAAI,CAAC,CAAC;QAC5C;MACF,CAAC,CAAC;MAEFxB,OAAO,CAACO,KAAK,CAACc,UAAU,CAAC;IAC3B;IAEAC,aAAa,CAAC/C,CAAC,CAAC+B,IAAI,CAAC,IAAI,CAACkB,IAAI,EAAE,IAAI,EAAEjD,CAAC,CAACqD,KAAK,CAACnC,IAAI,EAAEwB,MAAM,CAAC,CAAC,CAAC;EAC/D,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACA/B,4BAA4B,CAAC2C,IAAI,GAAG,SAASA,IAAIA,CAACpC,IAAI,EAAEC,QAAQ,EAAE;IAChE,IAAInB,CAAC,CAACoB,UAAU,CAACF,IAAI,CAAC,EAAE;MACtBC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IACjB,IAAIG,QAAQ,GAAGvB,CAAC,CAACwB,KAAK,CAAC,CAAC;IACxB,IAAIiC,YAAY,GAAG,EAAE;IACrBrC,IAAI,CAACC,QAAQ,GAAG,UAASqC,QAAQ,EAAEjB,IAAI,EAAE;MACvCgB,YAAY,CAACE,IAAI,CAACD,QAAQ,CAAC;MAE3B,IAAI,CAACxD,CAAC,CAACqC,WAAW,CAACnB,IAAI,CAAC0B,KAAK,CAAC,IAAIW,YAAY,CAACG,MAAM,KAAKxC,IAAI,CAAC0B,KAAK,EAAE;QACpEL,IAAI,CAAC,CAAC;MACR;IACF,CAAC;IAEDrB,IAAI,CAACqB,IAAI,GAAG,UAASN,KAAK,EAAE;MAC1B,IAAIjC,CAAC,CAACqC,WAAW,CAACJ,KAAK,CAAC,EAAE;QACxBZ,QAAQ,CAACS,OAAO,CAACyB,YAAY,CAAC;MAChC,CAAC,MAAM;QACLlC,QAAQ,CAACa,MAAM,CAACD,KAAK,CAAC;MACxB;IACF,CAAC;IAED,IAAIjC,CAAC,CAACoB,UAAU,CAACD,QAAQ,CAAC,EAAE;MAC1BE,QAAQ,CAACI,OAAO,CAACU,OAAO,CAAChB,QAAQ,CAAC;IACpC;IAEA,IAAI,CAACiB,IAAI,CAAClB,IAAI,CAAC;IACf,OAAOG,QAAQ,CAACI,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAd,4BAA4B,CAACsC,IAAI,GAAG,SAASA,IAAIA,CAAC/B,IAAI,EAAEC,QAAQ,EAAE;IAChE,IAAInB,CAAC,CAACoB,UAAU,CAACF,IAAI,CAAC,EAAE;MACtBC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IAEjB,IAAIG,QAAQ,GAAGvB,CAAC,CAACwB,KAAK,CAAC,CAAC;IACxB,IAAIC,IAAI,GAAGlB,MAAM,CAACmB,EAAE,CAAC;MACnB,WAAW,EAAEN,IAAI,CAACyC,SAAS;MAC3B,MAAM,EAAEzC,IAAI,CAAC0C,UAAU;MACvB,UAAU,EAAE1C,IAAI,CAAC2B;IACnB,CAAC,CAAC;IAEF,IAAIpB,OAAO,GAAG,IAAI,CAACX,QAAQ,CAACmC,IAAI,CAAC;MAACvB,GAAG,EAAE,IAAI,CAACV,IAAI;MAAEW,MAAM,EAAE,KAAK;MAAEkC,MAAM,EAAEtC;IAAI,CAAC,CAAC;IAE/EE,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;MACvCR,QAAQ,CAACS,OAAO,CAAC,IAAIvB,oBAAoB,CAAC,IAAI,CAACO,QAAQ,EAAEe,OAAO,EAAE,IAAI,CAACd,SAAS,CAAC,CAAC;IACpF,CAAC,CAACgB,IAAI,CAAC,IAAI,CAAC,CAAC;IAEbN,OAAO,CAACO,KAAK,CAAC,UAASC,KAAK,EAAE;MAC5BZ,QAAQ,CAACa,MAAM,CAACD,KAAK,CAAC;IACxB,CAAC,CAAC;IAEF,IAAIjC,CAAC,CAACoB,UAAU,CAACD,QAAQ,CAAC,EAAE;MAC1BE,QAAQ,CAACI,OAAO,CAACU,OAAO,CAAChB,QAAQ,CAAC;IACpC;IAEA,OAAOE,QAAQ,CAACI,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAd,4BAA4B,CAACmD,OAAO,GAAG,SAASA,OAAOA,CAACC,SAAS,EAAE5C,QAAQ,EAAE;IAC3E,IAAIE,QAAQ,GAAGvB,CAAC,CAACwB,KAAK,CAAC,CAAC;IAExB,IAAIG,OAAO,GAAG,IAAI,CAACX,QAAQ,CAACkD,OAAO,CAACC,MAAM,CAACC,OAAO,CAAC;MAACvC,MAAM,EAAE,KAAK;MAAED,GAAG,EAAEqC;IAAS,CAAC,CAAC;IAEnFtC,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;MACvCR,QAAQ,CAACS,OAAO,CAAC,IAAIvB,oBAAoB,CAAC,IAAI,CAACO,QAAQ,EAAEe,OAAO,EAAE,IAAI,CAACd,SAAS,CAAC,CAAC;IACpF,CAAC,CAACgB,IAAI,CAAC,IAAI,CAAC,CAAC;IAEbN,OAAO,CAACO,KAAK,CAAC,UAASC,KAAK,EAAE;MAC5BZ,QAAQ,CAACa,MAAM,CAACD,KAAK,CAAC;IACxB,CAAC,CAAC;IAEF,IAAIjC,CAAC,CAACoB,UAAU,CAACD,QAAQ,CAAC,EAAE;MAC1BE,QAAQ,CAACI,OAAO,CAACU,OAAO,CAAChB,QAAQ,CAAC;IACpC;IAEA,OAAOE,QAAQ,CAACI,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAd,4BAA4B,CAACE,GAAG,GAAG,SAASA,GAAGA,CAACD,GAAG,EAAE;IACnD,OAAO,IAAIH,uBAAuB,CAAC,IAAI,CAACK,QAAQ,EAAEF,GAAG,CAAC;EACxD,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAD,4BAA4B,CAACwD,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;IACtD,OAAO,IAAI,CAACpD,SAAS;EACvB,CAAC;EAEDJ,4BAA4B,CAACV,IAAI,CAACmE,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EACtEC,OAAO,EAAE;IACX,OAAOtE,IAAI,CAACmE,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;EAC7C,CAAC;EAED,OAAO5D,4BAA4B;AACrC,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,oBAAoB,GAAG,SAASA,oBAAoBA,CAACG,OAAO,EAAE8D,QAAQ,EAChBC,QAAQ,EAAE;EAC9D;EACA,IAAI,CAAC1D,SAAS,GAAG0D,QAAQ;EAEzBtE,IAAI,CAACuE,SAAS,CAACC,WAAW,CAACC,IAAI,CAAC,IAAI,EAAElE,OAAO,EAAE8D,QAAQ,EAAE,IAAI,CAACzD,SAAS,CAAC;AAC1E,CAAC;AAEDf,CAAC,CAAC6E,MAAM,CAACtE,oBAAoB,CAACmE,SAAS,EAAEvE,IAAI,CAACuE,SAAS,CAAC;AACxDnE,oBAAoB,CAACmE,SAAS,CAACC,WAAW,GAAGpE,oBAAoB;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,oBAAoB,CAACmE,SAAS,CAACI,WAAW,GAAG,SAASA,WAAWA,CAACjD,OAAO,EAAE;EACzE,OAAO,IAAIrB,wBAAwB,CAAC,IAAI,CAACM,QAAQ,EAAEe,OAAO,CAAC;AAC7D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtB,oBAAoB,CAACmE,SAAS,CAACP,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EACxD,IAAIY,KAAK,GAAG,CAAC,CAAC;EACd/E,CAAC,CAACgF,MAAM,CAAC,IAAI,EAAE,UAASC,KAAK,EAAEC,GAAG,EAAE;IAClC,IAAI,CAAClF,CAAC,CAACmF,UAAU,CAACD,GAAG,EAAE,GAAG,CAAC,IAAI,CAAElF,CAAC,CAACoB,UAAU,CAAC6D,KAAK,CAAC,EAAE;MACpDF,KAAK,CAACG,GAAG,CAAC,GAAGD,KAAK;IACpB;EACF,CAAC,CAAC;EACF,OAAOF,KAAK;AACd,CAAC;AAEDxE,oBAAoB,CAACmE,SAAS,CAACzE,IAAI,CAACmE,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EACxEC,OAAO,EAAE;EACX,OAAOtE,IAAI,CAACmE,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;AAC7C,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA/D,wBAAwB,GAAG,SAASA,wBAAwBA,CAACE,OAAO,EAAEmB,OAAO,EACzEjB,GAAG,EAAE;EACP,IAAI,CAACE,QAAQ,GAAGJ,OAAO;;EAEvB;EACA,IAAI,CAAC0E,UAAU,GAAGvD,OAAO,CAACwD,WAAW,CAAC,CAAC;EACvC,IAAI,CAACzE,GAAG,GAAGiB,OAAO,CAACjB,GAAG,CAAC,CAAC;EACxB,IAAI,CAAC0E,YAAY,GAAGzD,OAAO,CAAC0D,aAAa,CAAC,CAAC;EAC3C,IAAI,CAACC,WAAW,GAAGpF,WAAW,CAACqF,eAAe,CAAC5D,OAAO,CAAC6D,YAAY,CAAC,CAAC,CAAC;EACtE,IAAI,CAACC,WAAW,GAAGvF,WAAW,CAACqF,eAAe,CAAC5D,OAAO,CAAC+D,YAAY,CAAC,CAAC,CAAC;EACtE,IAAI,CAACC,GAAG,GAAGhE,OAAO,CAACgE,GAAG,CAAC,CAAC;EACxB,IAAI,CAACC,KAAK,GAAGjE,OAAO,CAACiE,KAAK,CAAC,CAAC;;EAE5B;EACA,IAAI,CAACC,QAAQ,GAAGC,SAAS;EACzB,IAAI,CAACjF,SAAS,GAAG;IAACH,GAAG,EAAEA,GAAG,IAAI,IAAI,CAACA;EAAK,CAAC;AAC3C,CAAC;AAEDqF,MAAM,CAACC,cAAc,CAAC1F,wBAAwB,CAACkE,SAAS,EACtD,QAAQ,EAAE;EACR7D,GAAG,EAAE,SAAAA,CAAA,EAAW;IACd,IAAI,CAAC,IAAI,CAACkF,QAAQ,EAAE;MAClB,IAAI,CAACA,QAAQ,GAAG,IAAItF,uBAAuB,CAAC,IAAI,CAACK,QAAQ,EAAE,IAAI,CAACC,SAAS,CAACH,GAAG,CAAC;IAChF;IAEA,OAAO,IAAI,CAACmF,QAAQ;EACtB;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAvF,wBAAwB,CAACkE,SAAS,CAACyB,KAAK,GAAG,SAASA,KAAKA,CAAChF,QAAQ,EAAE;EAClE,OAAO,IAAI,CAACiF,MAAM,CAACD,KAAK,CAAChF,QAAQ,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,wBAAwB,CAACkE,SAAS,CAAC2B,MAAM,GAAG,SAASA,MAAMA,CAACnF,IAAI,EAAEC,QAAQ,EAAE;EAC1E,OAAO,IAAI,CAACiF,MAAM,CAACC,MAAM,CAACnF,IAAI,EAAEC,QAAQ,CAAC;AAC3C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,wBAAwB,CAACkE,SAAS,CAAC4B,MAAM,GAAG,SAASA,MAAMA,CAACnF,QAAQ,EAAE;EACpE,OAAO,IAAI,CAACiF,MAAM,CAACE,MAAM,CAACnF,QAAQ,CAAC;AACrC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,wBAAwB,CAACkE,SAAS,CAAC6B,OAAO,GAAG,SAASA,OAAOA,CAAA,EAAG;EAC9D,OAAO,IAAI,CAACH,MAAM,CAACG,OAAO;AAC5B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA/F,wBAAwB,CAACkE,SAAS,CAACP,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EAC5D,IAAIY,KAAK,GAAG,CAAC,CAAC;EACd/E,CAAC,CAACgF,MAAM,CAAC,IAAI,EAAE,UAASC,KAAK,EAAEC,GAAG,EAAE;IAClC,IAAI,CAAClF,CAAC,CAACmF,UAAU,CAACD,GAAG,EAAE,GAAG,CAAC,IAAI,CAAElF,CAAC,CAACoB,UAAU,CAAC6D,KAAK,CAAC,EAAE;MACpDF,KAAK,CAACG,GAAG,CAAC,GAAGD,KAAK;IACpB;EACF,CAAC,CAAC;EACF,OAAOF,KAAK;AACd,CAAC;AAEDvE,wBAAwB,CAACkE,SAAS,CAACzE,IAAI,CAACmE,OAAO,CAACC,MAAM,CAAC,GAAG,SACtDD,OAAOA,CAACE,KAAK,EAAEC,OAAO,EAAE;EAC1B,OAAOtE,IAAI,CAACmE,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;AAC7C,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA9D,uBAAuB,GAAG,SAASA,uBAAuBA,CAACC,OAAO,EAAEE,GAAG,EAAE;EACvE,IAAI,CAACE,QAAQ,GAAGJ,OAAO;;EAEvB;EACA,IAAI,CAACK,SAAS,GAAG;IAACH,GAAG,EAAEA;EAAK,CAAC;EAC7B,IAAI,CAACI,IAAI,GAAI,uBAAsBJ,GAAI,EAAC;;EAExC;EACA,IAAI,CAAC4F,QAAQ,GAAGR,SAAS;AAC3B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAvF,uBAAuB,CAACiE,SAAS,CAACyB,KAAK,GAAG,SAASA,KAAKA,CAAChF,QAAQ,EAAE;EACjE,IAAIE,QAAQ,GAAGvB,CAAC,CAACwB,KAAK,CAAC,CAAC;EACxB,IAAIG,OAAO,GAAG,IAAI,CAACX,QAAQ,CAACqF,KAAK,CAAC;IAACzE,GAAG,EAAE,IAAI,CAACV,IAAI;IAAEW,MAAM,EAAE;EAAK,CAAC,CAAC;EAElEF,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;IACvCR,QAAQ,CAACS,OAAO,CAAC,IAAItB,wBAAwB,CAAC,IAAI,CAACM,QAAQ,EAAEe,OAAO,EAAE,IAAI,CAACd,SAAS,CAACH,GAAG,CAAC,CAAC;EAC5F,CAAC,CAACmB,IAAI,CAAC,IAAI,CAAC,CAAC;EAEbN,OAAO,CAACO,KAAK,CAAC,UAASC,KAAK,EAAE;IAC5BZ,QAAQ,CAACa,MAAM,CAACD,KAAK,CAAC;EACxB,CAAC,CAAC;EAEF,IAAIjC,CAAC,CAACoB,UAAU,CAACD,QAAQ,CAAC,EAAE;IAC1BE,QAAQ,CAACI,OAAO,CAACU,OAAO,CAAChB,QAAQ,CAAC;EACpC;EAEA,OAAOE,QAAQ,CAACI,OAAO;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAhB,uBAAuB,CAACiE,SAAS,CAAC2B,MAAM,GAAG,SAASA,MAAMA,CAACnF,IAAI,EAAEC,QAAQ,EAAE;EACzE,IAAInB,CAAC,CAACoB,UAAU,CAACF,IAAI,CAAC,EAAE;IACtBC,QAAQ,GAAGD,IAAI;IACfA,IAAI,GAAG,CAAC,CAAC;EACX;EACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;EAEjB,IAAIG,QAAQ,GAAGvB,CAAC,CAACwB,KAAK,CAAC,CAAC;EACxB,IAAIC,IAAI,GAAGlB,MAAM,CAACmB,EAAE,CAAC;IAAC,cAAc,EAAExB,CAAC,CAACa,GAAG,CAACK,IAAI,EAAE,cAAc;EAAC,CAAC,CAAC;EAEnE,IAAIO,OAAO,GAAG,IAAI,CAACX,QAAQ,CAACuF,MAAM,CAAC;IAAC3E,GAAG,EAAE,IAAI,CAACV,IAAI;IAAEW,MAAM,EAAE,MAAM;IAAEJ,IAAI,EAAEA;EAAI,CAAC,CAAC;EAEhFE,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;IACvCR,QAAQ,CAACS,OAAO,CAAC,IAAItB,wBAAwB,CAAC,IAAI,CAACM,QAAQ,EAAEe,OAAO,EAAE,IAAI,CAACd,SAAS,CAACH,GAAG,CAAC,CAAC;EAC5F,CAAC,CAACmB,IAAI,CAAC,IAAI,CAAC,CAAC;EAEbN,OAAO,CAACO,KAAK,CAAC,UAASC,KAAK,EAAE;IAC5BZ,QAAQ,CAACa,MAAM,CAACD,KAAK,CAAC;EACxB,CAAC,CAAC;EAEF,IAAIjC,CAAC,CAACoB,UAAU,CAACD,QAAQ,CAAC,EAAE;IAC1BE,QAAQ,CAACI,OAAO,CAACU,OAAO,CAAChB,QAAQ,CAAC;EACpC;EAEA,OAAOE,QAAQ,CAACI,OAAO;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAhB,uBAAuB,CAACiE,SAAS,CAAC4B,MAAM,GAAG,SAASA,MAAMA,CAACnF,QAAQ,EAAE;EACnE,IAAIE,QAAQ,GAAGvB,CAAC,CAACwB,KAAK,CAAC,CAAC;EACxB,IAAIG,OAAO,GAAG,IAAI,CAACX,QAAQ,CAACwF,MAAM,CAAC;IAAC5E,GAAG,EAAE,IAAI,CAACV,IAAI;IAAEW,MAAM,EAAE;EAAQ,CAAC,CAAC;EAEtEF,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;IACvCR,QAAQ,CAACS,OAAO,CAACD,OAAO,CAAC;EAC3B,CAAC,CAACE,IAAI,CAAC,IAAI,CAAC,CAAC;EAEbN,OAAO,CAACO,KAAK,CAAC,UAASC,KAAK,EAAE;IAC5BZ,QAAQ,CAACa,MAAM,CAACD,KAAK,CAAC;EACxB,CAAC,CAAC;EAEF,IAAIjC,CAAC,CAACoB,UAAU,CAACD,QAAQ,CAAC,EAAE;IAC1BE,QAAQ,CAACI,OAAO,CAACU,OAAO,CAAChB,QAAQ,CAAC;EACpC;EAEA,OAAOE,QAAQ,CAACI,OAAO;AACzB,CAAC;AAEDwE,MAAM,CAACC,cAAc,CAACzF,uBAAuB,CAACiE,SAAS,EACrD,SAAS,EAAE;EACT7D,GAAG,EAAE,SAAAA,CAAA,EAAW;IACd,IAAI,CAAC,IAAI,CAAC2F,QAAQ,EAAE;MAClB,IAAI,CAACA,QAAQ,GAAG,IAAItG,0BAA0B,CAAC,IAAI,CAACY,QAAQ,EAAE,IAAI,CAACC,SAAS,CAACH,GAAG,CAAC;IACnF;IACA,OAAO,IAAI,CAAC4F,QAAQ;EACtB;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA/F,uBAAuB,CAACiE,SAAS,CAACP,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EAC3D,OAAO,IAAI,CAACpD,SAAS;AACvB,CAAC;AAEDN,uBAAuB,CAACiE,SAAS,CAACzE,IAAI,CAACmE,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EAC3EC,OAAO,EAAE;EACX,OAAOtE,IAAI,CAACmE,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;AAC7C,CAAC;AAEDkC,MAAM,CAACC,OAAO,GAAG;EACfpG,oBAAoB,EAAEA,oBAAoB;EAC1CC,oBAAoB,EAAEA,oBAAoB;EAC1CC,wBAAwB,EAAEA,wBAAwB;EAClDC,uBAAuB,EAAEA;AAC3B,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}