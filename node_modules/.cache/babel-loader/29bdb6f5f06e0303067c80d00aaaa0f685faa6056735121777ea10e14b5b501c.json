{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../base/Page'); /* jshint ignore:line */\nvar TaskQueueCumulativeStatisticsList = require('./taskQueue/taskQueueCumulativeStatistics').TaskQueueCumulativeStatisticsList;\nvar TaskQueueRealTimeStatisticsList = require('./taskQueue/taskQueueRealTimeStatistics').TaskQueueRealTimeStatisticsList;\nvar TaskQueueStatisticsList = require('./taskQueue/taskQueueStatistics').TaskQueueStatisticsList;\nvar TaskQueuesStatisticsList = require('./taskQueue/taskQueuesStatistics').TaskQueuesStatisticsList;\nvar deserialize = require('../../../../base/deserialize'); /* jshint ignore:line */\nvar values = require('../../../../base/values'); /* jshint ignore:line */\n\nvar TaskQueueList;\nvar TaskQueuePage;\nvar TaskQueueInstance;\nvar TaskQueueContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskQueueList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid -\n *          The SID of the Workspace that contains the TaskQueue\n */\n/* jshint ignore:end */\nTaskQueueList = function TaskQueueList(version, workspaceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function taskQueues\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext}\n   */\n  /* jshint ignore:end */\n  function TaskQueueListInstance(sid) {\n    return TaskQueueListInstance.get(sid);\n  }\n  TaskQueueListInstance._version = version;\n  // Path Solution\n  TaskQueueListInstance._solution = {\n    workspaceSid: workspaceSid\n  };\n  TaskQueueListInstance._uri = `/Workspaces/${workspaceSid}/TaskQueues`;\n\n  // Components\n  TaskQueueListInstance._statistics = undefined;\n\n  /* jshint ignore:start */\n  /**\n   * Streams TaskQueueInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the TaskQueue resources to read\n   * @param {string} [opts.evaluateWorkerAttributes] -\n   *          The attributes of the Workers to read\n   * @param {string} [opts.workerSid] -\n   *          The SID of the Worker with the TaskQueue resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  TaskQueueListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists TaskQueueInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the TaskQueue resources to read\n   * @param {string} [opts.evaluateWorkerAttributes] -\n   *          The attributes of the Workers to read\n   * @param {string} [opts.workerSid] -\n   *          The SID of the Worker with the TaskQueue resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskQueueListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of TaskQueueInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the TaskQueue resources to read\n   * @param {string} [opts.evaluateWorkerAttributes] -\n   *          The attributes of the Workers to read\n   * @param {string} [opts.workerSid] -\n   *          The SID of the Worker with the TaskQueue resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskQueueListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'EvaluateWorkerAttributes': _.get(opts, 'evaluateWorkerAttributes'),\n      'WorkerSid': _.get(opts, 'workerSid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TaskQueuePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of TaskQueueInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskQueueListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TaskQueuePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a TaskQueueInstance\n   *\n   * @function create\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - A string to describe the resource\n   * @param {string} [opts.targetWorkers] -\n   *          A string describing the Worker selection criteria for any Tasks that enter the TaskQueue\n   * @param {number} [opts.maxReservedWorkers] -\n   *          The maximum number of Workers to reserve\n   * @param {task_queue.task_order} [opts.taskOrder] -\n   *          How Tasks will be assigned to Workers\n   * @param {string} [opts.reservationActivitySid] -\n   *          The SID of the Activity to assign Workers when a task is reserved for them\n   * @param {string} [opts.assignmentActivitySid] -\n   *          The SID of the Activity to assign Workers once a task is assigned to them\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TaskQueueInstance\n   */\n  /* jshint ignore:end */\n  TaskQueueListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'TargetWorkers': _.get(opts, 'targetWorkers'),\n      'MaxReservedWorkers': _.get(opts, 'maxReservedWorkers'),\n      'TaskOrder': _.get(opts, 'taskOrder'),\n      'ReservationActivitySid': _.get(opts, 'reservationActivitySid'),\n      'AssignmentActivitySid': _.get(opts, 'assignmentActivitySid')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TaskQueueInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a task_queue\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {string} sid - The SID of the resource to\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext}\n   */\n  /* jshint ignore:end */\n  TaskQueueListInstance.get = function get(sid) {\n    return new TaskQueueContext(this._version, this._solution.workspaceSid, sid);\n  };\n  Object.defineProperty(TaskQueueListInstance, 'statistics', {\n    get: function statistics() {\n      if (!this._statistics) {\n        this._statistics = new TaskQueuesStatisticsList(this._version, this._solution.workspaceSid);\n      }\n      return this._statistics;\n    }\n  });\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  TaskQueueListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  TaskQueueListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return TaskQueueListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskQueuePage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskQueuePage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TaskQueueSolution} solution - Path solution\n *\n * @returns TaskQueuePage\n */\n/* jshint ignore:end */\nTaskQueuePage = function TaskQueuePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(TaskQueuePage.prototype, Page.prototype);\nTaskQueuePage.prototype.constructor = TaskQueuePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of TaskQueueInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueuePage#\n *\n * @param {TaskQueuePayload} payload - Payload response from the API\n *\n * @returns TaskQueueInstance\n */\n/* jshint ignore:end */\nTaskQueuePage.prototype.getInstance = function getInstance(payload) {\n  return new TaskQueueInstance(this._version, payload, this._solution.workspaceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueuePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskQueuePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nTaskQueuePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskQueueContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} assignmentActivitySid -\n *          The SID of the Activity to assign Workers when a task is assigned for them\n * @property {string} assignmentActivityName -\n *          The name of the Activity to assign Workers when a task is assigned for them\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {number} maxReservedWorkers - The maximum number of Workers to reserve\n * @property {string} reservationActivitySid -\n *          The SID of the Activity to assign Workers once a task is reserved for them\n * @property {string} reservationActivityName -\n *          The name of the Activity to assign Workers once a task is reserved for them\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} targetWorkers -\n *          A string describing the Worker selection criteria for any Tasks that enter the TaskQueue\n * @property {task_queue.task_order} taskOrder -\n *          How Tasks will be assigned to Workers\n * @property {string} url - The absolute URL of the TaskQueue resource\n * @property {string} workspaceSid -\n *          The SID of the Workspace that contains the TaskQueue\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {TaskQueuePayload} payload - The instance payload\n * @param {sid} workspaceSid - The SID of the Workspace that contains the TaskQueue\n * @param {sid} sid - The SID of the resource to\n */\n/* jshint ignore:end */\nTaskQueueInstance = function TaskQueueInstance(version, payload, workspaceSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.assignmentActivitySid = payload.assignment_activity_sid; // jshint ignore:line\n  this.assignmentActivityName = payload.assignment_activity_name; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.maxReservedWorkers = deserialize.integer(payload.max_reserved_workers); // jshint ignore:line\n  this.reservationActivitySid = payload.reservation_activity_sid; // jshint ignore:line\n  this.reservationActivityName = payload.reservation_activity_name; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.targetWorkers = payload.target_workers; // jshint ignore:line\n  this.taskOrder = payload.task_order; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    workspaceSid: workspaceSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(TaskQueueInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new TaskQueueContext(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a TaskQueueInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n/* jshint ignore:end */\nTaskQueueInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a TaskQueueInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.targetWorkers] -\n *          A string describing the Worker selection criteria for any Tasks that enter the TaskQueue\n * @param {string} [opts.reservationActivitySid] -\n *          The SID of the Activity to assign Workers when a task is reserved for them\n * @param {string} [opts.assignmentActivitySid] -\n *          The SID of the Activity to assign Workers when a task is assigned for them\n * @param {number} [opts.maxReservedWorkers] -\n *          The maximum number of Workers to create reservations for the assignment of a task while in the queue\n * @param {task_queue.task_order} [opts.taskOrder] -\n *          How Tasks will be assigned to Workers\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n/* jshint ignore:end */\nTaskQueueInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a TaskQueueInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n/* jshint ignore:end */\nTaskQueueInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the statistics\n *\n * @function statistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueStatisticsList}\n */\n/* jshint ignore:end */\nTaskQueueInstance.prototype.statistics = function statistics() {\n  return this._proxy.statistics;\n};\n\n/* jshint ignore:start */\n/**\n * Access the realTimeStatistics\n *\n * @function realTimeStatistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueRealTimeStatisticsList}\n */\n/* jshint ignore:end */\nTaskQueueInstance.prototype.realTimeStatistics = function realTimeStatistics() {\n  return this._proxy.realTimeStatistics;\n};\n\n/* jshint ignore:start */\n/**\n * Access the cumulativeStatistics\n *\n * @function cumulativeStatistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueCumulativeStatisticsList}\n */\n/* jshint ignore:end */\nTaskQueueInstance.prototype.cumulativeStatistics = function cumulativeStatistics() {\n  return this._proxy.cumulativeStatistics;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskQueueInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nTaskQueueInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskQueueContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext\n *\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueStatisticsList} statistics -\n *          statistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueRealTimeStatisticsList} realTimeStatistics -\n *          realTimeStatistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueCumulativeStatisticsList} cumulativeStatistics -\n *          cumulativeStatistics resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid - The SID of the Workspace with the TaskQueue to fetch\n * @param {sid} sid - The SID of the resource to\n */\n/* jshint ignore:end */\nTaskQueueContext = function TaskQueueContext(version, workspaceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    workspaceSid: workspaceSid,\n    sid: sid\n  };\n  this._uri = `/Workspaces/${workspaceSid}/TaskQueues/${sid}`;\n\n  // Dependents\n  this._statistics = undefined;\n  this._realTimeStatistics = undefined;\n  this._cumulativeStatistics = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a TaskQueueInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n/* jshint ignore:end */\nTaskQueueContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TaskQueueInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a TaskQueueInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.targetWorkers] -\n *          A string describing the Worker selection criteria for any Tasks that enter the TaskQueue\n * @param {string} [opts.reservationActivitySid] -\n *          The SID of the Activity to assign Workers when a task is reserved for them\n * @param {string} [opts.assignmentActivitySid] -\n *          The SID of the Activity to assign Workers when a task is assigned for them\n * @param {number} [opts.maxReservedWorkers] -\n *          The maximum number of Workers to create reservations for the assignment of a task while in the queue\n * @param {task_queue.task_order} [opts.taskOrder] -\n *          How Tasks will be assigned to Workers\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n/* jshint ignore:end */\nTaskQueueContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'TargetWorkers': _.get(opts, 'targetWorkers'),\n    'ReservationActivitySid': _.get(opts, 'reservationActivitySid'),\n    'AssignmentActivitySid': _.get(opts, 'assignmentActivitySid'),\n    'MaxReservedWorkers': _.get(opts, 'maxReservedWorkers'),\n    'TaskOrder': _.get(opts, 'taskOrder')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TaskQueueInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a TaskQueueInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n/* jshint ignore:end */\nTaskQueueContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(TaskQueueContext.prototype, 'statistics', {\n  get: function () {\n    if (!this._statistics) {\n      this._statistics = new TaskQueueStatisticsList(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n    return this._statistics;\n  }\n});\nObject.defineProperty(TaskQueueContext.prototype, 'realTimeStatistics', {\n  get: function () {\n    if (!this._realTimeStatistics) {\n      this._realTimeStatistics = new TaskQueueRealTimeStatisticsList(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n    return this._realTimeStatistics;\n  }\n});\nObject.defineProperty(TaskQueueContext.prototype, 'cumulativeStatistics', {\n  get: function () {\n    if (!this._cumulativeStatistics) {\n      this._cumulativeStatistics = new TaskQueueCumulativeStatisticsList(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n    return this._cumulativeStatistics;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskQueueContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nTaskQueueContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  TaskQueueList: TaskQueueList,\n  TaskQueuePage: TaskQueuePage,\n  TaskQueueInstance: TaskQueueInstance,\n  TaskQueueContext: TaskQueueContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","TaskQueueCumulativeStatisticsList","TaskQueueRealTimeStatisticsList","TaskQueueStatisticsList","TaskQueuesStatisticsList","deserialize","values","TaskQueueList","TaskQueuePage","TaskQueueInstance","TaskQueueContext","version","workspaceSid","TaskQueueListInstance","sid","get","_version","_solution","_uri","_statistics","undefined","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","friendlyName","Object","defineProperty","statistics","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","assignmentActivitySid","assignment_activity_sid","assignmentActivityName","assignment_activity_name","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","friendly_name","maxReservedWorkers","integer","max_reserved_workers","reservationActivitySid","reservation_activity_sid","reservationActivityName","reservation_activity_name","targetWorkers","target_workers","taskOrder","task_order","url","workspace_sid","links","_context","fetch","_proxy","update","remove","realTimeStatistics","cumulativeStatistics","_realTimeStatistics","_cumulativeStatistics","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/taskrouter/v1/workspace/taskQueue.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar TaskQueueCumulativeStatisticsList = require(\n    './taskQueue/taskQueueCumulativeStatistics').TaskQueueCumulativeStatisticsList;\nvar TaskQueueRealTimeStatisticsList = require(\n    './taskQueue/taskQueueRealTimeStatistics').TaskQueueRealTimeStatisticsList;\nvar TaskQueueStatisticsList = require(\n    './taskQueue/taskQueueStatistics').TaskQueueStatisticsList;\nvar TaskQueuesStatisticsList = require(\n    './taskQueue/taskQueuesStatistics').TaskQueuesStatisticsList;\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar TaskQueueList;\nvar TaskQueuePage;\nvar TaskQueueInstance;\nvar TaskQueueContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskQueueList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid -\n *          The SID of the Workspace that contains the TaskQueue\n */\n/* jshint ignore:end */\nTaskQueueList = function TaskQueueList(version, workspaceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function taskQueues\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext}\n   */\n  /* jshint ignore:end */\n  function TaskQueueListInstance(sid) {\n    return TaskQueueListInstance.get(sid);\n  }\n\n  TaskQueueListInstance._version = version;\n  // Path Solution\n  TaskQueueListInstance._solution = {workspaceSid: workspaceSid};\n  TaskQueueListInstance._uri = `/Workspaces/${workspaceSid}/TaskQueues`;\n\n  // Components\n  TaskQueueListInstance._statistics = undefined;\n\n  /* jshint ignore:start */\n  /**\n   * Streams TaskQueueInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the TaskQueue resources to read\n   * @param {string} [opts.evaluateWorkerAttributes] -\n   *          The attributes of the Workers to read\n   * @param {string} [opts.workerSid] -\n   *          The SID of the Worker with the TaskQueue resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  TaskQueueListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists TaskQueueInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the TaskQueue resources to read\n   * @param {string} [opts.evaluateWorkerAttributes] -\n   *          The attributes of the Workers to read\n   * @param {string} [opts.workerSid] -\n   *          The SID of the Worker with the TaskQueue resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskQueueListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of TaskQueueInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the TaskQueue resources to read\n   * @param {string} [opts.evaluateWorkerAttributes] -\n   *          The attributes of the Workers to read\n   * @param {string} [opts.workerSid] -\n   *          The SID of the Worker with the TaskQueue resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskQueueListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'EvaluateWorkerAttributes': _.get(opts, 'evaluateWorkerAttributes'),\n      'WorkerSid': _.get(opts, 'workerSid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TaskQueuePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of TaskQueueInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskQueueListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TaskQueuePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a TaskQueueInstance\n   *\n   * @function create\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - A string to describe the resource\n   * @param {string} [opts.targetWorkers] -\n   *          A string describing the Worker selection criteria for any Tasks that enter the TaskQueue\n   * @param {number} [opts.maxReservedWorkers] -\n   *          The maximum number of Workers to reserve\n   * @param {task_queue.task_order} [opts.taskOrder] -\n   *          How Tasks will be assigned to Workers\n   * @param {string} [opts.reservationActivitySid] -\n   *          The SID of the Activity to assign Workers when a task is reserved for them\n   * @param {string} [opts.assignmentActivitySid] -\n   *          The SID of the Activity to assign Workers once a task is assigned to them\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TaskQueueInstance\n   */\n  /* jshint ignore:end */\n  TaskQueueListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'TargetWorkers': _.get(opts, 'targetWorkers'),\n      'MaxReservedWorkers': _.get(opts, 'maxReservedWorkers'),\n      'TaskOrder': _.get(opts, 'taskOrder'),\n      'ReservationActivitySid': _.get(opts, 'reservationActivitySid'),\n      'AssignmentActivitySid': _.get(opts, 'assignmentActivitySid')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TaskQueueInstance(\n        this._version,\n        payload,\n        this._solution.workspaceSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a task_queue\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {string} sid - The SID of the resource to\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext}\n   */\n  /* jshint ignore:end */\n  TaskQueueListInstance.get = function get(sid) {\n    return new TaskQueueContext(this._version, this._solution.workspaceSid, sid);\n  };\n\n  Object.defineProperty(TaskQueueListInstance,\n    'statistics', {\n      get: function statistics() {\n        if (!this._statistics) {\n          this._statistics = new TaskQueuesStatisticsList(this._version, this._solution.workspaceSid);\n        }\n\n        return this._statistics;\n      }\n  });\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  TaskQueueListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TaskQueueListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TaskQueueListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskQueuePage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskQueuePage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TaskQueueSolution} solution - Path solution\n *\n * @returns TaskQueuePage\n */\n/* jshint ignore:end */\nTaskQueuePage = function TaskQueuePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TaskQueuePage.prototype, Page.prototype);\nTaskQueuePage.prototype.constructor = TaskQueuePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of TaskQueueInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueuePage#\n *\n * @param {TaskQueuePayload} payload - Payload response from the API\n *\n * @returns TaskQueueInstance\n */\n/* jshint ignore:end */\nTaskQueuePage.prototype.getInstance = function getInstance(payload) {\n  return new TaskQueueInstance(this._version, payload, this._solution.workspaceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueuePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskQueuePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTaskQueuePage.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskQueueContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} assignmentActivitySid -\n *          The SID of the Activity to assign Workers when a task is assigned for them\n * @property {string} assignmentActivityName -\n *          The name of the Activity to assign Workers when a task is assigned for them\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {number} maxReservedWorkers - The maximum number of Workers to reserve\n * @property {string} reservationActivitySid -\n *          The SID of the Activity to assign Workers once a task is reserved for them\n * @property {string} reservationActivityName -\n *          The name of the Activity to assign Workers once a task is reserved for them\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} targetWorkers -\n *          A string describing the Worker selection criteria for any Tasks that enter the TaskQueue\n * @property {task_queue.task_order} taskOrder -\n *          How Tasks will be assigned to Workers\n * @property {string} url - The absolute URL of the TaskQueue resource\n * @property {string} workspaceSid -\n *          The SID of the Workspace that contains the TaskQueue\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {TaskQueuePayload} payload - The instance payload\n * @param {sid} workspaceSid - The SID of the Workspace that contains the TaskQueue\n * @param {sid} sid - The SID of the resource to\n */\n/* jshint ignore:end */\nTaskQueueInstance = function TaskQueueInstance(version, payload, workspaceSid,\n                                                sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.assignmentActivitySid = payload.assignment_activity_sid; // jshint ignore:line\n  this.assignmentActivityName = payload.assignment_activity_name; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.maxReservedWorkers = deserialize.integer(payload.max_reserved_workers); // jshint ignore:line\n  this.reservationActivitySid = payload.reservation_activity_sid; // jshint ignore:line\n  this.reservationActivityName = payload.reservation_activity_name; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.targetWorkers = payload.target_workers; // jshint ignore:line\n  this.taskOrder = payload.task_order; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {workspaceSid: workspaceSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(TaskQueueInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new TaskQueueContext(\n          this._version,\n          this._solution.workspaceSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a TaskQueueInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n/* jshint ignore:end */\nTaskQueueInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a TaskQueueInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.targetWorkers] -\n *          A string describing the Worker selection criteria for any Tasks that enter the TaskQueue\n * @param {string} [opts.reservationActivitySid] -\n *          The SID of the Activity to assign Workers when a task is reserved for them\n * @param {string} [opts.assignmentActivitySid] -\n *          The SID of the Activity to assign Workers when a task is assigned for them\n * @param {number} [opts.maxReservedWorkers] -\n *          The maximum number of Workers to create reservations for the assignment of a task while in the queue\n * @param {task_queue.task_order} [opts.taskOrder] -\n *          How Tasks will be assigned to Workers\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n/* jshint ignore:end */\nTaskQueueInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a TaskQueueInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n/* jshint ignore:end */\nTaskQueueInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the statistics\n *\n * @function statistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueStatisticsList}\n */\n/* jshint ignore:end */\nTaskQueueInstance.prototype.statistics = function statistics() {\n  return this._proxy.statistics;\n};\n\n/* jshint ignore:start */\n/**\n * Access the realTimeStatistics\n *\n * @function realTimeStatistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueRealTimeStatisticsList}\n */\n/* jshint ignore:end */\nTaskQueueInstance.prototype.realTimeStatistics = function realTimeStatistics() {\n  return this._proxy.realTimeStatistics;\n};\n\n/* jshint ignore:start */\n/**\n * Access the cumulativeStatistics\n *\n * @function cumulativeStatistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueCumulativeStatisticsList}\n */\n/* jshint ignore:end */\nTaskQueueInstance.prototype.cumulativeStatistics = function\n    cumulativeStatistics() {\n  return this._proxy.cumulativeStatistics;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskQueueInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTaskQueueInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskQueueContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext\n *\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueStatisticsList} statistics -\n *          statistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueRealTimeStatisticsList} realTimeStatistics -\n *          realTimeStatistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueCumulativeStatisticsList} cumulativeStatistics -\n *          cumulativeStatistics resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid - The SID of the Workspace with the TaskQueue to fetch\n * @param {sid} sid - The SID of the resource to\n */\n/* jshint ignore:end */\nTaskQueueContext = function TaskQueueContext(version, workspaceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {workspaceSid: workspaceSid, sid: sid, };\n  this._uri = `/Workspaces/${workspaceSid}/TaskQueues/${sid}`;\n\n  // Dependents\n  this._statistics = undefined;\n  this._realTimeStatistics = undefined;\n  this._cumulativeStatistics = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a TaskQueueInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n/* jshint ignore:end */\nTaskQueueContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TaskQueueInstance(\n      this._version,\n      payload,\n      this._solution.workspaceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a TaskQueueInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.targetWorkers] -\n *          A string describing the Worker selection criteria for any Tasks that enter the TaskQueue\n * @param {string} [opts.reservationActivitySid] -\n *          The SID of the Activity to assign Workers when a task is reserved for them\n * @param {string} [opts.assignmentActivitySid] -\n *          The SID of the Activity to assign Workers when a task is assigned for them\n * @param {number} [opts.maxReservedWorkers] -\n *          The maximum number of Workers to create reservations for the assignment of a task while in the queue\n * @param {task_queue.task_order} [opts.taskOrder] -\n *          How Tasks will be assigned to Workers\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n/* jshint ignore:end */\nTaskQueueContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'TargetWorkers': _.get(opts, 'targetWorkers'),\n    'ReservationActivitySid': _.get(opts, 'reservationActivitySid'),\n    'AssignmentActivitySid': _.get(opts, 'assignmentActivitySid'),\n    'MaxReservedWorkers': _.get(opts, 'maxReservedWorkers'),\n    'TaskOrder': _.get(opts, 'taskOrder')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TaskQueueInstance(\n      this._version,\n      payload,\n      this._solution.workspaceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a TaskQueueInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n/* jshint ignore:end */\nTaskQueueContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(TaskQueueContext.prototype,\n  'statistics', {\n    get: function() {\n      if (!this._statistics) {\n        this._statistics = new TaskQueueStatisticsList(\n          this._version,\n          this._solution.workspaceSid,\n          this._solution.sid\n        );\n      }\n      return this._statistics;\n    }\n});\n\nObject.defineProperty(TaskQueueContext.prototype,\n  'realTimeStatistics', {\n    get: function() {\n      if (!this._realTimeStatistics) {\n        this._realTimeStatistics = new TaskQueueRealTimeStatisticsList(\n          this._version,\n          this._solution.workspaceSid,\n          this._solution.sid\n        );\n      }\n      return this._realTimeStatistics;\n    }\n});\n\nObject.defineProperty(TaskQueueContext.prototype,\n  'cumulativeStatistics', {\n    get: function() {\n      if (!this._cumulativeStatistics) {\n        this._cumulativeStatistics = new TaskQueueCumulativeStatisticsList(\n          this._version,\n          this._solution.workspaceSid,\n          this._solution.sid\n        );\n      }\n      return this._cumulativeStatistics;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskQueueContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nTaskQueueContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TaskQueueList: TaskQueueList,\n  TaskQueuePage: TaskQueuePage,\n  TaskQueueInstance: TaskQueueInstance,\n  TaskQueueContext: TaskQueueContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}