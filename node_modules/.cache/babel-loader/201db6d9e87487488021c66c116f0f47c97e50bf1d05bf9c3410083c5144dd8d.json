{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../../base/values'); /* jshint ignore:line */\n\nvar ConnectionPolicyTargetList;\nvar ConnectionPolicyTargetPage;\nvar ConnectionPolicyTargetInstance;\nvar ConnectionPolicyTargetContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ConnectionPolicyTargetList\n *\n * @constructor Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList\n *\n * @param {Twilio.Voice.V1} version - Version of the resource\n * @param {string} connectionPolicySid -\n *          The SID of the Connection Policy that owns the Target\n */\n/* jshint ignore:end */\nConnectionPolicyTargetList = function ConnectionPolicyTargetList(version, connectionPolicySid) {\n  /* jshint ignore:start */\n  /**\n   * @function targets\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetContext}\n   */\n  /* jshint ignore:end */\n  function ConnectionPolicyTargetListInstance(sid) {\n    return ConnectionPolicyTargetListInstance.get(sid);\n  }\n  ConnectionPolicyTargetListInstance._version = version;\n  // Path Solution\n  ConnectionPolicyTargetListInstance._solution = {\n    connectionPolicySid: connectionPolicySid\n  };\n  ConnectionPolicyTargetListInstance._uri = `/ConnectionPolicies/${connectionPolicySid}/Targets`;\n  /* jshint ignore:start */\n  /**\n   * create a ConnectionPolicyTargetInstance\n   *\n   * @function create\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.target -\n   *          The SIP address you want Twilio to route your calls to\n   * @param {string} [opts.friendlyName] - A string to describe the resource\n   * @param {number} [opts.priority] - The relative importance of the target\n   * @param {number} [opts.weight] -\n   *          The value that determines the relative load the Target should receive compared to others with the same priority\n   * @param {boolean} [opts.enabled] - Whether the Target is enabled\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ConnectionPolicyTargetInstance\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyTargetListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.target)) {\n      throw new Error('Required parameter \"opts.target\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'Target': _.get(opts, 'target'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Priority': _.get(opts, 'priority'),\n      'Weight': _.get(opts, 'weight'),\n      'Enabled': serialize.bool(_.get(opts, 'enabled'))\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ConnectionPolicyTargetInstance(this._version, payload, this._solution.connectionPolicySid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ConnectionPolicyTargetInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyTargetListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ConnectionPolicyTargetInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyTargetListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ConnectionPolicyTargetInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyTargetListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ConnectionPolicyTargetPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ConnectionPolicyTargetInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyTargetListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ConnectionPolicyTargetPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a connection_policy_target\n   *\n   * @function get\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetContext}\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyTargetListInstance.get = function get(sid) {\n    return new ConnectionPolicyTargetContext(this._version, this._solution.connectionPolicySid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyTargetListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  ConnectionPolicyTargetListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return ConnectionPolicyTargetListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ConnectionPolicyTargetPage\n *\n * @constructor Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ConnectionPolicyTargetSolution} solution - Path solution\n *\n * @returns ConnectionPolicyTargetPage\n */\n/* jshint ignore:end */\nConnectionPolicyTargetPage = function ConnectionPolicyTargetPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(ConnectionPolicyTargetPage.prototype, Page.prototype);\nConnectionPolicyTargetPage.prototype.constructor = ConnectionPolicyTargetPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ConnectionPolicyTargetInstance\n *\n * @function getInstance\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetPage#\n *\n * @param {ConnectionPolicyTargetPayload} payload - Payload response from the API\n *\n * @returns ConnectionPolicyTargetInstance\n */\n/* jshint ignore:end */\nConnectionPolicyTargetPage.prototype.getInstance = function getInstance(payload) {\n  return new ConnectionPolicyTargetInstance(this._version, payload, this._solution.connectionPolicySid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConnectionPolicyTargetPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nConnectionPolicyTargetPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ConnectionPolicyTargetContext\n *\n * @constructor Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} connectionPolicySid -\n *          The SID of the Connection Policy that owns the Target\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} target -\n *          The SIP address you want Twilio to route your calls to\n * @property {number} priority - The relative importance of the target\n * @property {number} weight -\n *          The value that determines the relative load the Target should receive compared to others with the same priority\n * @property {boolean} enabled - Whether the target is enabled\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n *\n * @param {V1} version - Version of the resource\n * @param {ConnectionPolicyTargetPayload} payload - The instance payload\n * @param {sid} connectionPolicySid -\n *          The SID of the Connection Policy that owns the Target\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nConnectionPolicyTargetInstance = function ConnectionPolicyTargetInstance(version, payload, connectionPolicySid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.connectionPolicySid = payload.connection_policy_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.target = payload.target; // jshint ignore:line\n  this.priority = deserialize.integer(payload.priority); // jshint ignore:line\n  this.weight = deserialize.integer(payload.weight); // jshint ignore:line\n  this.enabled = payload.enabled; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    connectionPolicySid: connectionPolicySid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(ConnectionPolicyTargetInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ConnectionPolicyTargetContext(this._version, this._solution.connectionPolicySid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ConnectionPolicyTargetInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyTargetInstance\n */\n/* jshint ignore:end */\nConnectionPolicyTargetInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ConnectionPolicyTargetInstance\n *\n * @function update\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.target] -\n *          The SIP address you want Twilio to route your calls to\n * @param {number} [opts.priority] - The relative importance of the target\n * @param {number} [opts.weight] -\n *          The value that determines the relative load the Target should receive compared to others with the same priority\n * @param {boolean} [opts.enabled] - Whether the Target is enabled\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyTargetInstance\n */\n/* jshint ignore:end */\nConnectionPolicyTargetInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a ConnectionPolicyTargetInstance\n *\n * @function remove\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyTargetInstance\n */\n/* jshint ignore:end */\nConnectionPolicyTargetInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConnectionPolicyTargetInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nConnectionPolicyTargetInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ConnectionPolicyTargetContext\n *\n * @constructor Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} connectionPolicySid -\n *          The SID of the Connection Policy that owns the Target\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nConnectionPolicyTargetContext = function ConnectionPolicyTargetContext(version, connectionPolicySid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    connectionPolicySid: connectionPolicySid,\n    sid: sid\n  };\n  this._uri = `/ConnectionPolicies/${connectionPolicySid}/Targets/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ConnectionPolicyTargetInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyTargetInstance\n */\n/* jshint ignore:end */\nConnectionPolicyTargetContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ConnectionPolicyTargetInstance(this._version, payload, this._solution.connectionPolicySid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ConnectionPolicyTargetInstance\n *\n * @function update\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.target] -\n *          The SIP address you want Twilio to route your calls to\n * @param {number} [opts.priority] - The relative importance of the target\n * @param {number} [opts.weight] -\n *          The value that determines the relative load the Target should receive compared to others with the same priority\n * @param {boolean} [opts.enabled] - Whether the Target is enabled\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyTargetInstance\n */\n/* jshint ignore:end */\nConnectionPolicyTargetContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'Target': _.get(opts, 'target'),\n    'Priority': _.get(opts, 'priority'),\n    'Weight': _.get(opts, 'weight'),\n    'Enabled': serialize.bool(_.get(opts, 'enabled'))\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ConnectionPolicyTargetInstance(this._version, payload, this._solution.connectionPolicySid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ConnectionPolicyTargetInstance\n *\n * @function remove\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyTargetInstance\n */\n/* jshint ignore:end */\nConnectionPolicyTargetContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConnectionPolicyTargetContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nConnectionPolicyTargetContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  ConnectionPolicyTargetList: ConnectionPolicyTargetList,\n  ConnectionPolicyTargetPage: ConnectionPolicyTargetPage,\n  ConnectionPolicyTargetInstance: ConnectionPolicyTargetInstance,\n  ConnectionPolicyTargetContext: ConnectionPolicyTargetContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","serialize","values","ConnectionPolicyTargetList","ConnectionPolicyTargetPage","ConnectionPolicyTargetInstance","ConnectionPolicyTargetContext","version","connectionPolicySid","ConnectionPolicyTargetListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","target","deferred","defer","data","of","bool","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","connection_policy_sid","friendlyName","friendly_name","priority","integer","weight","enabled","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/voice/v1/connectionPolicy/connectionPolicyTarget.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar ConnectionPolicyTargetList;\nvar ConnectionPolicyTargetPage;\nvar ConnectionPolicyTargetInstance;\nvar ConnectionPolicyTargetContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ConnectionPolicyTargetList\n *\n * @constructor Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList\n *\n * @param {Twilio.Voice.V1} version - Version of the resource\n * @param {string} connectionPolicySid -\n *          The SID of the Connection Policy that owns the Target\n */\n/* jshint ignore:end */\nConnectionPolicyTargetList = function ConnectionPolicyTargetList(version,\n    connectionPolicySid) {\n  /* jshint ignore:start */\n  /**\n   * @function targets\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetContext}\n   */\n  /* jshint ignore:end */\n  function ConnectionPolicyTargetListInstance(sid) {\n    return ConnectionPolicyTargetListInstance.get(sid);\n  }\n\n  ConnectionPolicyTargetListInstance._version = version;\n  // Path Solution\n  ConnectionPolicyTargetListInstance._solution = {connectionPolicySid: connectionPolicySid};\n  ConnectionPolicyTargetListInstance._uri = `/ConnectionPolicies/${connectionPolicySid}/Targets`;\n  /* jshint ignore:start */\n  /**\n   * create a ConnectionPolicyTargetInstance\n   *\n   * @function create\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.target -\n   *          The SIP address you want Twilio to route your calls to\n   * @param {string} [opts.friendlyName] - A string to describe the resource\n   * @param {number} [opts.priority] - The relative importance of the target\n   * @param {number} [opts.weight] -\n   *          The value that determines the relative load the Target should receive compared to others with the same priority\n   * @param {boolean} [opts.enabled] - Whether the Target is enabled\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ConnectionPolicyTargetInstance\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyTargetListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.target)) {\n      throw new Error('Required parameter \"opts.target\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Target': _.get(opts, 'target'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Priority': _.get(opts, 'priority'),\n      'Weight': _.get(opts, 'weight'),\n      'Enabled': serialize.bool(_.get(opts, 'enabled'))\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ConnectionPolicyTargetInstance(\n        this._version,\n        payload,\n        this._solution.connectionPolicySid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ConnectionPolicyTargetInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyTargetListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ConnectionPolicyTargetInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyTargetListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ConnectionPolicyTargetInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyTargetListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ConnectionPolicyTargetPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ConnectionPolicyTargetInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyTargetListInstance.getPage = function getPage(targetUrl,\n      callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ConnectionPolicyTargetPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a connection_policy_target\n   *\n   * @function get\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetContext}\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyTargetListInstance.get = function get(sid) {\n    return new ConnectionPolicyTargetContext(this._version, this._solution.connectionPolicySid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyTargetListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ConnectionPolicyTargetListInstance[util.inspect.custom] = function\n      inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ConnectionPolicyTargetListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ConnectionPolicyTargetPage\n *\n * @constructor Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ConnectionPolicyTargetSolution} solution - Path solution\n *\n * @returns ConnectionPolicyTargetPage\n */\n/* jshint ignore:end */\nConnectionPolicyTargetPage = function ConnectionPolicyTargetPage(version,\n    response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ConnectionPolicyTargetPage.prototype, Page.prototype);\nConnectionPolicyTargetPage.prototype.constructor = ConnectionPolicyTargetPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ConnectionPolicyTargetInstance\n *\n * @function getInstance\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetPage#\n *\n * @param {ConnectionPolicyTargetPayload} payload - Payload response from the API\n *\n * @returns ConnectionPolicyTargetInstance\n */\n/* jshint ignore:end */\nConnectionPolicyTargetPage.prototype.getInstance = function getInstance(payload)\n    {\n  return new ConnectionPolicyTargetInstance(\n    this._version,\n    payload,\n    this._solution.connectionPolicySid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConnectionPolicyTargetPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nConnectionPolicyTargetPage.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ConnectionPolicyTargetContext\n *\n * @constructor Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} connectionPolicySid -\n *          The SID of the Connection Policy that owns the Target\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} target -\n *          The SIP address you want Twilio to route your calls to\n * @property {number} priority - The relative importance of the target\n * @property {number} weight -\n *          The value that determines the relative load the Target should receive compared to others with the same priority\n * @property {boolean} enabled - Whether the target is enabled\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n *\n * @param {V1} version - Version of the resource\n * @param {ConnectionPolicyTargetPayload} payload - The instance payload\n * @param {sid} connectionPolicySid -\n *          The SID of the Connection Policy that owns the Target\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nConnectionPolicyTargetInstance = function\n    ConnectionPolicyTargetInstance(version, payload, connectionPolicySid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.connectionPolicySid = payload.connection_policy_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.target = payload.target; // jshint ignore:line\n  this.priority = deserialize.integer(payload.priority); // jshint ignore:line\n  this.weight = deserialize.integer(payload.weight); // jshint ignore:line\n  this.enabled = payload.enabled; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {connectionPolicySid: connectionPolicySid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(ConnectionPolicyTargetInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new ConnectionPolicyTargetContext(\n          this._version,\n          this._solution.connectionPolicySid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ConnectionPolicyTargetInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyTargetInstance\n */\n/* jshint ignore:end */\nConnectionPolicyTargetInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ConnectionPolicyTargetInstance\n *\n * @function update\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.target] -\n *          The SIP address you want Twilio to route your calls to\n * @param {number} [opts.priority] - The relative importance of the target\n * @param {number} [opts.weight] -\n *          The value that determines the relative load the Target should receive compared to others with the same priority\n * @param {boolean} [opts.enabled] - Whether the Target is enabled\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyTargetInstance\n */\n/* jshint ignore:end */\nConnectionPolicyTargetInstance.prototype.update = function update(opts,\n    callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a ConnectionPolicyTargetInstance\n *\n * @function remove\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyTargetInstance\n */\n/* jshint ignore:end */\nConnectionPolicyTargetInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConnectionPolicyTargetInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nConnectionPolicyTargetInstance.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ConnectionPolicyTargetContext\n *\n * @constructor Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} connectionPolicySid -\n *          The SID of the Connection Policy that owns the Target\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nConnectionPolicyTargetContext = function ConnectionPolicyTargetContext(version,\n    connectionPolicySid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {connectionPolicySid: connectionPolicySid, sid: sid, };\n  this._uri = `/ConnectionPolicies/${connectionPolicySid}/Targets/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ConnectionPolicyTargetInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyTargetInstance\n */\n/* jshint ignore:end */\nConnectionPolicyTargetContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ConnectionPolicyTargetInstance(\n      this._version,\n      payload,\n      this._solution.connectionPolicySid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ConnectionPolicyTargetInstance\n *\n * @function update\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.target] -\n *          The SIP address you want Twilio to route your calls to\n * @param {number} [opts.priority] - The relative importance of the target\n * @param {number} [opts.weight] -\n *          The value that determines the relative load the Target should receive compared to others with the same priority\n * @param {boolean} [opts.enabled] - Whether the Target is enabled\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyTargetInstance\n */\n/* jshint ignore:end */\nConnectionPolicyTargetContext.prototype.update = function update(opts, callback)\n    {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'Target': _.get(opts, 'target'),\n    'Priority': _.get(opts, 'priority'),\n    'Weight': _.get(opts, 'weight'),\n    'Enabled': serialize.bool(_.get(opts, 'enabled'))\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ConnectionPolicyTargetInstance(\n      this._version,\n      payload,\n      this._solution.connectionPolicySid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ConnectionPolicyTargetInstance\n *\n * @function remove\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyTargetInstance\n */\n/* jshint ignore:end */\nConnectionPolicyTargetContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConnectionPolicyTargetContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nConnectionPolicyTargetContext.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ConnectionPolicyTargetList: ConnectionPolicyTargetList,\n  ConnectionPolicyTargetPage: ConnectionPolicyTargetPage,\n  ConnectionPolicyTargetInstance: ConnectionPolicyTargetInstance,\n  ConnectionPolicyTargetContext: ConnectionPolicyTargetContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}