{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../../base/deserialize'); /* jshint ignore:line */\nvar values = require('../../../../base/values'); /* jshint ignore:line */\n\nvar MessagingConfigurationList;\nvar MessagingConfigurationPage;\nvar MessagingConfigurationInstance;\nvar MessagingConfigurationContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the MessagingConfigurationList\n *\n * @constructor Twilio.Verify.V2.ServiceContext.MessagingConfigurationList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n */\n/* jshint ignore:end */\nMessagingConfigurationList = function MessagingConfigurationList(version, serviceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function messagingConfigurations\n   * @memberof Twilio.Verify.V2.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.MessagingConfigurationContext}\n   */\n  /* jshint ignore:end */\n  function MessagingConfigurationListInstance(sid) {\n    return MessagingConfigurationListInstance.get(sid);\n  }\n  MessagingConfigurationListInstance._version = version;\n  // Path Solution\n  MessagingConfigurationListInstance._solution = {\n    serviceSid: serviceSid\n  };\n  MessagingConfigurationListInstance._uri = `/Services/${serviceSid}/MessagingConfigurations`;\n  /* jshint ignore:start */\n  /**\n   * create a MessagingConfigurationInstance\n   *\n   * @function create\n   * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.country -\n   *          The ISO-3166-1 country code of the country or `all`.\n   * @param {string} opts.messagingServiceSid -\n   *          The SID of the Messaging Service used for this configuration.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed MessagingConfigurationInstance\n   */\n  /* jshint ignore:end */\n  MessagingConfigurationListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.country)) {\n      throw new Error('Required parameter \"opts.country\" missing.');\n    }\n    if (_.isUndefined(opts.messagingServiceSid)) {\n      throw new Error('Required parameter \"opts.messagingServiceSid\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'Country': _.get(opts, 'country'),\n      'MessagingServiceSid': _.get(opts, 'messagingServiceSid')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MessagingConfigurationInstance(this._version, payload, this._solution.serviceSid, this._solution.country));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams MessagingConfigurationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  MessagingConfigurationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists MessagingConfigurationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessagingConfigurationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of MessagingConfigurationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessagingConfigurationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MessagingConfigurationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of MessagingConfigurationInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessagingConfigurationListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MessagingConfigurationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a messaging_configuration\n   *\n   * @function get\n   * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationList#\n   *\n   * @param {string} country - The ISO-3166-1 country code of the country or `all`.\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.MessagingConfigurationContext}\n   */\n  /* jshint ignore:end */\n  MessagingConfigurationListInstance.get = function get(country) {\n    return new MessagingConfigurationContext(this._version, this._solution.serviceSid, country);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  MessagingConfigurationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  MessagingConfigurationListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return MessagingConfigurationListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the MessagingConfigurationPage\n *\n * @constructor Twilio.Verify.V2.ServiceContext.MessagingConfigurationPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {MessagingConfigurationSolution} solution - Path solution\n *\n * @returns MessagingConfigurationPage\n */\n/* jshint ignore:end */\nMessagingConfigurationPage = function MessagingConfigurationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(MessagingConfigurationPage.prototype, Page.prototype);\nMessagingConfigurationPage.prototype.constructor = MessagingConfigurationPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of MessagingConfigurationInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationPage#\n *\n * @param {MessagingConfigurationPayload} payload - Payload response from the API\n *\n * @returns MessagingConfigurationInstance\n */\n/* jshint ignore:end */\nMessagingConfigurationPage.prototype.getInstance = function getInstance(payload) {\n  return new MessagingConfigurationInstance(this._version, payload, this._solution.serviceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessagingConfigurationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nMessagingConfigurationPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the MessagingConfigurationContext\n *\n * @constructor Twilio.Verify.V2.ServiceContext.MessagingConfigurationInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @property {string} country -\n *          The ISO-3166-1 country code of the country or `all`.\n * @property {string} messagingServiceSid -\n *          The SID of the Messaging Service used for this configuration.\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} url - The URL of this resource.\n *\n * @param {V2} version - Version of the resource\n * @param {MessagingConfigurationPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {string} country - The ISO-3166-1 country code of the country or `all`.\n */\n/* jshint ignore:end */\nMessagingConfigurationInstance = function MessagingConfigurationInstance(version, payload, serviceSid, country) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.country = payload.country; // jshint ignore:line\n  this.messagingServiceSid = payload.messaging_service_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    country: country || this.country\n  };\n};\nObject.defineProperty(MessagingConfigurationInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new MessagingConfigurationContext(this._version, this._solution.serviceSid, this._solution.country);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * update a MessagingConfigurationInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationInstance#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.messagingServiceSid -\n *          The SID of the Messaging Service used for this configuration.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessagingConfigurationInstance\n */\n/* jshint ignore:end */\nMessagingConfigurationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a MessagingConfigurationInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessagingConfigurationInstance\n */\n/* jshint ignore:end */\nMessagingConfigurationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a MessagingConfigurationInstance\n *\n * @function remove\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessagingConfigurationInstance\n */\n/* jshint ignore:end */\nMessagingConfigurationInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessagingConfigurationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nMessagingConfigurationInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the MessagingConfigurationContext\n *\n * @constructor Twilio.Verify.V2.ServiceContext.MessagingConfigurationContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {string} country - The ISO-3166-1 country code of the country or `all`.\n */\n/* jshint ignore:end */\nMessagingConfigurationContext = function MessagingConfigurationContext(version, serviceSid, country) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    serviceSid: serviceSid,\n    country: country\n  };\n  this._uri = `/Services/${serviceSid}/MessagingConfigurations/${country}`;\n};\n\n/* jshint ignore:start */\n/**\n * update a MessagingConfigurationInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationContext#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.messagingServiceSid -\n *          The SID of the Messaging Service used for this configuration.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessagingConfigurationInstance\n */\n/* jshint ignore:end */\nMessagingConfigurationContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n  if (_.isUndefined(opts.messagingServiceSid)) {\n    throw new Error('Required parameter \"opts.messagingServiceSid\" missing.');\n  }\n  var deferred = Q.defer();\n  var data = values.of({\n    'MessagingServiceSid': _.get(opts, 'messagingServiceSid')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new MessagingConfigurationInstance(this._version, payload, this._solution.serviceSid, this._solution.country));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a MessagingConfigurationInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessagingConfigurationInstance\n */\n/* jshint ignore:end */\nMessagingConfigurationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new MessagingConfigurationInstance(this._version, payload, this._solution.serviceSid, this._solution.country));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a MessagingConfigurationInstance\n *\n * @function remove\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessagingConfigurationInstance\n */\n/* jshint ignore:end */\nMessagingConfigurationContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessagingConfigurationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nMessagingConfigurationContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  MessagingConfigurationList: MessagingConfigurationList,\n  MessagingConfigurationPage: MessagingConfigurationPage,\n  MessagingConfigurationInstance: MessagingConfigurationInstance,\n  MessagingConfigurationContext: MessagingConfigurationContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","values","MessagingConfigurationList","MessagingConfigurationPage","MessagingConfigurationInstance","MessagingConfigurationContext","version","serviceSid","MessagingConfigurationListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","country","messagingServiceSid","deferred","defer","data","of","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","service_sid","messaging_service_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","_context","undefined","Object","defineProperty","update","_proxy","fetch","remove","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/verify/v2/service/messagingConfiguration.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar MessagingConfigurationList;\nvar MessagingConfigurationPage;\nvar MessagingConfigurationInstance;\nvar MessagingConfigurationContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the MessagingConfigurationList\n *\n * @constructor Twilio.Verify.V2.ServiceContext.MessagingConfigurationList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n */\n/* jshint ignore:end */\nMessagingConfigurationList = function MessagingConfigurationList(version,\n    serviceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function messagingConfigurations\n   * @memberof Twilio.Verify.V2.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.MessagingConfigurationContext}\n   */\n  /* jshint ignore:end */\n  function MessagingConfigurationListInstance(sid) {\n    return MessagingConfigurationListInstance.get(sid);\n  }\n\n  MessagingConfigurationListInstance._version = version;\n  // Path Solution\n  MessagingConfigurationListInstance._solution = {serviceSid: serviceSid};\n  MessagingConfigurationListInstance._uri = `/Services/${serviceSid}/MessagingConfigurations`;\n  /* jshint ignore:start */\n  /**\n   * create a MessagingConfigurationInstance\n   *\n   * @function create\n   * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.country -\n   *          The ISO-3166-1 country code of the country or `all`.\n   * @param {string} opts.messagingServiceSid -\n   *          The SID of the Messaging Service used for this configuration.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed MessagingConfigurationInstance\n   */\n  /* jshint ignore:end */\n  MessagingConfigurationListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.country)) {\n      throw new Error('Required parameter \"opts.country\" missing.');\n    }\n    if (_.isUndefined(opts.messagingServiceSid)) {\n      throw new Error('Required parameter \"opts.messagingServiceSid\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Country': _.get(opts, 'country'),\n      'MessagingServiceSid': _.get(opts, 'messagingServiceSid')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MessagingConfigurationInstance(\n        this._version,\n        payload,\n        this._solution.serviceSid,\n        this._solution.country\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams MessagingConfigurationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  MessagingConfigurationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists MessagingConfigurationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessagingConfigurationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of MessagingConfigurationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessagingConfigurationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MessagingConfigurationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of MessagingConfigurationInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessagingConfigurationListInstance.getPage = function getPage(targetUrl,\n      callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MessagingConfigurationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a messaging_configuration\n   *\n   * @function get\n   * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationList#\n   *\n   * @param {string} country - The ISO-3166-1 country code of the country or `all`.\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.MessagingConfigurationContext}\n   */\n  /* jshint ignore:end */\n  MessagingConfigurationListInstance.get = function get(country) {\n    return new MessagingConfigurationContext(this._version, this._solution.serviceSid, country);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  MessagingConfigurationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  MessagingConfigurationListInstance[util.inspect.custom] = function\n      inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return MessagingConfigurationListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MessagingConfigurationPage\n *\n * @constructor Twilio.Verify.V2.ServiceContext.MessagingConfigurationPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {MessagingConfigurationSolution} solution - Path solution\n *\n * @returns MessagingConfigurationPage\n */\n/* jshint ignore:end */\nMessagingConfigurationPage = function MessagingConfigurationPage(version,\n    response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(MessagingConfigurationPage.prototype, Page.prototype);\nMessagingConfigurationPage.prototype.constructor = MessagingConfigurationPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of MessagingConfigurationInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationPage#\n *\n * @param {MessagingConfigurationPayload} payload - Payload response from the API\n *\n * @returns MessagingConfigurationInstance\n */\n/* jshint ignore:end */\nMessagingConfigurationPage.prototype.getInstance = function getInstance(payload)\n    {\n  return new MessagingConfigurationInstance(this._version, payload, this._solution.serviceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessagingConfigurationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nMessagingConfigurationPage.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MessagingConfigurationContext\n *\n * @constructor Twilio.Verify.V2.ServiceContext.MessagingConfigurationInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @property {string} country -\n *          The ISO-3166-1 country code of the country or `all`.\n * @property {string} messagingServiceSid -\n *          The SID of the Messaging Service used for this configuration.\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} url - The URL of this resource.\n *\n * @param {V2} version - Version of the resource\n * @param {MessagingConfigurationPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {string} country - The ISO-3166-1 country code of the country or `all`.\n */\n/* jshint ignore:end */\nMessagingConfigurationInstance = function\n    MessagingConfigurationInstance(version, payload, serviceSid, country) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.country = payload.country; // jshint ignore:line\n  this.messagingServiceSid = payload.messaging_service_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, country: country || this.country, };\n};\n\nObject.defineProperty(MessagingConfigurationInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new MessagingConfigurationContext(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.country\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * update a MessagingConfigurationInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationInstance#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.messagingServiceSid -\n *          The SID of the Messaging Service used for this configuration.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessagingConfigurationInstance\n */\n/* jshint ignore:end */\nMessagingConfigurationInstance.prototype.update = function update(opts,\n    callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a MessagingConfigurationInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessagingConfigurationInstance\n */\n/* jshint ignore:end */\nMessagingConfigurationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a MessagingConfigurationInstance\n *\n * @function remove\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessagingConfigurationInstance\n */\n/* jshint ignore:end */\nMessagingConfigurationInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessagingConfigurationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nMessagingConfigurationInstance.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MessagingConfigurationContext\n *\n * @constructor Twilio.Verify.V2.ServiceContext.MessagingConfigurationContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {string} country - The ISO-3166-1 country code of the country or `all`.\n */\n/* jshint ignore:end */\nMessagingConfigurationContext = function MessagingConfigurationContext(version,\n    serviceSid, country) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, country: country, };\n  this._uri = `/Services/${serviceSid}/MessagingConfigurations/${country}`;\n};\n\n/* jshint ignore:start */\n/**\n * update a MessagingConfigurationInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationContext#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.messagingServiceSid -\n *          The SID of the Messaging Service used for this configuration.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessagingConfigurationInstance\n */\n/* jshint ignore:end */\nMessagingConfigurationContext.prototype.update = function update(opts, callback)\n    {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n  if (_.isUndefined(opts.messagingServiceSid)) {\n    throw new Error('Required parameter \"opts.messagingServiceSid\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({'MessagingServiceSid': _.get(opts, 'messagingServiceSid')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new MessagingConfigurationInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.country\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a MessagingConfigurationInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessagingConfigurationInstance\n */\n/* jshint ignore:end */\nMessagingConfigurationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new MessagingConfigurationInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.country\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a MessagingConfigurationInstance\n *\n * @function remove\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessagingConfigurationInstance\n */\n/* jshint ignore:end */\nMessagingConfigurationContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessagingConfigurationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nMessagingConfigurationContext.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  MessagingConfigurationList: MessagingConfigurationList,\n  MessagingConfigurationPage: MessagingConfigurationPage,\n  MessagingConfigurationInstance: MessagingConfigurationInstance,\n  MessagingConfigurationContext: MessagingConfigurationContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}