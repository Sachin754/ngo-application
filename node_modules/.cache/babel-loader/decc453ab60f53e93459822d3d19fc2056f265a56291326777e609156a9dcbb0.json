{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../../base/Page'); /* jshint ignore:line */\nvar StepContextList = require('./step/stepContext').StepContextList;\nvar deserialize = require('../../../../../base/deserialize'); /* jshint ignore:line */\nvar values = require('../../../../../base/values'); /* jshint ignore:line */\n\nvar StepList;\nvar StepPage;\nvar StepInstance;\nvar StepContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the StepList\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementContext.StepList\n *\n * @param {Twilio.Studio.V1} version - Version of the resource\n * @param {string} flowSid - The SID of the Flow\n * @param {string} engagementSid - The SID of the Engagement\n */\n/* jshint ignore:end */\nStepList = function StepList(version, flowSid, engagementSid) {\n  /* jshint ignore:start */\n  /**\n   * @function steps\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Studio.V1.FlowContext.EngagementContext.StepContext}\n   */\n  /* jshint ignore:end */\n  function StepListInstance(sid) {\n    return StepListInstance.get(sid);\n  }\n  StepListInstance._version = version;\n  // Path Solution\n  StepListInstance._solution = {\n    flowSid: flowSid,\n    engagementSid: engagementSid\n  };\n  StepListInstance._uri = `/Flows/${flowSid}/Engagements/${engagementSid}/Steps`;\n  /* jshint ignore:start */\n  /**\n   * Streams StepInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  StepListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists StepInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  StepListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of StepInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  StepListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new StepPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of StepInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  StepListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new StepPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a step\n   *\n   * @function get\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Studio.V1.FlowContext.EngagementContext.StepContext}\n   */\n  /* jshint ignore:end */\n  StepListInstance.get = function get(sid) {\n    return new StepContext(this._version, this._solution.flowSid, this._solution.engagementSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  StepListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  StepListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return StepListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the StepPage\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementContext.StepPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {StepSolution} solution - Path solution\n *\n * @returns StepPage\n */\n/* jshint ignore:end */\nStepPage = function StepPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(StepPage.prototype, Page.prototype);\nStepPage.prototype.constructor = StepPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of StepInstance\n *\n * @function getInstance\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepPage#\n *\n * @param {StepPayload} payload - Payload response from the API\n *\n * @returns StepInstance\n */\n/* jshint ignore:end */\nStepPage.prototype.getInstance = function getInstance(payload) {\n  return new StepInstance(this._version, payload, this._solution.flowSid, this._solution.engagementSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nStepPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nStepPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the StepContext\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementContext.StepInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} flowSid - The SID of the Flow\n * @property {string} engagementSid - The SID of the Engagement\n * @property {string} name -\n *          The event that caused the Flow to transition to the Step\n * @property {object} context - The current state of the flow\n * @property {string} transitionedFrom -\n *          The Widget that preceded the Widget for the Step\n * @property {string} transitionedTo -\n *          The Widget that will follow the Widget for the Step\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {StepPayload} payload - The instance payload\n * @param {sid} flowSid - The SID of the Flow\n * @param {sid} engagementSid - The SID of the Engagement\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nStepInstance = function StepInstance(version, payload, flowSid, engagementSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.flowSid = payload.flow_sid; // jshint ignore:line\n  this.engagementSid = payload.engagement_sid; // jshint ignore:line\n  this.name = payload.name; // jshint ignore:line\n  this.context = payload.context; // jshint ignore:line\n  this.transitionedFrom = payload.transitioned_from; // jshint ignore:line\n  this.transitionedTo = payload.transitioned_to; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    flowSid: flowSid,\n    engagementSid: engagementSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(StepInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new StepContext(this._version, this._solution.flowSid, this._solution.engagementSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a StepInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed StepInstance\n */\n/* jshint ignore:end */\nStepInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the stepContext\n *\n * @function stepContext\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepInstance#\n *\n * @returns {Twilio.Studio.V1.FlowContext.EngagementContext.StepContext.StepContextList}\n */\n/* jshint ignore:end */\nStepInstance.prototype.stepContext = function stepContext() {\n  return this._proxy.stepContext;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nStepInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nStepInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the StepContext\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementContext.StepContext\n *\n * @property {Twilio.Studio.V1.FlowContext.EngagementContext.StepContext.StepContextList} stepContext -\n *          stepContext resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} flowSid - The SID of the Flow\n * @param {sid} engagementSid - The SID of the Engagement\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nStepContext = function StepContext(version, flowSid, engagementSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    flowSid: flowSid,\n    engagementSid: engagementSid,\n    sid: sid\n  };\n  this._uri = `/Flows/${flowSid}/Engagements/${engagementSid}/Steps/${sid}`;\n\n  // Dependents\n  this._stepContext = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a StepInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed StepInstance\n */\n/* jshint ignore:end */\nStepContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new StepInstance(this._version, payload, this._solution.flowSid, this._solution.engagementSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(StepContext.prototype, 'stepContext', {\n  get: function () {\n    if (!this._stepContext) {\n      this._stepContext = new StepContextList(this._version, this._solution.flowSid, this._solution.engagementSid, this._solution.sid);\n    }\n    return this._stepContext;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nStepContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nStepContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  StepList: StepList,\n  StepPage: StepPage,\n  StepInstance: StepInstance,\n  StepContext: StepContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","StepContextList","deserialize","values","StepList","StepPage","StepInstance","StepContext","version","flowSid","engagementSid","StepListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","flow_sid","engagement_sid","name","context","transitionedFrom","transitioned_from","transitionedTo","transitioned_to","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","stepContext","_stepContext","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/studio/v1/flow/engagement/step.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar StepContextList = require('./step/stepContext').StepContextList;\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar StepList;\nvar StepPage;\nvar StepInstance;\nvar StepContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the StepList\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementContext.StepList\n *\n * @param {Twilio.Studio.V1} version - Version of the resource\n * @param {string} flowSid - The SID of the Flow\n * @param {string} engagementSid - The SID of the Engagement\n */\n/* jshint ignore:end */\nStepList = function StepList(version, flowSid, engagementSid) {\n  /* jshint ignore:start */\n  /**\n   * @function steps\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Studio.V1.FlowContext.EngagementContext.StepContext}\n   */\n  /* jshint ignore:end */\n  function StepListInstance(sid) {\n    return StepListInstance.get(sid);\n  }\n\n  StepListInstance._version = version;\n  // Path Solution\n  StepListInstance._solution = {flowSid: flowSid, engagementSid: engagementSid};\n  StepListInstance._uri = `/Flows/${flowSid}/Engagements/${engagementSid}/Steps`;\n  /* jshint ignore:start */\n  /**\n   * Streams StepInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  StepListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists StepInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  StepListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of StepInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  StepListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new StepPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of StepInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  StepListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new StepPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a step\n   *\n   * @function get\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Studio.V1.FlowContext.EngagementContext.StepContext}\n   */\n  /* jshint ignore:end */\n  StepListInstance.get = function get(sid) {\n    return new StepContext(this._version, this._solution.flowSid, this._solution.engagementSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  StepListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  StepListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return StepListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the StepPage\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementContext.StepPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {StepSolution} solution - Path solution\n *\n * @returns StepPage\n */\n/* jshint ignore:end */\nStepPage = function StepPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(StepPage.prototype, Page.prototype);\nStepPage.prototype.constructor = StepPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of StepInstance\n *\n * @function getInstance\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepPage#\n *\n * @param {StepPayload} payload - Payload response from the API\n *\n * @returns StepInstance\n */\n/* jshint ignore:end */\nStepPage.prototype.getInstance = function getInstance(payload) {\n  return new StepInstance(\n    this._version,\n    payload,\n    this._solution.flowSid,\n    this._solution.engagementSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nStepPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nStepPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the StepContext\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementContext.StepInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} flowSid - The SID of the Flow\n * @property {string} engagementSid - The SID of the Engagement\n * @property {string} name -\n *          The event that caused the Flow to transition to the Step\n * @property {object} context - The current state of the flow\n * @property {string} transitionedFrom -\n *          The Widget that preceded the Widget for the Step\n * @property {string} transitionedTo -\n *          The Widget that will follow the Widget for the Step\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {StepPayload} payload - The instance payload\n * @param {sid} flowSid - The SID of the Flow\n * @param {sid} engagementSid - The SID of the Engagement\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nStepInstance = function StepInstance(version, payload, flowSid, engagementSid,\n                                      sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.flowSid = payload.flow_sid; // jshint ignore:line\n  this.engagementSid = payload.engagement_sid; // jshint ignore:line\n  this.name = payload.name; // jshint ignore:line\n  this.context = payload.context; // jshint ignore:line\n  this.transitionedFrom = payload.transitioned_from; // jshint ignore:line\n  this.transitionedTo = payload.transitioned_to; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {flowSid: flowSid, engagementSid: engagementSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(StepInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new StepContext(\n          this._version,\n          this._solution.flowSid,\n          this._solution.engagementSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a StepInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed StepInstance\n */\n/* jshint ignore:end */\nStepInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the stepContext\n *\n * @function stepContext\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepInstance#\n *\n * @returns {Twilio.Studio.V1.FlowContext.EngagementContext.StepContext.StepContextList}\n */\n/* jshint ignore:end */\nStepInstance.prototype.stepContext = function stepContext() {\n  return this._proxy.stepContext;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nStepInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nStepInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the StepContext\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementContext.StepContext\n *\n * @property {Twilio.Studio.V1.FlowContext.EngagementContext.StepContext.StepContextList} stepContext -\n *          stepContext resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} flowSid - The SID of the Flow\n * @param {sid} engagementSid - The SID of the Engagement\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nStepContext = function StepContext(version, flowSid, engagementSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {flowSid: flowSid, engagementSid: engagementSid, sid: sid, };\n  this._uri = `/Flows/${flowSid}/Engagements/${engagementSid}/Steps/${sid}`;\n\n  // Dependents\n  this._stepContext = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a StepInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed StepInstance\n */\n/* jshint ignore:end */\nStepContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new StepInstance(\n      this._version,\n      payload,\n      this._solution.flowSid,\n      this._solution.engagementSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(StepContext.prototype,\n  'stepContext', {\n    get: function() {\n      if (!this._stepContext) {\n        this._stepContext = new StepContextList(\n          this._version,\n          this._solution.flowSid,\n          this._solution.engagementSid,\n          this._solution.sid\n        );\n      }\n      return this._stepContext;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nStepContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nStepContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  StepList: StepList,\n  StepPage: StepPage,\n  StepInstance: StepInstance,\n  StepContext: StepContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}