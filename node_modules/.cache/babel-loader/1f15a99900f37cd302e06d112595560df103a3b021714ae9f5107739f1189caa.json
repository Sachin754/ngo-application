{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../../../base/deserialize'); /* jshint ignore:line */\nvar values = require('../../../../../base/values'); /* jshint ignore:line */\n\nvar SubscribedTrackList;\nvar SubscribedTrackPage;\nvar SubscribedTrackInstance;\nvar SubscribedTrackContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the SubscribedTrackList\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n * @param {string} roomSid - The SID of the room where the track is published\n * @param {string} participantSid -\n *          The SID of the participant that subscribes to the track\n */\n/* jshint ignore:end */\nSubscribedTrackList = function SubscribedTrackList(version, roomSid, participantSid) {\n  /* jshint ignore:start */\n  /**\n   * @function subscribedTracks\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackContext}\n   */\n  /* jshint ignore:end */\n  function SubscribedTrackListInstance(sid) {\n    return SubscribedTrackListInstance.get(sid);\n  }\n  SubscribedTrackListInstance._version = version;\n  // Path Solution\n  SubscribedTrackListInstance._solution = {\n    roomSid: roomSid,\n    participantSid: participantSid\n  };\n  SubscribedTrackListInstance._uri = `/Rooms/${roomSid}/Participants/${participantSid}/SubscribedTracks`;\n  /* jshint ignore:start */\n  /**\n   * Streams SubscribedTrackInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  SubscribedTrackListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists SubscribedTrackInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SubscribedTrackListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of SubscribedTrackInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SubscribedTrackListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SubscribedTrackPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of SubscribedTrackInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SubscribedTrackListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SubscribedTrackPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a subscribed_track\n   *\n   * @function get\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackContext}\n   */\n  /* jshint ignore:end */\n  SubscribedTrackListInstance.get = function get(sid) {\n    return new SubscribedTrackContext(this._version, this._solution.roomSid, this._solution.participantSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  SubscribedTrackListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  SubscribedTrackListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return SubscribedTrackListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the SubscribedTrackPage\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SubscribedTrackSolution} solution - Path solution\n *\n * @returns SubscribedTrackPage\n */\n/* jshint ignore:end */\nSubscribedTrackPage = function SubscribedTrackPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(SubscribedTrackPage.prototype, Page.prototype);\nSubscribedTrackPage.prototype.constructor = SubscribedTrackPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of SubscribedTrackInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackPage#\n *\n * @param {SubscribedTrackPayload} payload - Payload response from the API\n *\n * @returns SubscribedTrackInstance\n */\n/* jshint ignore:end */\nSubscribedTrackPage.prototype.getInstance = function getInstance(payload) {\n  return new SubscribedTrackInstance(this._version, payload, this._solution.roomSid, this._solution.participantSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSubscribedTrackPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nSubscribedTrackPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the SubscribedTrackContext\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} participantSid -\n *          The SID of the participant that subscribes to the track\n * @property {string} publisherSid -\n *          The SID of the participant that publishes the track\n * @property {string} roomSid - The SID of the room where the track is published\n * @property {string} name - The track name\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {boolean} enabled - Whether the track is enabled\n * @property {subscribed_track.kind} kind - The track type\n * @property {string} url - The absolute URL of the resource\n *\n * @param {V1} version - Version of the resource\n * @param {SubscribedTrackPayload} payload - The instance payload\n * @param {sid} roomSid - The SID of the room where the track is published\n * @param {sid} participantSid -\n *          The SID of the participant that subscribes to the track\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nSubscribedTrackInstance = function SubscribedTrackInstance(version, payload, roomSid, participantSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.participantSid = payload.participant_sid; // jshint ignore:line\n  this.publisherSid = payload.publisher_sid; // jshint ignore:line\n  this.roomSid = payload.room_sid; // jshint ignore:line\n  this.name = payload.name; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.enabled = payload.enabled; // jshint ignore:line\n  this.kind = payload.kind; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    roomSid: roomSid,\n    participantSid: participantSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(SubscribedTrackInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new SubscribedTrackContext(this._version, this._solution.roomSid, this._solution.participantSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a SubscribedTrackInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscribedTrackInstance\n */\n/* jshint ignore:end */\nSubscribedTrackInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSubscribedTrackInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nSubscribedTrackInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the SubscribedTrackContext\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} roomSid -\n *          The SID of the Room where the Track resource to fetch is subscribed\n * @param {sid_like} participantSid -\n *          The SID of the participant that subscribes to the Track resource to fetch\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nSubscribedTrackContext = function SubscribedTrackContext(version, roomSid, participantSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    roomSid: roomSid,\n    participantSid: participantSid,\n    sid: sid\n  };\n  this._uri = `/Rooms/${roomSid}/Participants/${participantSid}/SubscribedTracks/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a SubscribedTrackInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscribedTrackInstance\n */\n/* jshint ignore:end */\nSubscribedTrackContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SubscribedTrackInstance(this._version, payload, this._solution.roomSid, this._solution.participantSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSubscribedTrackContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nSubscribedTrackContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  SubscribedTrackList: SubscribedTrackList,\n  SubscribedTrackPage: SubscribedTrackPage,\n  SubscribedTrackInstance: SubscribedTrackInstance,\n  SubscribedTrackContext: SubscribedTrackContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","values","SubscribedTrackList","SubscribedTrackPage","SubscribedTrackInstance","SubscribedTrackContext","version","roomSid","participantSid","SubscribedTrackListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","participant_sid","publisherSid","publisher_sid","room_sid","name","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","enabled","kind","url","_context","undefined","Object","defineProperty","fetch","_proxy","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/video/v1/room/roomParticipant/roomParticipantSubscribedTrack.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar SubscribedTrackList;\nvar SubscribedTrackPage;\nvar SubscribedTrackInstance;\nvar SubscribedTrackContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the SubscribedTrackList\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n * @param {string} roomSid - The SID of the room where the track is published\n * @param {string} participantSid -\n *          The SID of the participant that subscribes to the track\n */\n/* jshint ignore:end */\nSubscribedTrackList = function SubscribedTrackList(version, roomSid,\n                                                    participantSid) {\n  /* jshint ignore:start */\n  /**\n   * @function subscribedTracks\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackContext}\n   */\n  /* jshint ignore:end */\n  function SubscribedTrackListInstance(sid) {\n    return SubscribedTrackListInstance.get(sid);\n  }\n\n  SubscribedTrackListInstance._version = version;\n  // Path Solution\n  SubscribedTrackListInstance._solution = {roomSid: roomSid, participantSid: participantSid};\n  SubscribedTrackListInstance._uri = `/Rooms/${roomSid}/Participants/${participantSid}/SubscribedTracks`;\n  /* jshint ignore:start */\n  /**\n   * Streams SubscribedTrackInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  SubscribedTrackListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists SubscribedTrackInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SubscribedTrackListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of SubscribedTrackInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SubscribedTrackListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SubscribedTrackPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of SubscribedTrackInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SubscribedTrackListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SubscribedTrackPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a subscribed_track\n   *\n   * @function get\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackContext}\n   */\n  /* jshint ignore:end */\n  SubscribedTrackListInstance.get = function get(sid) {\n    return new SubscribedTrackContext(\n      this._version,\n      this._solution.roomSid,\n      this._solution.participantSid,\n      sid\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  SubscribedTrackListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  SubscribedTrackListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return SubscribedTrackListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SubscribedTrackPage\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SubscribedTrackSolution} solution - Path solution\n *\n * @returns SubscribedTrackPage\n */\n/* jshint ignore:end */\nSubscribedTrackPage = function SubscribedTrackPage(version, response, solution)\n                                                    {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(SubscribedTrackPage.prototype, Page.prototype);\nSubscribedTrackPage.prototype.constructor = SubscribedTrackPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of SubscribedTrackInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackPage#\n *\n * @param {SubscribedTrackPayload} payload - Payload response from the API\n *\n * @returns SubscribedTrackInstance\n */\n/* jshint ignore:end */\nSubscribedTrackPage.prototype.getInstance = function getInstance(payload) {\n  return new SubscribedTrackInstance(\n    this._version,\n    payload,\n    this._solution.roomSid,\n    this._solution.participantSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSubscribedTrackPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSubscribedTrackPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SubscribedTrackContext\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} participantSid -\n *          The SID of the participant that subscribes to the track\n * @property {string} publisherSid -\n *          The SID of the participant that publishes the track\n * @property {string} roomSid - The SID of the room where the track is published\n * @property {string} name - The track name\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {boolean} enabled - Whether the track is enabled\n * @property {subscribed_track.kind} kind - The track type\n * @property {string} url - The absolute URL of the resource\n *\n * @param {V1} version - Version of the resource\n * @param {SubscribedTrackPayload} payload - The instance payload\n * @param {sid} roomSid - The SID of the room where the track is published\n * @param {sid} participantSid -\n *          The SID of the participant that subscribes to the track\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nSubscribedTrackInstance = function SubscribedTrackInstance(version, payload,\n                                                            roomSid,\n                                                            participantSid, sid)\n                                                            {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.participantSid = payload.participant_sid; // jshint ignore:line\n  this.publisherSid = payload.publisher_sid; // jshint ignore:line\n  this.roomSid = payload.room_sid; // jshint ignore:line\n  this.name = payload.name; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.enabled = payload.enabled; // jshint ignore:line\n  this.kind = payload.kind; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {roomSid: roomSid, participantSid: participantSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(SubscribedTrackInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new SubscribedTrackContext(\n          this._version,\n          this._solution.roomSid,\n          this._solution.participantSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a SubscribedTrackInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscribedTrackInstance\n */\n/* jshint ignore:end */\nSubscribedTrackInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSubscribedTrackInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSubscribedTrackInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SubscribedTrackContext\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} roomSid -\n *          The SID of the Room where the Track resource to fetch is subscribed\n * @param {sid_like} participantSid -\n *          The SID of the participant that subscribes to the Track resource to fetch\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nSubscribedTrackContext = function SubscribedTrackContext(version, roomSid,\n                                                          participantSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {roomSid: roomSid, participantSid: participantSid, sid: sid, };\n  this._uri = `/Rooms/${roomSid}/Participants/${participantSid}/SubscribedTracks/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a SubscribedTrackInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscribedTrackInstance\n */\n/* jshint ignore:end */\nSubscribedTrackContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new SubscribedTrackInstance(\n      this._version,\n      payload,\n      this._solution.roomSid,\n      this._solution.participantSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSubscribedTrackContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nSubscribedTrackContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  SubscribedTrackList: SubscribedTrackList,\n  SubscribedTrackPage: SubscribedTrackPage,\n  SubscribedTrackInstance: SubscribedTrackInstance,\n  SubscribedTrackContext: SubscribedTrackContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}