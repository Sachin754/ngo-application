{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar InviteList = require('./channel/invite').InviteList;\nvar MemberList = require('./channel/member').MemberList;\nvar MessageList = require('./channel/message').MessageList;\nvar Page = require('../../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../../base/values'); /* jshint ignore:line */\n\nvar ChannelList;\nvar ChannelPage;\nvar ChannelInstance;\nvar ChannelContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ChannelList\n *\n * @constructor Twilio.IpMessaging.V1.ServiceContext.ChannelList\n *\n * @param {Twilio.IpMessaging.V1} version - Version of the resource\n * @param {string} serviceSid - The service_sid\n */\n/* jshint ignore:end */\nChannelList = function ChannelList(version, serviceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function channels\n   * @memberof Twilio.IpMessaging.V1.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.IpMessaging.V1.ServiceContext.ChannelContext}\n   */\n  /* jshint ignore:end */\n  function ChannelListInstance(sid) {\n    return ChannelListInstance.get(sid);\n  }\n  ChannelListInstance._version = version;\n  // Path Solution\n  ChannelListInstance._solution = {\n    serviceSid: serviceSid\n  };\n  ChannelListInstance._uri = `/Services/${serviceSid}/Channels`;\n  /* jshint ignore:start */\n  /**\n   * create a ChannelInstance\n   *\n   * @function create\n   * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] - The friendly_name\n   * @param {string} [opts.uniqueName] - The unique_name\n   * @param {string} [opts.attributes] - The attributes\n   * @param {channel.channel_type} [opts.type] - The type\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ChannelInstance\n   */\n  /* jshint ignore:end */\n  ChannelListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'Attributes': _.get(opts, 'attributes'),\n      'Type': _.get(opts, 'type')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ChannelInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ChannelInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {channel.channel_type|list} [opts.type] - The type\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ChannelListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ChannelInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {channel.channel_type|list} [opts.type] - The type\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ChannelListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ChannelInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {channel.channel_type|list} [opts.type] - The type\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ChannelListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Type': serialize.map(_.get(opts, 'type'), function (e) {\n        return e;\n      }),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ChannelPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ChannelInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ChannelListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ChannelPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a channel\n   *\n   * @function get\n   * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelList#\n   *\n   * @param {string} sid - The sid\n   *\n   * @returns {Twilio.IpMessaging.V1.ServiceContext.ChannelContext}\n   */\n  /* jshint ignore:end */\n  ChannelListInstance.get = function get(sid) {\n    return new ChannelContext(this._version, this._solution.serviceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ChannelListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  ChannelListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return ChannelListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ChannelPage\n *\n * @constructor Twilio.IpMessaging.V1.ServiceContext.ChannelPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ChannelSolution} solution - Path solution\n *\n * @returns ChannelPage\n */\n/* jshint ignore:end */\nChannelPage = function ChannelPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(ChannelPage.prototype, Page.prototype);\nChannelPage.prototype.constructor = ChannelPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ChannelInstance\n *\n * @function getInstance\n * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelPage#\n *\n * @param {ChannelPayload} payload - Payload response from the API\n *\n * @returns ChannelInstance\n */\n/* jshint ignore:end */\nChannelPage.prototype.getInstance = function getInstance(payload) {\n  return new ChannelInstance(this._version, payload, this._solution.serviceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nChannelPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nChannelPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ChannelContext\n *\n * @constructor Twilio.IpMessaging.V1.ServiceContext.ChannelInstance\n *\n * @property {string} sid - The sid\n * @property {string} accountSid - The account_sid\n * @property {string} serviceSid - The service_sid\n * @property {string} friendlyName - The friendly_name\n * @property {string} uniqueName - The unique_name\n * @property {string} attributes - The attributes\n * @property {channel.channel_type} type - The type\n * @property {Date} dateCreated - The date_created\n * @property {Date} dateUpdated - The date_updated\n * @property {string} createdBy - The created_by\n * @property {number} membersCount - The members_count\n * @property {number} messagesCount - The messages_count\n * @property {string} url - The url\n * @property {string} links - The links\n *\n * @param {V1} version - Version of the resource\n * @param {ChannelPayload} payload - The instance payload\n * @param {sid} serviceSid - The service_sid\n * @param {sid_like} sid - The sid\n */\n/* jshint ignore:end */\nChannelInstance = function ChannelInstance(version, payload, serviceSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.attributes = payload.attributes; // jshint ignore:line\n  this.type = payload.type; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.createdBy = payload.created_by; // jshint ignore:line\n  this.membersCount = deserialize.integer(payload.members_count); // jshint ignore:line\n  this.messagesCount = deserialize.integer(payload.messages_count); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(ChannelInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ChannelContext(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ChannelInstance\n *\n * @function fetch\n * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChannelInstance\n */\n/* jshint ignore:end */\nChannelInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a ChannelInstance\n *\n * @function remove\n * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChannelInstance\n */\n/* jshint ignore:end */\nChannelInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ChannelInstance\n *\n * @function update\n * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - The friendly_name\n * @param {string} [opts.uniqueName] - The unique_name\n * @param {string} [opts.attributes] - The attributes\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChannelInstance\n */\n/* jshint ignore:end */\nChannelInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the members\n *\n * @function members\n * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelInstance#\n *\n * @returns {Twilio.IpMessaging.V1.ServiceContext.ChannelContext.MemberList}\n */\n/* jshint ignore:end */\nChannelInstance.prototype.members = function members() {\n  return this._proxy.members;\n};\n\n/* jshint ignore:start */\n/**\n * Access the messages\n *\n * @function messages\n * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelInstance#\n *\n * @returns {Twilio.IpMessaging.V1.ServiceContext.ChannelContext.MessageList}\n */\n/* jshint ignore:end */\nChannelInstance.prototype.messages = function messages() {\n  return this._proxy.messages;\n};\n\n/* jshint ignore:start */\n/**\n * Access the invites\n *\n * @function invites\n * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelInstance#\n *\n * @returns {Twilio.IpMessaging.V1.ServiceContext.ChannelContext.InviteList}\n */\n/* jshint ignore:end */\nChannelInstance.prototype.invites = function invites() {\n  return this._proxy.invites;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nChannelInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nChannelInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ChannelContext\n *\n * @constructor Twilio.IpMessaging.V1.ServiceContext.ChannelContext\n *\n * @property {Twilio.IpMessaging.V1.ServiceContext.ChannelContext.MemberList} members -\n *          members resource\n * @property {Twilio.IpMessaging.V1.ServiceContext.ChannelContext.MessageList} messages -\n *          messages resource\n * @property {Twilio.IpMessaging.V1.ServiceContext.ChannelContext.InviteList} invites -\n *          invites resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} serviceSid - The service_sid\n * @param {sid_like} sid - The sid\n */\n/* jshint ignore:end */\nChannelContext = function ChannelContext(version, serviceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid\n  };\n  this._uri = `/Services/${serviceSid}/Channels/${sid}`;\n\n  // Dependents\n  this._members = undefined;\n  this._messages = undefined;\n  this._invites = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ChannelInstance\n *\n * @function fetch\n * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChannelInstance\n */\n/* jshint ignore:end */\nChannelContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ChannelInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ChannelInstance\n *\n * @function remove\n * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChannelInstance\n */\n/* jshint ignore:end */\nChannelContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ChannelInstance\n *\n * @function update\n * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - The friendly_name\n * @param {string} [opts.uniqueName] - The unique_name\n * @param {string} [opts.attributes] - The attributes\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChannelInstance\n */\n/* jshint ignore:end */\nChannelContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'UniqueName': _.get(opts, 'uniqueName'),\n    'Attributes': _.get(opts, 'attributes')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ChannelInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(ChannelContext.prototype, 'members', {\n  get: function () {\n    if (!this._members) {\n      this._members = new MemberList(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n    return this._members;\n  }\n});\nObject.defineProperty(ChannelContext.prototype, 'messages', {\n  get: function () {\n    if (!this._messages) {\n      this._messages = new MessageList(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n    return this._messages;\n  }\n});\nObject.defineProperty(ChannelContext.prototype, 'invites', {\n  get: function () {\n    if (!this._invites) {\n      this._invites = new InviteList(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n    return this._invites;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nChannelContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nChannelContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  ChannelList: ChannelList,\n  ChannelPage: ChannelPage,\n  ChannelInstance: ChannelInstance,\n  ChannelContext: ChannelContext\n};","map":{"version":3,"names":["Q","require","_","util","InviteList","MemberList","MessageList","Page","deserialize","serialize","values","ChannelList","ChannelPage","ChannelInstance","ChannelContext","version","serviceSid","ChannelListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isFunction","deferred","defer","data","of","promise","uri","method","then","payload","resolve","bind","catch","error","reject","nodeify","each","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","map","e","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","service_sid","friendlyName","friendly_name","uniqueName","unique_name","attributes","type","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","createdBy","created_by","membersCount","integer","members_count","messagesCount","messages_count","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","remove","update","members","messages","invites","_members","_messages","_invites","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/ipMessaging/v1/service/channel.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar InviteList = require('./channel/invite').InviteList;\nvar MemberList = require('./channel/member').MemberList;\nvar MessageList = require('./channel/message').MessageList;\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar ChannelList;\nvar ChannelPage;\nvar ChannelInstance;\nvar ChannelContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ChannelList\n *\n * @constructor Twilio.IpMessaging.V1.ServiceContext.ChannelList\n *\n * @param {Twilio.IpMessaging.V1} version - Version of the resource\n * @param {string} serviceSid - The service_sid\n */\n/* jshint ignore:end */\nChannelList = function ChannelList(version, serviceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function channels\n   * @memberof Twilio.IpMessaging.V1.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.IpMessaging.V1.ServiceContext.ChannelContext}\n   */\n  /* jshint ignore:end */\n  function ChannelListInstance(sid) {\n    return ChannelListInstance.get(sid);\n  }\n\n  ChannelListInstance._version = version;\n  // Path Solution\n  ChannelListInstance._solution = {serviceSid: serviceSid};\n  ChannelListInstance._uri = `/Services/${serviceSid}/Channels`;\n  /* jshint ignore:start */\n  /**\n   * create a ChannelInstance\n   *\n   * @function create\n   * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] - The friendly_name\n   * @param {string} [opts.uniqueName] - The unique_name\n   * @param {string} [opts.attributes] - The attributes\n   * @param {channel.channel_type} [opts.type] - The type\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ChannelInstance\n   */\n  /* jshint ignore:end */\n  ChannelListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'Attributes': _.get(opts, 'attributes'),\n      'Type': _.get(opts, 'type')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ChannelInstance(\n        this._version,\n        payload,\n        this._solution.serviceSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ChannelInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {channel.channel_type|list} [opts.type] - The type\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ChannelListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ChannelInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {channel.channel_type|list} [opts.type] - The type\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ChannelListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ChannelInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {channel.channel_type|list} [opts.type] - The type\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ChannelListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Type': serialize.map(_.get(opts, 'type'), function(e) { return e; }),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ChannelPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ChannelInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ChannelListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ChannelPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a channel\n   *\n   * @function get\n   * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelList#\n   *\n   * @param {string} sid - The sid\n   *\n   * @returns {Twilio.IpMessaging.V1.ServiceContext.ChannelContext}\n   */\n  /* jshint ignore:end */\n  ChannelListInstance.get = function get(sid) {\n    return new ChannelContext(this._version, this._solution.serviceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ChannelListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ChannelListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ChannelListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ChannelPage\n *\n * @constructor Twilio.IpMessaging.V1.ServiceContext.ChannelPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ChannelSolution} solution - Path solution\n *\n * @returns ChannelPage\n */\n/* jshint ignore:end */\nChannelPage = function ChannelPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ChannelPage.prototype, Page.prototype);\nChannelPage.prototype.constructor = ChannelPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ChannelInstance\n *\n * @function getInstance\n * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelPage#\n *\n * @param {ChannelPayload} payload - Payload response from the API\n *\n * @returns ChannelInstance\n */\n/* jshint ignore:end */\nChannelPage.prototype.getInstance = function getInstance(payload) {\n  return new ChannelInstance(this._version, payload, this._solution.serviceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nChannelPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nChannelPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ChannelContext\n *\n * @constructor Twilio.IpMessaging.V1.ServiceContext.ChannelInstance\n *\n * @property {string} sid - The sid\n * @property {string} accountSid - The account_sid\n * @property {string} serviceSid - The service_sid\n * @property {string} friendlyName - The friendly_name\n * @property {string} uniqueName - The unique_name\n * @property {string} attributes - The attributes\n * @property {channel.channel_type} type - The type\n * @property {Date} dateCreated - The date_created\n * @property {Date} dateUpdated - The date_updated\n * @property {string} createdBy - The created_by\n * @property {number} membersCount - The members_count\n * @property {number} messagesCount - The messages_count\n * @property {string} url - The url\n * @property {string} links - The links\n *\n * @param {V1} version - Version of the resource\n * @param {ChannelPayload} payload - The instance payload\n * @param {sid} serviceSid - The service_sid\n * @param {sid_like} sid - The sid\n */\n/* jshint ignore:end */\nChannelInstance = function ChannelInstance(version, payload, serviceSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.attributes = payload.attributes; // jshint ignore:line\n  this.type = payload.type; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.createdBy = payload.created_by; // jshint ignore:line\n  this.membersCount = deserialize.integer(payload.members_count); // jshint ignore:line\n  this.messagesCount = deserialize.integer(payload.messages_count); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(ChannelInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new ChannelContext(this._version, this._solution.serviceSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ChannelInstance\n *\n * @function fetch\n * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChannelInstance\n */\n/* jshint ignore:end */\nChannelInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a ChannelInstance\n *\n * @function remove\n * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChannelInstance\n */\n/* jshint ignore:end */\nChannelInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ChannelInstance\n *\n * @function update\n * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - The friendly_name\n * @param {string} [opts.uniqueName] - The unique_name\n * @param {string} [opts.attributes] - The attributes\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChannelInstance\n */\n/* jshint ignore:end */\nChannelInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the members\n *\n * @function members\n * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelInstance#\n *\n * @returns {Twilio.IpMessaging.V1.ServiceContext.ChannelContext.MemberList}\n */\n/* jshint ignore:end */\nChannelInstance.prototype.members = function members() {\n  return this._proxy.members;\n};\n\n/* jshint ignore:start */\n/**\n * Access the messages\n *\n * @function messages\n * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelInstance#\n *\n * @returns {Twilio.IpMessaging.V1.ServiceContext.ChannelContext.MessageList}\n */\n/* jshint ignore:end */\nChannelInstance.prototype.messages = function messages() {\n  return this._proxy.messages;\n};\n\n/* jshint ignore:start */\n/**\n * Access the invites\n *\n * @function invites\n * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelInstance#\n *\n * @returns {Twilio.IpMessaging.V1.ServiceContext.ChannelContext.InviteList}\n */\n/* jshint ignore:end */\nChannelInstance.prototype.invites = function invites() {\n  return this._proxy.invites;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nChannelInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nChannelInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ChannelContext\n *\n * @constructor Twilio.IpMessaging.V1.ServiceContext.ChannelContext\n *\n * @property {Twilio.IpMessaging.V1.ServiceContext.ChannelContext.MemberList} members -\n *          members resource\n * @property {Twilio.IpMessaging.V1.ServiceContext.ChannelContext.MessageList} messages -\n *          messages resource\n * @property {Twilio.IpMessaging.V1.ServiceContext.ChannelContext.InviteList} invites -\n *          invites resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} serviceSid - The service_sid\n * @param {sid_like} sid - The sid\n */\n/* jshint ignore:end */\nChannelContext = function ChannelContext(version, serviceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, sid: sid, };\n  this._uri = `/Services/${serviceSid}/Channels/${sid}`;\n\n  // Dependents\n  this._members = undefined;\n  this._messages = undefined;\n  this._invites = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ChannelInstance\n *\n * @function fetch\n * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChannelInstance\n */\n/* jshint ignore:end */\nChannelContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ChannelInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ChannelInstance\n *\n * @function remove\n * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChannelInstance\n */\n/* jshint ignore:end */\nChannelContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ChannelInstance\n *\n * @function update\n * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - The friendly_name\n * @param {string} [opts.uniqueName] - The unique_name\n * @param {string} [opts.attributes] - The attributes\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChannelInstance\n */\n/* jshint ignore:end */\nChannelContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'UniqueName': _.get(opts, 'uniqueName'),\n    'Attributes': _.get(opts, 'attributes')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ChannelInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ChannelContext.prototype,\n  'members', {\n    get: function() {\n      if (!this._members) {\n        this._members = new MemberList(this._version, this._solution.serviceSid, this._solution.sid);\n      }\n      return this._members;\n    }\n});\n\nObject.defineProperty(ChannelContext.prototype,\n  'messages', {\n    get: function() {\n      if (!this._messages) {\n        this._messages = new MessageList(this._version, this._solution.serviceSid, this._solution.sid);\n      }\n      return this._messages;\n    }\n});\n\nObject.defineProperty(ChannelContext.prototype,\n  'invites', {\n    get: function() {\n      if (!this._invites) {\n        this._invites = new InviteList(this._version, this._solution.serviceSid, this._solution.sid);\n      }\n      return this._invites;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.IpMessaging.V1.ServiceContext.ChannelContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nChannelContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nChannelContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ChannelList: ChannelList,\n  ChannelPage: ChannelPage,\n  ChannelInstance: ChannelInstance,\n  ChannelContext: ChannelContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}