{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../base/Page'); /* jshint ignore:line */\nvar TrustProductsChannelEndpointAssignmentList = require('./trustProducts/trustProductsChannelEndpointAssignment').TrustProductsChannelEndpointAssignmentList;\nvar TrustProductsEntityAssignmentsList = require('./trustProducts/trustProductsEntityAssignments').TrustProductsEntityAssignmentsList;\nvar TrustProductsEvaluationsList = require('./trustProducts/trustProductsEvaluations').TrustProductsEvaluationsList;\nvar deserialize = require('../../../base/deserialize'); /* jshint ignore:line */\nvar values = require('../../../base/values'); /* jshint ignore:line */\n\nvar TrustProductsList;\nvar TrustProductsPage;\nvar TrustProductsInstance;\nvar TrustProductsContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the TrustProductsList\n *\n * @constructor Twilio.Trusthub.V1.TrustProductsList\n *\n * @param {Twilio.Trusthub.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nTrustProductsList = function TrustProductsList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function trustProducts\n   * @memberof Twilio.Trusthub.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Trusthub.V1.TrustProductsContext}\n   */\n  /* jshint ignore:end */\n  function TrustProductsListInstance(sid) {\n    return TrustProductsListInstance.get(sid);\n  }\n  TrustProductsListInstance._version = version;\n  // Path Solution\n  TrustProductsListInstance._solution = {};\n  TrustProductsListInstance._uri = `/TrustProducts`;\n  /* jshint ignore:start */\n  /**\n   * create a TrustProductsInstance\n   *\n   * @function create\n   * @memberof Twilio.Trusthub.V1.TrustProductsList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName -\n   *          The string that you assigned to describe the resource\n   * @param {string} opts.email - The email address\n   * @param {string} opts.policySid - The unique string of a policy.\n   * @param {string} [opts.statusCallback] -\n   *          The URL we call to inform your application of status changes.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TrustProductsInstance\n   */\n  /* jshint ignore:end */\n  TrustProductsListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n    if (_.isUndefined(opts.email)) {\n      throw new Error('Required parameter \"opts.email\" missing.');\n    }\n    if (_.isUndefined(opts.policySid)) {\n      throw new Error('Required parameter \"opts.policySid\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Email': _.get(opts, 'email'),\n      'PolicySid': _.get(opts, 'policySid'),\n      'StatusCallback': _.get(opts, 'statusCallback')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TrustProductsInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams TrustProductsInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Trusthub.V1.TrustProductsList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {trust_products.status} [opts.status] -\n   *          The verification status of the Customer-Profile resource\n   * @param {string} [opts.friendlyName] -\n   *          The string that you assigned to describe the resource\n   * @param {string} [opts.policySid] - The unique string of a policy.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  TrustProductsListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists TrustProductsInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Trusthub.V1.TrustProductsList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {trust_products.status} [opts.status] -\n   *          The verification status of the Customer-Profile resource\n   * @param {string} [opts.friendlyName] -\n   *          The string that you assigned to describe the resource\n   * @param {string} [opts.policySid] - The unique string of a policy.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TrustProductsListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of TrustProductsInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Trusthub.V1.TrustProductsList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {trust_products.status} [opts.status] -\n   *          The verification status of the Customer-Profile resource\n   * @param {string} [opts.friendlyName] -\n   *          The string that you assigned to describe the resource\n   * @param {string} [opts.policySid] - The unique string of a policy.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TrustProductsListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Status': _.get(opts, 'status'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'PolicySid': _.get(opts, 'policySid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TrustProductsPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of TrustProductsInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Trusthub.V1.TrustProductsList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TrustProductsListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TrustProductsPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a trust_products\n   *\n   * @function get\n   * @memberof Twilio.Trusthub.V1.TrustProductsList#\n   *\n   * @param {string} sid - The unique string that identifies the resource.\n   *\n   * @returns {Twilio.Trusthub.V1.TrustProductsContext}\n   */\n  /* jshint ignore:end */\n  TrustProductsListInstance.get = function get(sid) {\n    return new TrustProductsContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Trusthub.V1.TrustProductsList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  TrustProductsListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  TrustProductsListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return TrustProductsListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the TrustProductsPage\n *\n * @constructor Twilio.Trusthub.V1.TrustProductsPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TrustProductsSolution} solution - Path solution\n *\n * @returns TrustProductsPage\n */\n/* jshint ignore:end */\nTrustProductsPage = function TrustProductsPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(TrustProductsPage.prototype, Page.prototype);\nTrustProductsPage.prototype.constructor = TrustProductsPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of TrustProductsInstance\n *\n * @function getInstance\n * @memberof Twilio.Trusthub.V1.TrustProductsPage#\n *\n * @param {TrustProductsPayload} payload - Payload response from the API\n *\n * @returns TrustProductsInstance\n */\n/* jshint ignore:end */\nTrustProductsPage.prototype.getInstance = function getInstance(payload) {\n  return new TrustProductsInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trusthub.V1.TrustProductsPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTrustProductsPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nTrustProductsPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the TrustProductsContext\n *\n * @constructor Twilio.Trusthub.V1.TrustProductsInstance\n *\n * @property {string} sid - The unique string that identifies the resource.\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} policySid - The unique string of a policy.\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {trust_products.status} status -\n *          The verification status of the Customer-Profile resource\n * @property {Date} validUntil -\n *          The ISO 8601 date and time in GMT when the resource will be valid until.\n * @property {string} email - The email address\n * @property {string} statusCallback -\n *          The URL we call to inform your application of status changes.\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the Customer-Profile resource\n * @property {string} links -\n *          The URLs of the Assigned Items of the Customer-Profile resource\n *\n * @param {V1} version - Version of the resource\n * @param {TrustProductsPayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource.\n */\n/* jshint ignore:end */\nTrustProductsInstance = function TrustProductsInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.policySid = payload.policy_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.validUntil = deserialize.iso8601DateTime(payload.valid_until); // jshint ignore:line\n  this.email = payload.email; // jshint ignore:line\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(TrustProductsInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new TrustProductsContext(this._version, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a TrustProductsInstance\n *\n * @function fetch\n * @memberof Twilio.Trusthub.V1.TrustProductsInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrustProductsInstance\n */\n/* jshint ignore:end */\nTrustProductsInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a TrustProductsInstance\n *\n * @function update\n * @memberof Twilio.Trusthub.V1.TrustProductsInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {trust_products.status} [opts.status] -\n *          The verification status of the Customer-Profile resource\n * @param {string} [opts.statusCallback] -\n *          The URL we call to inform your application of status changes.\n * @param {string} [opts.friendlyName] -\n *          The string that you assigned to describe the resource\n * @param {string} [opts.email] - The email address\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrustProductsInstance\n */\n/* jshint ignore:end */\nTrustProductsInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a TrustProductsInstance\n *\n * @function remove\n * @memberof Twilio.Trusthub.V1.TrustProductsInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrustProductsInstance\n */\n/* jshint ignore:end */\nTrustProductsInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the trustProductsEntityAssignments\n *\n * @function trustProductsEntityAssignments\n * @memberof Twilio.Trusthub.V1.TrustProductsInstance#\n *\n * @returns {Twilio.Trusthub.V1.TrustProductsContext.TrustProductsEntityAssignmentsList}\n */\n/* jshint ignore:end */\nTrustProductsInstance.prototype.trustProductsEntityAssignments = function trustProductsEntityAssignments() {\n  return this._proxy.trustProductsEntityAssignments;\n};\n\n/* jshint ignore:start */\n/**\n * Access the trustProductsEvaluations\n *\n * @function trustProductsEvaluations\n * @memberof Twilio.Trusthub.V1.TrustProductsInstance#\n *\n * @returns {Twilio.Trusthub.V1.TrustProductsContext.TrustProductsEvaluationsList}\n */\n/* jshint ignore:end */\nTrustProductsInstance.prototype.trustProductsEvaluations = function trustProductsEvaluations() {\n  return this._proxy.trustProductsEvaluations;\n};\n\n/* jshint ignore:start */\n/**\n * Access the trustProductsChannelEndpointAssignment\n *\n * @function trustProductsChannelEndpointAssignment\n * @memberof Twilio.Trusthub.V1.TrustProductsInstance#\n *\n * @returns {Twilio.Trusthub.V1.TrustProductsContext.TrustProductsChannelEndpointAssignmentList}\n */\n/* jshint ignore:end */\nTrustProductsInstance.prototype.trustProductsChannelEndpointAssignment = function trustProductsChannelEndpointAssignment() {\n  return this._proxy.trustProductsChannelEndpointAssignment;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trusthub.V1.TrustProductsInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTrustProductsInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nTrustProductsInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the TrustProductsContext\n *\n * @constructor Twilio.Trusthub.V1.TrustProductsContext\n *\n * @property {Twilio.Trusthub.V1.TrustProductsContext.TrustProductsEntityAssignmentsList} trustProductsEntityAssignments -\n *          trustProductsEntityAssignments resource\n * @property {Twilio.Trusthub.V1.TrustProductsContext.TrustProductsEvaluationsList} trustProductsEvaluations -\n *          trustProductsEvaluations resource\n * @property {Twilio.Trusthub.V1.TrustProductsContext.TrustProductsChannelEndpointAssignmentList} trustProductsChannelEndpointAssignment -\n *          trustProductsChannelEndpointAssignment resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource.\n */\n/* jshint ignore:end */\nTrustProductsContext = function TrustProductsContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/TrustProducts/${sid}`;\n\n  // Dependents\n  this._trustProductsEntityAssignments = undefined;\n  this._trustProductsEvaluations = undefined;\n  this._trustProductsChannelEndpointAssignment = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a TrustProductsInstance\n *\n * @function fetch\n * @memberof Twilio.Trusthub.V1.TrustProductsContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrustProductsInstance\n */\n/* jshint ignore:end */\nTrustProductsContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TrustProductsInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a TrustProductsInstance\n *\n * @function update\n * @memberof Twilio.Trusthub.V1.TrustProductsContext#\n *\n * @param {object} [opts] - Options for request\n * @param {trust_products.status} [opts.status] -\n *          The verification status of the Customer-Profile resource\n * @param {string} [opts.statusCallback] -\n *          The URL we call to inform your application of status changes.\n * @param {string} [opts.friendlyName] -\n *          The string that you assigned to describe the resource\n * @param {string} [opts.email] - The email address\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrustProductsInstance\n */\n/* jshint ignore:end */\nTrustProductsContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Status': _.get(opts, 'status'),\n    'StatusCallback': _.get(opts, 'statusCallback'),\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'Email': _.get(opts, 'email')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TrustProductsInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a TrustProductsInstance\n *\n * @function remove\n * @memberof Twilio.Trusthub.V1.TrustProductsContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrustProductsInstance\n */\n/* jshint ignore:end */\nTrustProductsContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(TrustProductsContext.prototype, 'trustProductsEntityAssignments', {\n  get: function () {\n    if (!this._trustProductsEntityAssignments) {\n      this._trustProductsEntityAssignments = new TrustProductsEntityAssignmentsList(this._version, this._solution.sid);\n    }\n    return this._trustProductsEntityAssignments;\n  }\n});\nObject.defineProperty(TrustProductsContext.prototype, 'trustProductsEvaluations', {\n  get: function () {\n    if (!this._trustProductsEvaluations) {\n      this._trustProductsEvaluations = new TrustProductsEvaluationsList(this._version, this._solution.sid);\n    }\n    return this._trustProductsEvaluations;\n  }\n});\nObject.defineProperty(TrustProductsContext.prototype, 'trustProductsChannelEndpointAssignment', {\n  get: function () {\n    if (!this._trustProductsChannelEndpointAssignment) {\n      this._trustProductsChannelEndpointAssignment = new TrustProductsChannelEndpointAssignmentList(this._version, this._solution.sid);\n    }\n    return this._trustProductsChannelEndpointAssignment;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trusthub.V1.TrustProductsContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTrustProductsContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nTrustProductsContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  TrustProductsList: TrustProductsList,\n  TrustProductsPage: TrustProductsPage,\n  TrustProductsInstance: TrustProductsInstance,\n  TrustProductsContext: TrustProductsContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","TrustProductsChannelEndpointAssignmentList","TrustProductsEntityAssignmentsList","TrustProductsEvaluationsList","deserialize","values","TrustProductsList","TrustProductsPage","TrustProductsInstance","TrustProductsContext","version","TrustProductsListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","friendlyName","email","policySid","deferred","defer","data","of","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","policy_sid","friendly_name","status","validUntil","iso8601DateTime","valid_until","statusCallback","status_callback","dateCreated","date_created","dateUpdated","date_updated","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","trustProductsEntityAssignments","trustProductsEvaluations","trustProductsChannelEndpointAssignment","_trustProductsEntityAssignments","_trustProductsEvaluations","_trustProductsChannelEndpointAssignment","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/trusthub/v1/trustProducts.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar TrustProductsChannelEndpointAssignmentList = require(\n    './trustProducts/trustProductsChannelEndpointAssignment').TrustProductsChannelEndpointAssignmentList;\nvar TrustProductsEntityAssignmentsList = require(\n    './trustProducts/trustProductsEntityAssignments').TrustProductsEntityAssignmentsList;\nvar TrustProductsEvaluationsList = require(\n    './trustProducts/trustProductsEvaluations').TrustProductsEvaluationsList;\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar TrustProductsList;\nvar TrustProductsPage;\nvar TrustProductsInstance;\nvar TrustProductsContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the TrustProductsList\n *\n * @constructor Twilio.Trusthub.V1.TrustProductsList\n *\n * @param {Twilio.Trusthub.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nTrustProductsList = function TrustProductsList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function trustProducts\n   * @memberof Twilio.Trusthub.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Trusthub.V1.TrustProductsContext}\n   */\n  /* jshint ignore:end */\n  function TrustProductsListInstance(sid) {\n    return TrustProductsListInstance.get(sid);\n  }\n\n  TrustProductsListInstance._version = version;\n  // Path Solution\n  TrustProductsListInstance._solution = {};\n  TrustProductsListInstance._uri = `/TrustProducts`;\n  /* jshint ignore:start */\n  /**\n   * create a TrustProductsInstance\n   *\n   * @function create\n   * @memberof Twilio.Trusthub.V1.TrustProductsList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName -\n   *          The string that you assigned to describe the resource\n   * @param {string} opts.email - The email address\n   * @param {string} opts.policySid - The unique string of a policy.\n   * @param {string} [opts.statusCallback] -\n   *          The URL we call to inform your application of status changes.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TrustProductsInstance\n   */\n  /* jshint ignore:end */\n  TrustProductsListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n    if (_.isUndefined(opts.email)) {\n      throw new Error('Required parameter \"opts.email\" missing.');\n    }\n    if (_.isUndefined(opts.policySid)) {\n      throw new Error('Required parameter \"opts.policySid\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Email': _.get(opts, 'email'),\n      'PolicySid': _.get(opts, 'policySid'),\n      'StatusCallback': _.get(opts, 'statusCallback')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TrustProductsInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams TrustProductsInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Trusthub.V1.TrustProductsList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {trust_products.status} [opts.status] -\n   *          The verification status of the Customer-Profile resource\n   * @param {string} [opts.friendlyName] -\n   *          The string that you assigned to describe the resource\n   * @param {string} [opts.policySid] - The unique string of a policy.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  TrustProductsListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists TrustProductsInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Trusthub.V1.TrustProductsList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {trust_products.status} [opts.status] -\n   *          The verification status of the Customer-Profile resource\n   * @param {string} [opts.friendlyName] -\n   *          The string that you assigned to describe the resource\n   * @param {string} [opts.policySid] - The unique string of a policy.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TrustProductsListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of TrustProductsInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Trusthub.V1.TrustProductsList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {trust_products.status} [opts.status] -\n   *          The verification status of the Customer-Profile resource\n   * @param {string} [opts.friendlyName] -\n   *          The string that you assigned to describe the resource\n   * @param {string} [opts.policySid] - The unique string of a policy.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TrustProductsListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Status': _.get(opts, 'status'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'PolicySid': _.get(opts, 'policySid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TrustProductsPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of TrustProductsInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Trusthub.V1.TrustProductsList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TrustProductsListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TrustProductsPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a trust_products\n   *\n   * @function get\n   * @memberof Twilio.Trusthub.V1.TrustProductsList#\n   *\n   * @param {string} sid - The unique string that identifies the resource.\n   *\n   * @returns {Twilio.Trusthub.V1.TrustProductsContext}\n   */\n  /* jshint ignore:end */\n  TrustProductsListInstance.get = function get(sid) {\n    return new TrustProductsContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Trusthub.V1.TrustProductsList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  TrustProductsListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TrustProductsListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TrustProductsListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TrustProductsPage\n *\n * @constructor Twilio.Trusthub.V1.TrustProductsPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TrustProductsSolution} solution - Path solution\n *\n * @returns TrustProductsPage\n */\n/* jshint ignore:end */\nTrustProductsPage = function TrustProductsPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TrustProductsPage.prototype, Page.prototype);\nTrustProductsPage.prototype.constructor = TrustProductsPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of TrustProductsInstance\n *\n * @function getInstance\n * @memberof Twilio.Trusthub.V1.TrustProductsPage#\n *\n * @param {TrustProductsPayload} payload - Payload response from the API\n *\n * @returns TrustProductsInstance\n */\n/* jshint ignore:end */\nTrustProductsPage.prototype.getInstance = function getInstance(payload) {\n  return new TrustProductsInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trusthub.V1.TrustProductsPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTrustProductsPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTrustProductsPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TrustProductsContext\n *\n * @constructor Twilio.Trusthub.V1.TrustProductsInstance\n *\n * @property {string} sid - The unique string that identifies the resource.\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} policySid - The unique string of a policy.\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {trust_products.status} status -\n *          The verification status of the Customer-Profile resource\n * @property {Date} validUntil -\n *          The ISO 8601 date and time in GMT when the resource will be valid until.\n * @property {string} email - The email address\n * @property {string} statusCallback -\n *          The URL we call to inform your application of status changes.\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the Customer-Profile resource\n * @property {string} links -\n *          The URLs of the Assigned Items of the Customer-Profile resource\n *\n * @param {V1} version - Version of the resource\n * @param {TrustProductsPayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource.\n */\n/* jshint ignore:end */\nTrustProductsInstance = function TrustProductsInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.policySid = payload.policy_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.validUntil = deserialize.iso8601DateTime(payload.valid_until); // jshint ignore:line\n  this.email = payload.email; // jshint ignore:line\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(TrustProductsInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new TrustProductsContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a TrustProductsInstance\n *\n * @function fetch\n * @memberof Twilio.Trusthub.V1.TrustProductsInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrustProductsInstance\n */\n/* jshint ignore:end */\nTrustProductsInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a TrustProductsInstance\n *\n * @function update\n * @memberof Twilio.Trusthub.V1.TrustProductsInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {trust_products.status} [opts.status] -\n *          The verification status of the Customer-Profile resource\n * @param {string} [opts.statusCallback] -\n *          The URL we call to inform your application of status changes.\n * @param {string} [opts.friendlyName] -\n *          The string that you assigned to describe the resource\n * @param {string} [opts.email] - The email address\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrustProductsInstance\n */\n/* jshint ignore:end */\nTrustProductsInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a TrustProductsInstance\n *\n * @function remove\n * @memberof Twilio.Trusthub.V1.TrustProductsInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrustProductsInstance\n */\n/* jshint ignore:end */\nTrustProductsInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the trustProductsEntityAssignments\n *\n * @function trustProductsEntityAssignments\n * @memberof Twilio.Trusthub.V1.TrustProductsInstance#\n *\n * @returns {Twilio.Trusthub.V1.TrustProductsContext.TrustProductsEntityAssignmentsList}\n */\n/* jshint ignore:end */\nTrustProductsInstance.prototype.trustProductsEntityAssignments = function\n    trustProductsEntityAssignments() {\n  return this._proxy.trustProductsEntityAssignments;\n};\n\n/* jshint ignore:start */\n/**\n * Access the trustProductsEvaluations\n *\n * @function trustProductsEvaluations\n * @memberof Twilio.Trusthub.V1.TrustProductsInstance#\n *\n * @returns {Twilio.Trusthub.V1.TrustProductsContext.TrustProductsEvaluationsList}\n */\n/* jshint ignore:end */\nTrustProductsInstance.prototype.trustProductsEvaluations = function\n    trustProductsEvaluations() {\n  return this._proxy.trustProductsEvaluations;\n};\n\n/* jshint ignore:start */\n/**\n * Access the trustProductsChannelEndpointAssignment\n *\n * @function trustProductsChannelEndpointAssignment\n * @memberof Twilio.Trusthub.V1.TrustProductsInstance#\n *\n * @returns {Twilio.Trusthub.V1.TrustProductsContext.TrustProductsChannelEndpointAssignmentList}\n */\n/* jshint ignore:end */\nTrustProductsInstance.prototype.trustProductsChannelEndpointAssignment =\n    function trustProductsChannelEndpointAssignment() {\n  return this._proxy.trustProductsChannelEndpointAssignment;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trusthub.V1.TrustProductsInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTrustProductsInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTrustProductsInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TrustProductsContext\n *\n * @constructor Twilio.Trusthub.V1.TrustProductsContext\n *\n * @property {Twilio.Trusthub.V1.TrustProductsContext.TrustProductsEntityAssignmentsList} trustProductsEntityAssignments -\n *          trustProductsEntityAssignments resource\n * @property {Twilio.Trusthub.V1.TrustProductsContext.TrustProductsEvaluationsList} trustProductsEvaluations -\n *          trustProductsEvaluations resource\n * @property {Twilio.Trusthub.V1.TrustProductsContext.TrustProductsChannelEndpointAssignmentList} trustProductsChannelEndpointAssignment -\n *          trustProductsChannelEndpointAssignment resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource.\n */\n/* jshint ignore:end */\nTrustProductsContext = function TrustProductsContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/TrustProducts/${sid}`;\n\n  // Dependents\n  this._trustProductsEntityAssignments = undefined;\n  this._trustProductsEvaluations = undefined;\n  this._trustProductsChannelEndpointAssignment = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a TrustProductsInstance\n *\n * @function fetch\n * @memberof Twilio.Trusthub.V1.TrustProductsContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrustProductsInstance\n */\n/* jshint ignore:end */\nTrustProductsContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TrustProductsInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a TrustProductsInstance\n *\n * @function update\n * @memberof Twilio.Trusthub.V1.TrustProductsContext#\n *\n * @param {object} [opts] - Options for request\n * @param {trust_products.status} [opts.status] -\n *          The verification status of the Customer-Profile resource\n * @param {string} [opts.statusCallback] -\n *          The URL we call to inform your application of status changes.\n * @param {string} [opts.friendlyName] -\n *          The string that you assigned to describe the resource\n * @param {string} [opts.email] - The email address\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrustProductsInstance\n */\n/* jshint ignore:end */\nTrustProductsContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Status': _.get(opts, 'status'),\n    'StatusCallback': _.get(opts, 'statusCallback'),\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'Email': _.get(opts, 'email')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TrustProductsInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a TrustProductsInstance\n *\n * @function remove\n * @memberof Twilio.Trusthub.V1.TrustProductsContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrustProductsInstance\n */\n/* jshint ignore:end */\nTrustProductsContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(TrustProductsContext.prototype,\n  'trustProductsEntityAssignments', {\n    get: function() {\n      if (!this._trustProductsEntityAssignments) {\n        this._trustProductsEntityAssignments = new TrustProductsEntityAssignmentsList(\n          this._version,\n          this._solution.sid\n        );\n      }\n      return this._trustProductsEntityAssignments;\n    }\n});\n\nObject.defineProperty(TrustProductsContext.prototype,\n  'trustProductsEvaluations', {\n    get: function() {\n      if (!this._trustProductsEvaluations) {\n        this._trustProductsEvaluations = new TrustProductsEvaluationsList(\n          this._version,\n          this._solution.sid\n        );\n      }\n      return this._trustProductsEvaluations;\n    }\n});\n\nObject.defineProperty(TrustProductsContext.prototype,\n  'trustProductsChannelEndpointAssignment', {\n    get: function() {\n      if (!this._trustProductsChannelEndpointAssignment) {\n        this._trustProductsChannelEndpointAssignment = new TrustProductsChannelEndpointAssignmentList(\n          this._version,\n          this._solution.sid\n        );\n      }\n      return this._trustProductsChannelEndpointAssignment;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trusthub.V1.TrustProductsContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTrustProductsContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nTrustProductsContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TrustProductsList: TrustProductsList,\n  TrustProductsPage: TrustProductsPage,\n  TrustProductsInstance: TrustProductsInstance,\n  TrustProductsContext: TrustProductsContext\n};\n"],"mappings":"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CA;AACA;AACA;AACA;AACA;AACA/F,qBAAqB,CAACqE,SAAS,CAAC8B,KAAK,GAAG,SAASA,KAAKA,CAACxF,QAAQ,EAAE;EAC/D,OAAO,IAAI,CAACyF,MAAM,CAACD,KAAK,CAACxF,QAAQ,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,qBAAqB,CAACqE,SAAS,CAACgC,MAAM,GAAG,SAASA,MAAMA,CAAC3F,IAAI,EAAEC,QAAQ,EAAE;EACvE,OAAO,IAAI,CAACyF,MAAM,CAACC,MAAM,CAAC3F,IAAI,EAAEC,QAAQ,CAAC;AAC3C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,qBAAqB,CAACqE,SAAS,CAACiC,MAAM,GAAG,SAASA,MAAMA,CAAC3F,QAAQ,EAAE;EACjE,OAAO,IAAI,CAACyF,MAAM,CAACE,MAAM,CAAC3F,QAAQ,CAAC;AACrC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,qBAAqB,CAACqE,SAAS,CAACkC,8BAA8B,GAAG,SAC7DA,8BAA8BA,CAAA,EAAG;EACnC,OAAO,IAAI,CAACH,MAAM,CAACG,8BAA8B;AACnD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAvG,qBAAqB,CAACqE,SAAS,CAACmC,wBAAwB,GAAG,SACvDA,wBAAwBA,CAAA,EAAG;EAC7B,OAAO,IAAI,CAACJ,MAAM,CAACI,wBAAwB;AAC7C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAxG,qBAAqB,CAACqE,SAAS,CAACoC,sCAAsC,GAClE,SAASA,sCAAsCA,CAAA,EAAG;EACpD,OAAO,IAAI,CAACL,MAAM,CAACK,sCAAsC;AAC3D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAzG,qBAAq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"},"metadata":{},"sourceType":"script","externalDependencies":[]}