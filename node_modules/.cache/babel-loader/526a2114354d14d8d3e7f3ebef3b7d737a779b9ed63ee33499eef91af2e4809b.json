{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar MessageList = require('./conversation/message').MessageList;\nvar Page = require('../../../../base/Page'); /* jshint ignore:line */\nvar ParticipantList = require('./conversation/participant').ParticipantList;\nvar WebhookList = require('./conversation/webhook').WebhookList;\nvar deserialize = require('../../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../../base/values'); /* jshint ignore:line */\n\nvar ConversationList;\nvar ConversationPage;\nvar ConversationInstance;\nvar ConversationContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ConversationList\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationList\n *\n * @param {Twilio.Conversations.V1} version - Version of the resource\n * @param {string} chatServiceSid -\n *          The unique ID of the Conversation Service this conversation belongs to.\n */\n/* jshint ignore:end */\nConversationList = function ConversationList(version, chatServiceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function conversations\n   * @memberof Twilio.Conversations.V1.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Conversations.V1.ServiceContext.ConversationContext}\n   */\n  /* jshint ignore:end */\n  function ConversationListInstance(sid) {\n    return ConversationListInstance.get(sid);\n  }\n  ConversationListInstance._version = version;\n  // Path Solution\n  ConversationListInstance._solution = {\n    chatServiceSid: chatServiceSid\n  };\n  ConversationListInstance._uri = `/Services/${chatServiceSid}/Conversations`;\n  /* jshint ignore:start */\n  /**\n   * create a ConversationInstance\n   *\n   * @function create\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The human-readable name of this conversation.\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {string} [opts.attributes] -\n   *          An optional string metadata field you can use to store any data you wish.\n   * @param {string} [opts.messagingServiceSid] -\n   *          The unique ID of the Messaging Service this conversation belongs to.\n   * @param {Date} [opts.dateCreated] - The date that this resource was created.\n   * @param {Date} [opts.dateUpdated] - The date that this resource was last updated.\n   * @param {conversation.state} [opts.state] - Current state of this conversation.\n   * @param {string} [opts.timers.inactive] -\n   *          ISO8601 duration when conversation will be switched to `inactive` state.\n   * @param {string} [opts.timers.closed] -\n   *          ISO8601 duration when conversation will be switched to `closed` state.\n   * @param {conversation.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n   *          The X-Twilio-Webhook-Enabled HTTP request header\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ConversationInstance\n   */\n  /* jshint ignore:end */\n  ConversationListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'Attributes': _.get(opts, 'attributes'),\n      'MessagingServiceSid': _.get(opts, 'messagingServiceSid'),\n      'DateCreated': serialize.iso8601DateTime(_.get(opts, 'dateCreated')),\n      'DateUpdated': serialize.iso8601DateTime(_.get(opts, 'dateUpdated')),\n      'State': _.get(opts, 'state'),\n      'Timers.Inactive': _.get(opts, 'timers.inactive'),\n      'Timers.Closed': _.get(opts, 'timers.closed')\n    });\n    var headers = values.of({\n      'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data,\n      headers: headers\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ConversationInstance(this._version, payload, this._solution.chatServiceSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ConversationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ConversationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ConversationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConversationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ConversationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConversationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ConversationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ConversationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConversationListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ConversationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a conversation\n   *\n   * @function get\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationList#\n   *\n   * @param {string} sid -\n   *          A 34 character string that uniquely identifies this resource.\n   *\n   * @returns {Twilio.Conversations.V1.ServiceContext.ConversationContext}\n   */\n  /* jshint ignore:end */\n  ConversationListInstance.get = function get(sid) {\n    return new ConversationContext(this._version, this._solution.chatServiceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ConversationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  ConversationListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return ConversationListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ConversationPage\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ConversationSolution} solution - Path solution\n *\n * @returns ConversationPage\n */\n/* jshint ignore:end */\nConversationPage = function ConversationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(ConversationPage.prototype, Page.prototype);\nConversationPage.prototype.constructor = ConversationPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ConversationInstance\n *\n * @function getInstance\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationPage#\n *\n * @param {ConversationPayload} payload - Payload response from the API\n *\n * @returns ConversationInstance\n */\n/* jshint ignore:end */\nConversationPage.prototype.getInstance = function getInstance(payload) {\n  return new ConversationInstance(this._version, payload, this._solution.chatServiceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConversationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nConversationPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ConversationContext\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationInstance\n *\n * @property {string} accountSid -\n *          The unique ID of the Account responsible for this conversation.\n * @property {string} chatServiceSid -\n *          The unique ID of the Conversation Service this conversation belongs to.\n * @property {string} messagingServiceSid -\n *          The unique ID of the Messaging Service this conversation belongs to.\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this resource.\n * @property {string} friendlyName - The human-readable name of this conversation.\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {string} attributes -\n *          An optional string metadata field you can use to store any data you wish.\n * @property {conversation.state} state - Current state of this conversation.\n * @property {Date} dateCreated - The date that this resource was created.\n * @property {Date} dateUpdated - The date that this resource was last updated.\n * @property {object} timers - Timer date values for this conversation.\n * @property {string} url - An absolute URL for this conversation.\n * @property {string} links -\n *          Absolute URLs to access the participants, messages and webhooks of this conversation.\n * @property {object} bindings - The bindings\n *\n * @param {V1} version - Version of the resource\n * @param {ConversationPayload} payload - The instance payload\n * @param {sid} chatServiceSid -\n *          The unique ID of the Conversation Service this conversation belongs to.\n * @param {sid_like} sid -\n *          A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nConversationInstance = function ConversationInstance(version, payload, chatServiceSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.chatServiceSid = payload.chat_service_sid; // jshint ignore:line\n  this.messagingServiceSid = payload.messaging_service_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.attributes = payload.attributes; // jshint ignore:line\n  this.state = payload.state; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.timers = payload.timers; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n  this.bindings = payload.bindings; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    chatServiceSid: chatServiceSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(ConversationInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ConversationContext(this._version, this._solution.chatServiceSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * update a ConversationInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          The human-readable name of this conversation.\n * @param {Date} [opts.dateCreated] - The date that this resource was created.\n * @param {Date} [opts.dateUpdated] - The date that this resource was last updated.\n * @param {string} [opts.attributes] -\n *          An optional string metadata field you can use to store any data you wish.\n * @param {string} [opts.messagingServiceSid] -\n *          The unique ID of the Messaging Service this conversation belongs to.\n * @param {conversation.state} [opts.state] - Current state of this conversation.\n * @param {string} [opts.timers.inactive] -\n *          ISO8601 duration when conversation will be switched to `inactive` state.\n * @param {string} [opts.timers.closed] -\n *          ISO8601 duration when conversation will be switched to `closed` state.\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {conversation.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConversationInstance\n */\n/* jshint ignore:end */\nConversationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a ConversationInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {conversation.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConversationInstance\n */\n/* jshint ignore:end */\nConversationInstance.prototype.remove = function remove(opts, callback) {\n  return this._proxy.remove(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ConversationInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConversationInstance\n */\n/* jshint ignore:end */\nConversationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the participants\n *\n * @function participants\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationInstance#\n *\n * @returns {Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantList}\n */\n/* jshint ignore:end */\nConversationInstance.prototype.participants = function participants() {\n  return this._proxy.participants;\n};\n\n/* jshint ignore:start */\n/**\n * Access the messages\n *\n * @function messages\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationInstance#\n *\n * @returns {Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageList}\n */\n/* jshint ignore:end */\nConversationInstance.prototype.messages = function messages() {\n  return this._proxy.messages;\n};\n\n/* jshint ignore:start */\n/**\n * Access the webhooks\n *\n * @function webhooks\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationInstance#\n *\n * @returns {Twilio.Conversations.V1.ServiceContext.ConversationContext.WebhookList}\n */\n/* jshint ignore:end */\nConversationInstance.prototype.webhooks = function webhooks() {\n  return this._proxy.webhooks;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConversationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nConversationInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ConversationContext\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationContext\n *\n * @property {Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantList} participants -\n *          participants resource\n * @property {Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageList} messages -\n *          messages resource\n * @property {Twilio.Conversations.V1.ServiceContext.ConversationContext.WebhookList} webhooks -\n *          webhooks resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} chatServiceSid -\n *          The SID of the Conversation Service that the resource is associated with.\n * @param {sid_like} sid -\n *          A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nConversationContext = function ConversationContext(version, chatServiceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    chatServiceSid: chatServiceSid,\n    sid: sid\n  };\n  this._uri = `/Services/${chatServiceSid}/Conversations/${sid}`;\n\n  // Dependents\n  this._participants = undefined;\n  this._messages = undefined;\n  this._webhooks = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * update a ConversationInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          The human-readable name of this conversation.\n * @param {Date} [opts.dateCreated] - The date that this resource was created.\n * @param {Date} [opts.dateUpdated] - The date that this resource was last updated.\n * @param {string} [opts.attributes] -\n *          An optional string metadata field you can use to store any data you wish.\n * @param {string} [opts.messagingServiceSid] -\n *          The unique ID of the Messaging Service this conversation belongs to.\n * @param {conversation.state} [opts.state] - Current state of this conversation.\n * @param {string} [opts.timers.inactive] -\n *          ISO8601 duration when conversation will be switched to `inactive` state.\n * @param {string} [opts.timers.closed] -\n *          ISO8601 duration when conversation will be switched to `closed` state.\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {conversation.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConversationInstance\n */\n/* jshint ignore:end */\nConversationContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'DateCreated': serialize.iso8601DateTime(_.get(opts, 'dateCreated')),\n    'DateUpdated': serialize.iso8601DateTime(_.get(opts, 'dateUpdated')),\n    'Attributes': _.get(opts, 'attributes'),\n    'MessagingServiceSid': _.get(opts, 'messagingServiceSid'),\n    'State': _.get(opts, 'state'),\n    'Timers.Inactive': _.get(opts, 'timers.inactive'),\n    'Timers.Closed': _.get(opts, 'timers.closed'),\n    'UniqueName': _.get(opts, 'uniqueName')\n  });\n  var headers = values.of({\n    'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data,\n    headers: headers\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ConversationInstance(this._version, payload, this._solution.chatServiceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ConversationInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {conversation.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConversationInstance\n */\n/* jshint ignore:end */\nConversationContext.prototype.remove = function remove(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var headers = values.of({\n    'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')\n  });\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE',\n    headers: headers\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ConversationInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConversationInstance\n */\n/* jshint ignore:end */\nConversationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ConversationInstance(this._version, payload, this._solution.chatServiceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(ConversationContext.prototype, 'participants', {\n  get: function () {\n    if (!this._participants) {\n      this._participants = new ParticipantList(this._version, this._solution.chatServiceSid, this._solution.sid);\n    }\n    return this._participants;\n  }\n});\nObject.defineProperty(ConversationContext.prototype, 'messages', {\n  get: function () {\n    if (!this._messages) {\n      this._messages = new MessageList(this._version, this._solution.chatServiceSid, this._solution.sid);\n    }\n    return this._messages;\n  }\n});\nObject.defineProperty(ConversationContext.prototype, 'webhooks', {\n  get: function () {\n    if (!this._webhooks) {\n      this._webhooks = new WebhookList(this._version, this._solution.chatServiceSid, this._solution.sid);\n    }\n    return this._webhooks;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConversationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nConversationContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  ConversationList: ConversationList,\n  ConversationPage: ConversationPage,\n  ConversationInstance: ConversationInstance,\n  ConversationContext: ConversationContext\n};","map":{"version":3,"names":["Q","require","_","util","MessageList","Page","ParticipantList","WebhookList","deserialize","serialize","values","ConversationList","ConversationPage","ConversationInstance","ConversationContext","version","chatServiceSid","ConversationListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isFunction","deferred","defer","data","of","iso8601DateTime","headers","promise","uri","method","then","payload","resolve","bind","catch","error","reject","nodeify","each","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","chat_service_sid","messagingServiceSid","messaging_service_sid","friendlyName","friendly_name","uniqueName","unique_name","attributes","state","dateCreated","date_created","dateUpdated","date_updated","timers","url","links","bindings","_context","undefined","Object","defineProperty","update","_proxy","remove","fetch","participants","messages","webhooks","_participants","_messages","_webhooks","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/conversations/v1/service/conversation.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar MessageList = require('./conversation/message').MessageList;\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar ParticipantList = require('./conversation/participant').ParticipantList;\nvar WebhookList = require('./conversation/webhook').WebhookList;\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar ConversationList;\nvar ConversationPage;\nvar ConversationInstance;\nvar ConversationContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ConversationList\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationList\n *\n * @param {Twilio.Conversations.V1} version - Version of the resource\n * @param {string} chatServiceSid -\n *          The unique ID of the Conversation Service this conversation belongs to.\n */\n/* jshint ignore:end */\nConversationList = function ConversationList(version, chatServiceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function conversations\n   * @memberof Twilio.Conversations.V1.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Conversations.V1.ServiceContext.ConversationContext}\n   */\n  /* jshint ignore:end */\n  function ConversationListInstance(sid) {\n    return ConversationListInstance.get(sid);\n  }\n\n  ConversationListInstance._version = version;\n  // Path Solution\n  ConversationListInstance._solution = {chatServiceSid: chatServiceSid};\n  ConversationListInstance._uri = `/Services/${chatServiceSid}/Conversations`;\n  /* jshint ignore:start */\n  /**\n   * create a ConversationInstance\n   *\n   * @function create\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The human-readable name of this conversation.\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {string} [opts.attributes] -\n   *          An optional string metadata field you can use to store any data you wish.\n   * @param {string} [opts.messagingServiceSid] -\n   *          The unique ID of the Messaging Service this conversation belongs to.\n   * @param {Date} [opts.dateCreated] - The date that this resource was created.\n   * @param {Date} [opts.dateUpdated] - The date that this resource was last updated.\n   * @param {conversation.state} [opts.state] - Current state of this conversation.\n   * @param {string} [opts.timers.inactive] -\n   *          ISO8601 duration when conversation will be switched to `inactive` state.\n   * @param {string} [opts.timers.closed] -\n   *          ISO8601 duration when conversation will be switched to `closed` state.\n   * @param {conversation.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n   *          The X-Twilio-Webhook-Enabled HTTP request header\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ConversationInstance\n   */\n  /* jshint ignore:end */\n  ConversationListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'Attributes': _.get(opts, 'attributes'),\n      'MessagingServiceSid': _.get(opts, 'messagingServiceSid'),\n      'DateCreated': serialize.iso8601DateTime(_.get(opts, 'dateCreated')),\n      'DateUpdated': serialize.iso8601DateTime(_.get(opts, 'dateUpdated')),\n      'State': _.get(opts, 'state'),\n      'Timers.Inactive': _.get(opts, 'timers.inactive'),\n      'Timers.Closed': _.get(opts, 'timers.closed')\n    });\n    var headers = values.of({'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')});\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data, headers: headers});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ConversationInstance(\n        this._version,\n        payload,\n        this._solution.chatServiceSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ConversationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ConversationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ConversationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConversationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ConversationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConversationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ConversationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ConversationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConversationListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ConversationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a conversation\n   *\n   * @function get\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationList#\n   *\n   * @param {string} sid -\n   *          A 34 character string that uniquely identifies this resource.\n   *\n   * @returns {Twilio.Conversations.V1.ServiceContext.ConversationContext}\n   */\n  /* jshint ignore:end */\n  ConversationListInstance.get = function get(sid) {\n    return new ConversationContext(this._version, this._solution.chatServiceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ConversationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ConversationListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ConversationListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ConversationPage\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ConversationSolution} solution - Path solution\n *\n * @returns ConversationPage\n */\n/* jshint ignore:end */\nConversationPage = function ConversationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ConversationPage.prototype, Page.prototype);\nConversationPage.prototype.constructor = ConversationPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ConversationInstance\n *\n * @function getInstance\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationPage#\n *\n * @param {ConversationPayload} payload - Payload response from the API\n *\n * @returns ConversationInstance\n */\n/* jshint ignore:end */\nConversationPage.prototype.getInstance = function getInstance(payload) {\n  return new ConversationInstance(this._version, payload, this._solution.chatServiceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConversationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nConversationPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ConversationContext\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationInstance\n *\n * @property {string} accountSid -\n *          The unique ID of the Account responsible for this conversation.\n * @property {string} chatServiceSid -\n *          The unique ID of the Conversation Service this conversation belongs to.\n * @property {string} messagingServiceSid -\n *          The unique ID of the Messaging Service this conversation belongs to.\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this resource.\n * @property {string} friendlyName - The human-readable name of this conversation.\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {string} attributes -\n *          An optional string metadata field you can use to store any data you wish.\n * @property {conversation.state} state - Current state of this conversation.\n * @property {Date} dateCreated - The date that this resource was created.\n * @property {Date} dateUpdated - The date that this resource was last updated.\n * @property {object} timers - Timer date values for this conversation.\n * @property {string} url - An absolute URL for this conversation.\n * @property {string} links -\n *          Absolute URLs to access the participants, messages and webhooks of this conversation.\n * @property {object} bindings - The bindings\n *\n * @param {V1} version - Version of the resource\n * @param {ConversationPayload} payload - The instance payload\n * @param {sid} chatServiceSid -\n *          The unique ID of the Conversation Service this conversation belongs to.\n * @param {sid_like} sid -\n *          A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nConversationInstance = function ConversationInstance(version, payload,\n                                                      chatServiceSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.chatServiceSid = payload.chat_service_sid; // jshint ignore:line\n  this.messagingServiceSid = payload.messaging_service_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.attributes = payload.attributes; // jshint ignore:line\n  this.state = payload.state; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.timers = payload.timers; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n  this.bindings = payload.bindings; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {chatServiceSid: chatServiceSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(ConversationInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new ConversationContext(\n          this._version,\n          this._solution.chatServiceSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * update a ConversationInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          The human-readable name of this conversation.\n * @param {Date} [opts.dateCreated] - The date that this resource was created.\n * @param {Date} [opts.dateUpdated] - The date that this resource was last updated.\n * @param {string} [opts.attributes] -\n *          An optional string metadata field you can use to store any data you wish.\n * @param {string} [opts.messagingServiceSid] -\n *          The unique ID of the Messaging Service this conversation belongs to.\n * @param {conversation.state} [opts.state] - Current state of this conversation.\n * @param {string} [opts.timers.inactive] -\n *          ISO8601 duration when conversation will be switched to `inactive` state.\n * @param {string} [opts.timers.closed] -\n *          ISO8601 duration when conversation will be switched to `closed` state.\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {conversation.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConversationInstance\n */\n/* jshint ignore:end */\nConversationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a ConversationInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {conversation.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConversationInstance\n */\n/* jshint ignore:end */\nConversationInstance.prototype.remove = function remove(opts, callback) {\n  return this._proxy.remove(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ConversationInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConversationInstance\n */\n/* jshint ignore:end */\nConversationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the participants\n *\n * @function participants\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationInstance#\n *\n * @returns {Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantList}\n */\n/* jshint ignore:end */\nConversationInstance.prototype.participants = function participants() {\n  return this._proxy.participants;\n};\n\n/* jshint ignore:start */\n/**\n * Access the messages\n *\n * @function messages\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationInstance#\n *\n * @returns {Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageList}\n */\n/* jshint ignore:end */\nConversationInstance.prototype.messages = function messages() {\n  return this._proxy.messages;\n};\n\n/* jshint ignore:start */\n/**\n * Access the webhooks\n *\n * @function webhooks\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationInstance#\n *\n * @returns {Twilio.Conversations.V1.ServiceContext.ConversationContext.WebhookList}\n */\n/* jshint ignore:end */\nConversationInstance.prototype.webhooks = function webhooks() {\n  return this._proxy.webhooks;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConversationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nConversationInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ConversationContext\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationContext\n *\n * @property {Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantList} participants -\n *          participants resource\n * @property {Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageList} messages -\n *          messages resource\n * @property {Twilio.Conversations.V1.ServiceContext.ConversationContext.WebhookList} webhooks -\n *          webhooks resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} chatServiceSid -\n *          The SID of the Conversation Service that the resource is associated with.\n * @param {sid_like} sid -\n *          A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nConversationContext = function ConversationContext(version, chatServiceSid, sid)\n                                                    {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {chatServiceSid: chatServiceSid, sid: sid, };\n  this._uri = `/Services/${chatServiceSid}/Conversations/${sid}`;\n\n  // Dependents\n  this._participants = undefined;\n  this._messages = undefined;\n  this._webhooks = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * update a ConversationInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          The human-readable name of this conversation.\n * @param {Date} [opts.dateCreated] - The date that this resource was created.\n * @param {Date} [opts.dateUpdated] - The date that this resource was last updated.\n * @param {string} [opts.attributes] -\n *          An optional string metadata field you can use to store any data you wish.\n * @param {string} [opts.messagingServiceSid] -\n *          The unique ID of the Messaging Service this conversation belongs to.\n * @param {conversation.state} [opts.state] - Current state of this conversation.\n * @param {string} [opts.timers.inactive] -\n *          ISO8601 duration when conversation will be switched to `inactive` state.\n * @param {string} [opts.timers.closed] -\n *          ISO8601 duration when conversation will be switched to `closed` state.\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {conversation.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConversationInstance\n */\n/* jshint ignore:end */\nConversationContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'DateCreated': serialize.iso8601DateTime(_.get(opts, 'dateCreated')),\n    'DateUpdated': serialize.iso8601DateTime(_.get(opts, 'dateUpdated')),\n    'Attributes': _.get(opts, 'attributes'),\n    'MessagingServiceSid': _.get(opts, 'messagingServiceSid'),\n    'State': _.get(opts, 'state'),\n    'Timers.Inactive': _.get(opts, 'timers.inactive'),\n    'Timers.Closed': _.get(opts, 'timers.closed'),\n    'UniqueName': _.get(opts, 'uniqueName')\n  });\n  var headers = values.of({'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data, headers: headers});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ConversationInstance(\n      this._version,\n      payload,\n      this._solution.chatServiceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ConversationInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {conversation.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConversationInstance\n */\n/* jshint ignore:end */\nConversationContext.prototype.remove = function remove(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var headers = values.of({'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')});\n\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE', headers: headers});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ConversationInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConversationInstance\n */\n/* jshint ignore:end */\nConversationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ConversationInstance(\n      this._version,\n      payload,\n      this._solution.chatServiceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ConversationContext.prototype,\n  'participants', {\n    get: function() {\n      if (!this._participants) {\n        this._participants = new ParticipantList(\n          this._version,\n          this._solution.chatServiceSid,\n          this._solution.sid\n        );\n      }\n      return this._participants;\n    }\n});\n\nObject.defineProperty(ConversationContext.prototype,\n  'messages', {\n    get: function() {\n      if (!this._messages) {\n        this._messages = new MessageList(this._version, this._solution.chatServiceSid, this._solution.sid);\n      }\n      return this._messages;\n    }\n});\n\nObject.defineProperty(ConversationContext.prototype,\n  'webhooks', {\n    get: function() {\n      if (!this._webhooks) {\n        this._webhooks = new WebhookList(this._version, this._solution.chatServiceSid, this._solution.sid);\n      }\n      return this._webhooks;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConversationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nConversationContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ConversationList: ConversationList,\n  ConversationPage: ConversationPage,\n  ConversationInstance: ConversationInstance,\n  ConversationContext: ConversationContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}