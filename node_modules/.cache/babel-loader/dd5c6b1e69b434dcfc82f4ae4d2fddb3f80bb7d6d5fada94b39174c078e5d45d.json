{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar NotificationList = require('./challenge/notification').NotificationList;\nvar Page = require('../../../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../../../base/values'); /* jshint ignore:line */\n\nvar ChallengeList;\nvar ChallengePage;\nvar ChallengeInstance;\nvar ChallengeContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ChallengeList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n * @param {string} serviceSid - Service Sid.\n * @param {string} identity - Unique external identifier of the Entity\n */\n/* jshint ignore:end */\nChallengeList = function ChallengeList(version, serviceSid, identity) {\n  /* jshint ignore:start */\n  /**\n   * @function challenges\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext}\n   */\n  /* jshint ignore:end */\n  function ChallengeListInstance(sid) {\n    return ChallengeListInstance.get(sid);\n  }\n  ChallengeListInstance._version = version;\n  // Path Solution\n  ChallengeListInstance._solution = {\n    serviceSid: serviceSid,\n    identity: identity\n  };\n  ChallengeListInstance._uri = `/Services/${serviceSid}/Entities/${identity}/Challenges`;\n  /* jshint ignore:start */\n  /**\n   * create a ChallengeInstance\n   *\n   * @function create\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.factorSid - Factor Sid.\n   * @param {Date} [opts.expirationDate] - The date-time when this Challenge expires\n   * @param {string} [opts.details.message] -\n   *          Shown to the user when the push notification arrives\n   * @param {object|list} [opts.details.fields] -\n   *          A list of objects that describe the Fields included in the Challenge\n   * @param {object} [opts.hiddenDetails] -\n   *          Hidden details provided to contextualize the Challenge\n   * @param {string} [opts.authPayload] - Optional payload to verify the Challenge\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ChallengeInstance\n   */\n  /* jshint ignore:end */\n  ChallengeListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.factorSid)) {\n      throw new Error('Required parameter \"opts.factorSid\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'FactorSid': _.get(opts, 'factorSid'),\n      'ExpirationDate': serialize.iso8601DateTime(_.get(opts, 'expirationDate')),\n      'Details.Message': _.get(opts, 'details.message'),\n      'Details.Fields': serialize.map(_.get(opts, 'details.fields'), function (e) {\n        return serialize.object(e);\n      }),\n      'HiddenDetails': serialize.object(_.get(opts, 'hiddenDetails')),\n      'AuthPayload': _.get(opts, 'authPayload')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ChallengeInstance(this._version, payload, this._solution.serviceSid, this._solution.identity, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ChallengeInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.factorSid] - Factor Sid.\n   * @param {challenge.challenge_statuses} [opts.status] -\n   *          The Status of theChallenges to fetch\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ChallengeListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ChallengeInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.factorSid] - Factor Sid.\n   * @param {challenge.challenge_statuses} [opts.status] -\n   *          The Status of theChallenges to fetch\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ChallengeListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ChallengeInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.factorSid] - Factor Sid.\n   * @param {challenge.challenge_statuses} [opts.status] -\n   *          The Status of theChallenges to fetch\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ChallengeListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FactorSid': _.get(opts, 'factorSid'),\n      'Status': _.get(opts, 'status'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ChallengePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ChallengeInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ChallengeListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ChallengePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a challenge\n   *\n   * @function get\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList#\n   *\n   * @param {string} sid - A string that uniquely identifies this Challenge.\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext}\n   */\n  /* jshint ignore:end */\n  ChallengeListInstance.get = function get(sid) {\n    return new ChallengeContext(this._version, this._solution.serviceSid, this._solution.identity, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ChallengeListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  ChallengeListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return ChallengeListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ChallengePage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.ChallengePage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ChallengeSolution} solution - Path solution\n *\n * @returns ChallengePage\n */\n/* jshint ignore:end */\nChallengePage = function ChallengePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(ChallengePage.prototype, Page.prototype);\nChallengePage.prototype.constructor = ChallengePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ChallengeInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengePage#\n *\n * @param {ChallengePayload} payload - Payload response from the API\n *\n * @returns ChallengeInstance\n */\n/* jshint ignore:end */\nChallengePage.prototype.getInstance = function getInstance(payload) {\n  return new ChallengeInstance(this._version, payload, this._solution.serviceSid, this._solution.identity);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nChallengePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nChallengePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ChallengeContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeInstance\n *\n * @property {string} sid - A string that uniquely identifies this Challenge.\n * @property {string} accountSid - Account Sid.\n * @property {string} serviceSid - Service Sid.\n * @property {string} entitySid - Entity Sid.\n * @property {string} identity - Unique external identifier of the Entity\n * @property {string} factorSid - Factor Sid.\n * @property {Date} dateCreated - The date this Challenge was created\n * @property {Date} dateUpdated - The date this Challenge was updated\n * @property {Date} dateResponded - The date this Challenge was responded\n * @property {Date} expirationDate - The date-time when this Challenge expires\n * @property {challenge.challenge_statuses} status - The Status of this Challenge\n * @property {challenge.challenge_reasons} respondedReason -\n *          The Reason of this Challenge `status`\n * @property {object} details - Details about the Challenge.\n * @property {object} hiddenDetails - Hidden details about the Challenge\n * @property {challenge.factor_types} factorType -\n *          The Factor Type of this Challenge\n * @property {string} url - The URL of this resource.\n * @property {string} links - Nested resource URLs.\n *\n * @param {V2} version - Version of the resource\n * @param {ChallengePayload} payload - The instance payload\n * @param {sid} serviceSid - Service Sid.\n * @param {string} identity - Unique external identifier of the Entity\n * @param {sid} sid - A string that uniquely identifies this Challenge.\n */\n/* jshint ignore:end */\nChallengeInstance = function ChallengeInstance(version, payload, serviceSid, identity, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.entitySid = payload.entity_sid; // jshint ignore:line\n  this.identity = payload.identity; // jshint ignore:line\n  this.factorSid = payload.factor_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.dateResponded = deserialize.iso8601DateTime(payload.date_responded); // jshint ignore:line\n  this.expirationDate = deserialize.iso8601DateTime(payload.expiration_date); // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.respondedReason = payload.responded_reason; // jshint ignore:line\n  this.details = payload.details; // jshint ignore:line\n  this.hiddenDetails = payload.hidden_details; // jshint ignore:line\n  this.factorType = payload.factor_type; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    identity: identity,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(ChallengeInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ChallengeContext(this._version, this._solution.serviceSid, this._solution.identity, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ChallengeInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChallengeInstance\n */\n/* jshint ignore:end */\nChallengeInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ChallengeInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.authPayload] - Optional payload to verify the Challenge\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChallengeInstance\n */\n/* jshint ignore:end */\nChallengeInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the notifications\n *\n * @function notifications\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext.NotificationList}\n */\n/* jshint ignore:end */\nChallengeInstance.prototype.notifications = function notifications() {\n  return this._proxy.notifications;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nChallengeInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nChallengeInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ChallengeContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext\n *\n * @property {Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext.NotificationList} notifications -\n *          notifications resource\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid - Service Sid.\n * @param {string} identity - Unique external identifier of the Entity\n * @param {sid} sid - A string that uniquely identifies this Challenge.\n */\n/* jshint ignore:end */\nChallengeContext = function ChallengeContext(version, serviceSid, identity, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    serviceSid: serviceSid,\n    identity: identity,\n    sid: sid\n  };\n  this._uri = `/Services/${serviceSid}/Entities/${identity}/Challenges/${sid}`;\n\n  // Dependents\n  this._notifications = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ChallengeInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChallengeInstance\n */\n/* jshint ignore:end */\nChallengeContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ChallengeInstance(this._version, payload, this._solution.serviceSid, this._solution.identity, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ChallengeInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.authPayload] - Optional payload to verify the Challenge\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChallengeInstance\n */\n/* jshint ignore:end */\nChallengeContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'AuthPayload': _.get(opts, 'authPayload')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ChallengeInstance(this._version, payload, this._solution.serviceSid, this._solution.identity, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(ChallengeContext.prototype, 'notifications', {\n  get: function () {\n    if (!this._notifications) {\n      this._notifications = new NotificationList(this._version, this._solution.serviceSid, this._solution.identity, this._solution.sid);\n    }\n    return this._notifications;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nChallengeContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nChallengeContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  ChallengeList: ChallengeList,\n  ChallengePage: ChallengePage,\n  ChallengeInstance: ChallengeInstance,\n  ChallengeContext: ChallengeContext\n};","map":{"version":3,"names":["Q","require","_","util","NotificationList","Page","deserialize","serialize","values","ChallengeList","ChallengePage","ChallengeInstance","ChallengeContext","version","serviceSid","identity","ChallengeListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","factorSid","deferred","defer","data","of","iso8601DateTime","map","e","object","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","service_sid","entitySid","entity_sid","factor_sid","dateCreated","date_created","dateUpdated","date_updated","dateResponded","date_responded","expirationDate","expiration_date","status","respondedReason","responded_reason","details","hiddenDetails","hidden_details","factorType","factor_type","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","update","notifications","_notifications","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/verify/v2/service/entity/challenge.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar NotificationList = require('./challenge/notification').NotificationList;\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar ChallengeList;\nvar ChallengePage;\nvar ChallengeInstance;\nvar ChallengeContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ChallengeList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n * @param {string} serviceSid - Service Sid.\n * @param {string} identity - Unique external identifier of the Entity\n */\n/* jshint ignore:end */\nChallengeList = function ChallengeList(version, serviceSid, identity) {\n  /* jshint ignore:start */\n  /**\n   * @function challenges\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext}\n   */\n  /* jshint ignore:end */\n  function ChallengeListInstance(sid) {\n    return ChallengeListInstance.get(sid);\n  }\n\n  ChallengeListInstance._version = version;\n  // Path Solution\n  ChallengeListInstance._solution = {serviceSid: serviceSid, identity: identity};\n  ChallengeListInstance._uri = `/Services/${serviceSid}/Entities/${identity}/Challenges`;\n  /* jshint ignore:start */\n  /**\n   * create a ChallengeInstance\n   *\n   * @function create\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.factorSid - Factor Sid.\n   * @param {Date} [opts.expirationDate] - The date-time when this Challenge expires\n   * @param {string} [opts.details.message] -\n   *          Shown to the user when the push notification arrives\n   * @param {object|list} [opts.details.fields] -\n   *          A list of objects that describe the Fields included in the Challenge\n   * @param {object} [opts.hiddenDetails] -\n   *          Hidden details provided to contextualize the Challenge\n   * @param {string} [opts.authPayload] - Optional payload to verify the Challenge\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ChallengeInstance\n   */\n  /* jshint ignore:end */\n  ChallengeListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.factorSid)) {\n      throw new Error('Required parameter \"opts.factorSid\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FactorSid': _.get(opts, 'factorSid'),\n      'ExpirationDate': serialize.iso8601DateTime(_.get(opts, 'expirationDate')),\n      'Details.Message': _.get(opts, 'details.message'),\n      'Details.Fields': serialize.map(_.get(opts, 'details.fields'), function(e) { return serialize.object(e); }),\n      'HiddenDetails': serialize.object(_.get(opts, 'hiddenDetails')),\n      'AuthPayload': _.get(opts, 'authPayload')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ChallengeInstance(\n        this._version,\n        payload,\n        this._solution.serviceSid,\n        this._solution.identity,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ChallengeInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.factorSid] - Factor Sid.\n   * @param {challenge.challenge_statuses} [opts.status] -\n   *          The Status of theChallenges to fetch\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ChallengeListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ChallengeInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.factorSid] - Factor Sid.\n   * @param {challenge.challenge_statuses} [opts.status] -\n   *          The Status of theChallenges to fetch\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ChallengeListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ChallengeInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.factorSid] - Factor Sid.\n   * @param {challenge.challenge_statuses} [opts.status] -\n   *          The Status of theChallenges to fetch\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ChallengeListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FactorSid': _.get(opts, 'factorSid'),\n      'Status': _.get(opts, 'status'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ChallengePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ChallengeInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ChallengeListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ChallengePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a challenge\n   *\n   * @function get\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList#\n   *\n   * @param {string} sid - A string that uniquely identifies this Challenge.\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext}\n   */\n  /* jshint ignore:end */\n  ChallengeListInstance.get = function get(sid) {\n    return new ChallengeContext(this._version, this._solution.serviceSid, this._solution.identity, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ChallengeListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ChallengeListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ChallengeListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ChallengePage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.ChallengePage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ChallengeSolution} solution - Path solution\n *\n * @returns ChallengePage\n */\n/* jshint ignore:end */\nChallengePage = function ChallengePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ChallengePage.prototype, Page.prototype);\nChallengePage.prototype.constructor = ChallengePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ChallengeInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengePage#\n *\n * @param {ChallengePayload} payload - Payload response from the API\n *\n * @returns ChallengeInstance\n */\n/* jshint ignore:end */\nChallengePage.prototype.getInstance = function getInstance(payload) {\n  return new ChallengeInstance(\n    this._version,\n    payload,\n    this._solution.serviceSid,\n    this._solution.identity\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nChallengePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nChallengePage.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ChallengeContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeInstance\n *\n * @property {string} sid - A string that uniquely identifies this Challenge.\n * @property {string} accountSid - Account Sid.\n * @property {string} serviceSid - Service Sid.\n * @property {string} entitySid - Entity Sid.\n * @property {string} identity - Unique external identifier of the Entity\n * @property {string} factorSid - Factor Sid.\n * @property {Date} dateCreated - The date this Challenge was created\n * @property {Date} dateUpdated - The date this Challenge was updated\n * @property {Date} dateResponded - The date this Challenge was responded\n * @property {Date} expirationDate - The date-time when this Challenge expires\n * @property {challenge.challenge_statuses} status - The Status of this Challenge\n * @property {challenge.challenge_reasons} respondedReason -\n *          The Reason of this Challenge `status`\n * @property {object} details - Details about the Challenge.\n * @property {object} hiddenDetails - Hidden details about the Challenge\n * @property {challenge.factor_types} factorType -\n *          The Factor Type of this Challenge\n * @property {string} url - The URL of this resource.\n * @property {string} links - Nested resource URLs.\n *\n * @param {V2} version - Version of the resource\n * @param {ChallengePayload} payload - The instance payload\n * @param {sid} serviceSid - Service Sid.\n * @param {string} identity - Unique external identifier of the Entity\n * @param {sid} sid - A string that uniquely identifies this Challenge.\n */\n/* jshint ignore:end */\nChallengeInstance = function ChallengeInstance(version, payload, serviceSid,\n                                                identity, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.entitySid = payload.entity_sid; // jshint ignore:line\n  this.identity = payload.identity; // jshint ignore:line\n  this.factorSid = payload.factor_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.dateResponded = deserialize.iso8601DateTime(payload.date_responded); // jshint ignore:line\n  this.expirationDate = deserialize.iso8601DateTime(payload.expiration_date); // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.respondedReason = payload.responded_reason; // jshint ignore:line\n  this.details = payload.details; // jshint ignore:line\n  this.hiddenDetails = payload.hidden_details; // jshint ignore:line\n  this.factorType = payload.factor_type; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, identity: identity, sid: sid || this.sid, };\n};\n\nObject.defineProperty(ChallengeInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new ChallengeContext(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.identity,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ChallengeInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChallengeInstance\n */\n/* jshint ignore:end */\nChallengeInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ChallengeInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.authPayload] - Optional payload to verify the Challenge\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChallengeInstance\n */\n/* jshint ignore:end */\nChallengeInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the notifications\n *\n * @function notifications\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext.NotificationList}\n */\n/* jshint ignore:end */\nChallengeInstance.prototype.notifications = function notifications() {\n  return this._proxy.notifications;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nChallengeInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nChallengeInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ChallengeContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext\n *\n * @property {Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext.NotificationList} notifications -\n *          notifications resource\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid - Service Sid.\n * @param {string} identity - Unique external identifier of the Entity\n * @param {sid} sid - A string that uniquely identifies this Challenge.\n */\n/* jshint ignore:end */\nChallengeContext = function ChallengeContext(version, serviceSid, identity, sid)\n                                              {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, identity: identity, sid: sid, };\n  this._uri = `/Services/${serviceSid}/Entities/${identity}/Challenges/${sid}`;\n\n  // Dependents\n  this._notifications = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ChallengeInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChallengeInstance\n */\n/* jshint ignore:end */\nChallengeContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ChallengeInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.identity,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ChallengeInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.authPayload] - Optional payload to verify the Challenge\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChallengeInstance\n */\n/* jshint ignore:end */\nChallengeContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({'AuthPayload': _.get(opts, 'authPayload')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ChallengeInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.identity,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ChallengeContext.prototype,\n  'notifications', {\n    get: function() {\n      if (!this._notifications) {\n        this._notifications = new NotificationList(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.identity,\n          this._solution.sid\n        );\n      }\n      return this._notifications;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nChallengeContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nChallengeContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ChallengeList: ChallengeList,\n  ChallengePage: ChallengePage,\n  ChallengeInstance: ChallengeInstance,\n  ChallengeContext: ChallengeContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}