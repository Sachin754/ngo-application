{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../../../base/deserialize'); /* jshint ignore:line */\nvar values = require('../../../../../base/values'); /* jshint ignore:line */\n\nvar NewFactorList;\nvar NewFactorPage;\nvar NewFactorInstance;\n\n/* jshint ignore:start */\n/**\n * Initialize the NewFactorList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n * @param {string} serviceSid - Service Sid.\n * @param {string} identity - Unique external identifier of the Entity\n */\n/* jshint ignore:end */\nNewFactorList = function NewFactorList(version, serviceSid, identity) {\n  /* jshint ignore:start */\n  /**\n   * @function newFactors\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorContext}\n   */\n  /* jshint ignore:end */\n  function NewFactorListInstance(sid) {\n    return NewFactorListInstance.get(sid);\n  }\n  NewFactorListInstance._version = version;\n  // Path Solution\n  NewFactorListInstance._solution = {\n    serviceSid: serviceSid,\n    identity: identity\n  };\n  NewFactorListInstance._uri = `/Services/${serviceSid}/Entities/${identity}/Factors`;\n  /* jshint ignore:start */\n  /**\n   * create a NewFactorInstance\n   *\n   * @function create\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - The friendly name of this Factor\n   * @param {new_factor.factor_types} opts.factorType - The Type of this Factor\n   * @param {string} [opts.binding.alg] -\n   *          The algorithm used when `factor_type` is `push`\n   * @param {string} [opts.binding.publicKey] - The public key encoded in Base64\n   * @param {string} [opts.config.appId] -\n   *          The ID that uniquely identifies your app in the Google or Apple store\n   * @param {new_factor.notification_platforms} [opts.config.notificationPlatform] -\n   *          The transport technology used to generate the Notification Token\n   * @param {string} [opts.config.notificationToken] -\n   *          For APN, the device token. For FCM the registration token\n   * @param {string} [opts.config.sdkVersion] -\n   *          The Verify Push SDK version used to configure the factor\n   * @param {string} [opts.binding.secret] - The shared secret in Base32\n   * @param {number} [opts.config.timeStep] -\n   *          How often, in seconds, are TOTP codes generated\n   * @param {number} [opts.config.skew] -\n   *          The number of past and future time-steps valid at a given time\n   * @param {number} [opts.config.codeLength] -\n   *          Number of digits for generated TOTP codes\n   * @param {new_factor.totp_algorithms} [opts.config.alg] -\n   *          The algorithm used to derive the TOTP codes\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed NewFactorInstance\n   */\n  /* jshint ignore:end */\n  NewFactorListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n    if (_.isUndefined(opts.factorType)) {\n      throw new Error('Required parameter \"opts.factorType\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'FactorType': _.get(opts, 'factorType'),\n      'Binding.Alg': _.get(opts, 'binding.alg'),\n      'Binding.PublicKey': _.get(opts, 'binding.publicKey'),\n      'Config.AppId': _.get(opts, 'config.appId'),\n      'Config.NotificationPlatform': _.get(opts, 'config.notificationPlatform'),\n      'Config.NotificationToken': _.get(opts, 'config.notificationToken'),\n      'Config.SdkVersion': _.get(opts, 'config.sdkVersion'),\n      'Binding.Secret': _.get(opts, 'binding.secret'),\n      'Config.TimeStep': _.get(opts, 'config.timeStep'),\n      'Config.Skew': _.get(opts, 'config.skew'),\n      'Config.CodeLength': _.get(opts, 'config.codeLength'),\n      'Config.Alg': _.get(opts, 'config.alg')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new NewFactorInstance(this._version, payload));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  NewFactorListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  NewFactorListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return NewFactorListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the NewFactorPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {NewFactorSolution} solution - Path solution\n *\n * @returns NewFactorPage\n */\n/* jshint ignore:end */\nNewFactorPage = function NewFactorPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(NewFactorPage.prototype, Page.prototype);\nNewFactorPage.prototype.constructor = NewFactorPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of NewFactorInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorPage#\n *\n * @param {NewFactorPayload} payload - Payload response from the API\n *\n * @returns NewFactorInstance\n */\n/* jshint ignore:end */\nNewFactorPage.prototype.getInstance = function getInstance(payload) {\n  return new NewFactorInstance(this._version, payload, this._solution.serviceSid, this._solution.identity);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNewFactorPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nNewFactorPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the NewFactorContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorInstance\n *\n * @property {string} sid - A string that uniquely identifies this Factor.\n * @property {string} accountSid - Account Sid.\n * @property {string} serviceSid - Service Sid.\n * @property {string} entitySid - Entity Sid.\n * @property {string} identity - Unique external identifier of the Entity\n * @property {object} binding - Unique external identifier of the Entity\n * @property {Date} dateCreated - The date this Factor was created\n * @property {Date} dateUpdated - The date this Factor was updated\n * @property {string} friendlyName - A human readable description of this resource.\n * @property {new_factor.factor_statuses} status - The Status of this Factor\n * @property {new_factor.factor_types} factorType - The Type of this Factor\n * @property {object} config - Binding for a `factor_type`.\n * @property {string} url - The URL of this resource.\n *\n * @param {V2} version - Version of the resource\n * @param {NewFactorPayload} payload - The instance payload\n * @param {sid} serviceSid - Service Sid.\n * @param {string} identity - Unique external identifier of the Entity\n */\n/* jshint ignore:end */\nNewFactorInstance = function NewFactorInstance(version, payload, serviceSid, identity) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.entitySid = payload.entity_sid; // jshint ignore:line\n  this.identity = payload.identity; // jshint ignore:line\n  this.binding = payload.binding; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.factorType = payload.factor_type; // jshint ignore:line\n  this.config = payload.config; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    identity: identity\n  };\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNewFactorInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nNewFactorInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  NewFactorList: NewFactorList,\n  NewFactorPage: NewFactorPage,\n  NewFactorInstance: NewFactorInstance\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","values","NewFactorList","NewFactorPage","NewFactorInstance","version","serviceSid","identity","NewFactorListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","friendlyName","factorType","deferred","defer","data","of","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","service_sid","entitySid","entity_sid","binding","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","friendly_name","status","factor_type","config","url","_context","undefined","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/verify/v2/service/entity/newFactor.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar NewFactorList;\nvar NewFactorPage;\nvar NewFactorInstance;\n\n/* jshint ignore:start */\n/**\n * Initialize the NewFactorList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n * @param {string} serviceSid - Service Sid.\n * @param {string} identity - Unique external identifier of the Entity\n */\n/* jshint ignore:end */\nNewFactorList = function NewFactorList(version, serviceSid, identity) {\n  /* jshint ignore:start */\n  /**\n   * @function newFactors\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorContext}\n   */\n  /* jshint ignore:end */\n  function NewFactorListInstance(sid) {\n    return NewFactorListInstance.get(sid);\n  }\n\n  NewFactorListInstance._version = version;\n  // Path Solution\n  NewFactorListInstance._solution = {serviceSid: serviceSid, identity: identity};\n  NewFactorListInstance._uri = `/Services/${serviceSid}/Entities/${identity}/Factors`;\n  /* jshint ignore:start */\n  /**\n   * create a NewFactorInstance\n   *\n   * @function create\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - The friendly name of this Factor\n   * @param {new_factor.factor_types} opts.factorType - The Type of this Factor\n   * @param {string} [opts.binding.alg] -\n   *          The algorithm used when `factor_type` is `push`\n   * @param {string} [opts.binding.publicKey] - The public key encoded in Base64\n   * @param {string} [opts.config.appId] -\n   *          The ID that uniquely identifies your app in the Google or Apple store\n   * @param {new_factor.notification_platforms} [opts.config.notificationPlatform] -\n   *          The transport technology used to generate the Notification Token\n   * @param {string} [opts.config.notificationToken] -\n   *          For APN, the device token. For FCM the registration token\n   * @param {string} [opts.config.sdkVersion] -\n   *          The Verify Push SDK version used to configure the factor\n   * @param {string} [opts.binding.secret] - The shared secret in Base32\n   * @param {number} [opts.config.timeStep] -\n   *          How often, in seconds, are TOTP codes generated\n   * @param {number} [opts.config.skew] -\n   *          The number of past and future time-steps valid at a given time\n   * @param {number} [opts.config.codeLength] -\n   *          Number of digits for generated TOTP codes\n   * @param {new_factor.totp_algorithms} [opts.config.alg] -\n   *          The algorithm used to derive the TOTP codes\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed NewFactorInstance\n   */\n  /* jshint ignore:end */\n  NewFactorListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n    if (_.isUndefined(opts.factorType)) {\n      throw new Error('Required parameter \"opts.factorType\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'FactorType': _.get(opts, 'factorType'),\n      'Binding.Alg': _.get(opts, 'binding.alg'),\n      'Binding.PublicKey': _.get(opts, 'binding.publicKey'),\n      'Config.AppId': _.get(opts, 'config.appId'),\n      'Config.NotificationPlatform': _.get(opts, 'config.notificationPlatform'),\n      'Config.NotificationToken': _.get(opts, 'config.notificationToken'),\n      'Config.SdkVersion': _.get(opts, 'config.sdkVersion'),\n      'Binding.Secret': _.get(opts, 'binding.secret'),\n      'Config.TimeStep': _.get(opts, 'config.timeStep'),\n      'Config.Skew': _.get(opts, 'config.skew'),\n      'Config.CodeLength': _.get(opts, 'config.codeLength'),\n      'Config.Alg': _.get(opts, 'config.alg')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new NewFactorInstance(this._version, payload));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  NewFactorListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  NewFactorListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return NewFactorListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the NewFactorPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {NewFactorSolution} solution - Path solution\n *\n * @returns NewFactorPage\n */\n/* jshint ignore:end */\nNewFactorPage = function NewFactorPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(NewFactorPage.prototype, Page.prototype);\nNewFactorPage.prototype.constructor = NewFactorPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of NewFactorInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorPage#\n *\n * @param {NewFactorPayload} payload - Payload response from the API\n *\n * @returns NewFactorInstance\n */\n/* jshint ignore:end */\nNewFactorPage.prototype.getInstance = function getInstance(payload) {\n  return new NewFactorInstance(\n    this._version,\n    payload,\n    this._solution.serviceSid,\n    this._solution.identity\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNewFactorPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nNewFactorPage.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the NewFactorContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorInstance\n *\n * @property {string} sid - A string that uniquely identifies this Factor.\n * @property {string} accountSid - Account Sid.\n * @property {string} serviceSid - Service Sid.\n * @property {string} entitySid - Entity Sid.\n * @property {string} identity - Unique external identifier of the Entity\n * @property {object} binding - Unique external identifier of the Entity\n * @property {Date} dateCreated - The date this Factor was created\n * @property {Date} dateUpdated - The date this Factor was updated\n * @property {string} friendlyName - A human readable description of this resource.\n * @property {new_factor.factor_statuses} status - The Status of this Factor\n * @property {new_factor.factor_types} factorType - The Type of this Factor\n * @property {object} config - Binding for a `factor_type`.\n * @property {string} url - The URL of this resource.\n *\n * @param {V2} version - Version of the resource\n * @param {NewFactorPayload} payload - The instance payload\n * @param {sid} serviceSid - Service Sid.\n * @param {string} identity - Unique external identifier of the Entity\n */\n/* jshint ignore:end */\nNewFactorInstance = function NewFactorInstance(version, payload, serviceSid,\n                                                identity) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.entitySid = payload.entity_sid; // jshint ignore:line\n  this.identity = payload.identity; // jshint ignore:line\n  this.binding = payload.binding; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.factorType = payload.factor_type; // jshint ignore:line\n  this.config = payload.config; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, identity: identity, };\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNewFactorInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nNewFactorInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  NewFactorList: NewFactorList,\n  NewFactorPage: NewFactorPage,\n  NewFactorInstance: NewFactorInstance\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}