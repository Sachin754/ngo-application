{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../base/Page'); /* jshint ignore:line */\nvar PhoneNumberList = require('./service/phoneNumber').PhoneNumberList;\nvar SessionList = require('./service/session').SessionList;\nvar ShortCodeList = require('./service/shortCode').ShortCodeList;\nvar deserialize = require('../../../base/deserialize'); /* jshint ignore:line */\nvar values = require('../../../base/values'); /* jshint ignore:line */\n\nvar ServiceList;\nvar ServicePage;\nvar ServiceInstance;\nvar ServiceContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceList\n *\n * @param {Twilio.Proxy.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nServiceList = function ServiceList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function services\n   * @memberof Twilio.Proxy.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext}\n   */\n  /* jshint ignore:end */\n  function ServiceListInstance(sid) {\n    return ServiceListInstance.get(sid);\n  }\n  ServiceListInstance._version = version;\n  // Path Solution\n  ServiceListInstance._solution = {};\n  ServiceListInstance._uri = `/Services`;\n  /* jshint ignore:start */\n  /**\n   * Streams ServiceInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Proxy.V1.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ServiceInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Proxy.V1.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Proxy.V1.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Proxy.V1.ServiceList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a ServiceInstance\n   *\n   * @function create\n   * @memberof Twilio.Proxy.V1.ServiceList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.uniqueName -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {number} [opts.defaultTtl] - Default TTL for a Session, in seconds\n   * @param {string} [opts.callbackUrl] -\n   *          The URL we should call when the interaction status changes\n   * @param {service.geo_match_level} [opts.geoMatchLevel] -\n   *          Where a proxy number must be located relative to the participant identifier\n   * @param {service.number_selection_behavior} [opts.numberSelectionBehavior] -\n   *          The preference for Proxy Number selection for the Service instance\n   * @param {string} [opts.interceptCallbackUrl] -\n   *          The URL we call on each interaction\n   * @param {string} [opts.outOfSessionCallbackUrl] -\n   *          The URL we call when an inbound call or SMS action occurs on a closed or non-existent Session\n   * @param {string} [opts.chatInstanceSid] - The SID of the Chat Service Instance\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ServiceInstance\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.uniqueName)) {\n      throw new Error('Required parameter \"opts.uniqueName\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'DefaultTtl': _.get(opts, 'defaultTtl'),\n      'CallbackUrl': _.get(opts, 'callbackUrl'),\n      'GeoMatchLevel': _.get(opts, 'geoMatchLevel'),\n      'NumberSelectionBehavior': _.get(opts, 'numberSelectionBehavior'),\n      'InterceptCallbackUrl': _.get(opts, 'interceptCallbackUrl'),\n      'OutOfSessionCallbackUrl': _.get(opts, 'outOfSessionCallbackUrl'),\n      'ChatInstanceSid': _.get(opts, 'chatInstanceSid')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a service\n   *\n   * @function get\n   * @memberof Twilio.Proxy.V1.ServiceList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext}\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.get = function get(sid) {\n    return new ServiceContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Proxy.V1.ServiceList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  ServiceListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return ServiceListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ServicePage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServicePage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ServiceSolution} solution - Path solution\n *\n * @returns ServicePage\n */\n/* jshint ignore:end */\nServicePage = function ServicePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(ServicePage.prototype, Page.prototype);\nServicePage.prototype.constructor = ServicePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ServiceInstance\n *\n * @function getInstance\n * @memberof Twilio.Proxy.V1.ServicePage#\n *\n * @param {ServicePayload} payload - Payload response from the API\n *\n * @returns ServiceInstance\n */\n/* jshint ignore:end */\nServicePage.prototype.getInstance = function getInstance(payload) {\n  return new ServiceInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServicePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServicePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nServicePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} chatInstanceSid - The SID of the Chat Service Instance\n * @property {string} callbackUrl -\n *          The URL we call when the interaction status changes\n * @property {number} defaultTtl - Default TTL for a Session, in seconds\n * @property {service.number_selection_behavior} numberSelectionBehavior -\n *          The preference for Proxy Number selection for the Service instance\n * @property {service.geo_match_level} geoMatchLevel -\n *          Where a proxy number must be located relative to the participant identifier\n * @property {string} interceptCallbackUrl - The URL we call on each interaction\n * @property {string} outOfSessionCallbackUrl -\n *          The URL we call when an inbound call or SMS action occurs on a closed or non-existent Session\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the Service resource\n * @property {string} links - The URLs of resources related to the Service\n *\n * @param {V1} version - Version of the resource\n * @param {ServicePayload} payload - The instance payload\n * @param {sid_like} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nServiceInstance = function ServiceInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.chatInstanceSid = payload.chat_instance_sid; // jshint ignore:line\n  this.callbackUrl = payload.callback_url; // jshint ignore:line\n  this.defaultTtl = deserialize.integer(payload.default_ttl); // jshint ignore:line\n  this.numberSelectionBehavior = payload.number_selection_behavior; // jshint ignore:line\n  this.geoMatchLevel = payload.geo_match_level; // jshint ignore:line\n  this.interceptCallbackUrl = payload.intercept_callback_url; // jshint ignore:line\n  this.outOfSessionCallbackUrl = payload.out_of_session_callback_url; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(ServiceInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ServiceContext(this._version, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Proxy.V1.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.Proxy.V1.ServiceInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {number} [opts.defaultTtl] - Default TTL for a Session, in seconds\n * @param {string} [opts.callbackUrl] -\n *          The URL we should call when the interaction status changes\n * @param {service.geo_match_level} [opts.geoMatchLevel] -\n *          Where a proxy number must be located relative to the participant identifier\n * @param {service.number_selection_behavior} [opts.numberSelectionBehavior] -\n *          The preference for Proxy Number selection for the Service instance\n * @param {string} [opts.interceptCallbackUrl] -\n *          The URL we call on each interaction\n * @param {string} [opts.outOfSessionCallbackUrl] -\n *          The URL we call when an inbound call or SMS action occurs on a closed or non-existent Session\n * @param {string} [opts.chatInstanceSid] - The SID of the Chat Service Instance\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the sessions\n *\n * @function sessions\n * @memberof Twilio.Proxy.V1.ServiceInstance#\n *\n * @returns {Twilio.Proxy.V1.ServiceContext.SessionList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.sessions = function sessions() {\n  return this._proxy.sessions;\n};\n\n/* jshint ignore:start */\n/**\n * Access the phoneNumbers\n *\n * @function phoneNumbers\n * @memberof Twilio.Proxy.V1.ServiceInstance#\n *\n * @returns {Twilio.Proxy.V1.ServiceContext.PhoneNumberList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.phoneNumbers = function phoneNumbers() {\n  return this._proxy.phoneNumbers;\n};\n\n/* jshint ignore:start */\n/**\n * Access the shortCodes\n *\n * @function shortCodes\n * @memberof Twilio.Proxy.V1.ServiceInstance#\n *\n * @returns {Twilio.Proxy.V1.ServiceContext.ShortCodeList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.shortCodes = function shortCodes() {\n  return this._proxy.shortCodes;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServiceInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nServiceInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext\n *\n * @property {Twilio.Proxy.V1.ServiceContext.SessionList} sessions -\n *          sessions resource\n * @property {Twilio.Proxy.V1.ServiceContext.PhoneNumberList} phoneNumbers -\n *          phoneNumbers resource\n * @property {Twilio.Proxy.V1.ServiceContext.ShortCodeList} shortCodes -\n *          shortCodes resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nServiceContext = function ServiceContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/Services/${sid}`;\n\n  // Dependents\n  this._sessions = undefined;\n  this._phoneNumbers = undefined;\n  this._shortCodes = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Proxy.V1.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.Proxy.V1.ServiceContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {number} [opts.defaultTtl] - Default TTL for a Session, in seconds\n * @param {string} [opts.callbackUrl] -\n *          The URL we should call when the interaction status changes\n * @param {service.geo_match_level} [opts.geoMatchLevel] -\n *          Where a proxy number must be located relative to the participant identifier\n * @param {service.number_selection_behavior} [opts.numberSelectionBehavior] -\n *          The preference for Proxy Number selection for the Service instance\n * @param {string} [opts.interceptCallbackUrl] -\n *          The URL we call on each interaction\n * @param {string} [opts.outOfSessionCallbackUrl] -\n *          The URL we call when an inbound call or SMS action occurs on a closed or non-existent Session\n * @param {string} [opts.chatInstanceSid] - The SID of the Chat Service Instance\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'UniqueName': _.get(opts, 'uniqueName'),\n    'DefaultTtl': _.get(opts, 'defaultTtl'),\n    'CallbackUrl': _.get(opts, 'callbackUrl'),\n    'GeoMatchLevel': _.get(opts, 'geoMatchLevel'),\n    'NumberSelectionBehavior': _.get(opts, 'numberSelectionBehavior'),\n    'InterceptCallbackUrl': _.get(opts, 'interceptCallbackUrl'),\n    'OutOfSessionCallbackUrl': _.get(opts, 'outOfSessionCallbackUrl'),\n    'ChatInstanceSid': _.get(opts, 'chatInstanceSid')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(ServiceContext.prototype, 'sessions', {\n  get: function () {\n    if (!this._sessions) {\n      this._sessions = new SessionList(this._version, this._solution.sid);\n    }\n    return this._sessions;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'phoneNumbers', {\n  get: function () {\n    if (!this._phoneNumbers) {\n      this._phoneNumbers = new PhoneNumberList(this._version, this._solution.sid);\n    }\n    return this._phoneNumbers;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'shortCodes', {\n  get: function () {\n    if (!this._shortCodes) {\n      this._shortCodes = new ShortCodeList(this._version, this._solution.sid);\n    }\n    return this._shortCodes;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServiceContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nServiceContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  ServiceList: ServiceList,\n  ServicePage: ServicePage,\n  ServiceInstance: ServiceInstance,\n  ServiceContext: ServiceContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","PhoneNumberList","SessionList","ShortCodeList","deserialize","values","ServiceList","ServicePage","ServiceInstance","ServiceContext","version","ServiceListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","uniqueName","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","unique_name","accountSid","account_sid","chatInstanceSid","chat_instance_sid","callbackUrl","callback_url","defaultTtl","integer","default_ttl","numberSelectionBehavior","number_selection_behavior","geoMatchLevel","geo_match_level","interceptCallbackUrl","intercept_callback_url","outOfSessionCallbackUrl","out_of_session_callback_url","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","remove","update","sessions","phoneNumbers","shortCodes","_sessions","_phoneNumbers","_shortCodes","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/proxy/v1/service.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar PhoneNumberList = require('./service/phoneNumber').PhoneNumberList;\nvar SessionList = require('./service/session').SessionList;\nvar ShortCodeList = require('./service/shortCode').ShortCodeList;\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar ServiceList;\nvar ServicePage;\nvar ServiceInstance;\nvar ServiceContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceList\n *\n * @param {Twilio.Proxy.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nServiceList = function ServiceList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function services\n   * @memberof Twilio.Proxy.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext}\n   */\n  /* jshint ignore:end */\n  function ServiceListInstance(sid) {\n    return ServiceListInstance.get(sid);\n  }\n\n  ServiceListInstance._version = version;\n  // Path Solution\n  ServiceListInstance._solution = {};\n  ServiceListInstance._uri = `/Services`;\n  /* jshint ignore:start */\n  /**\n   * Streams ServiceInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Proxy.V1.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ServiceInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Proxy.V1.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Proxy.V1.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Proxy.V1.ServiceList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a ServiceInstance\n   *\n   * @function create\n   * @memberof Twilio.Proxy.V1.ServiceList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.uniqueName -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {number} [opts.defaultTtl] - Default TTL for a Session, in seconds\n   * @param {string} [opts.callbackUrl] -\n   *          The URL we should call when the interaction status changes\n   * @param {service.geo_match_level} [opts.geoMatchLevel] -\n   *          Where a proxy number must be located relative to the participant identifier\n   * @param {service.number_selection_behavior} [opts.numberSelectionBehavior] -\n   *          The preference for Proxy Number selection for the Service instance\n   * @param {string} [opts.interceptCallbackUrl] -\n   *          The URL we call on each interaction\n   * @param {string} [opts.outOfSessionCallbackUrl] -\n   *          The URL we call when an inbound call or SMS action occurs on a closed or non-existent Session\n   * @param {string} [opts.chatInstanceSid] - The SID of the Chat Service Instance\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ServiceInstance\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.uniqueName)) {\n      throw new Error('Required parameter \"opts.uniqueName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'DefaultTtl': _.get(opts, 'defaultTtl'),\n      'CallbackUrl': _.get(opts, 'callbackUrl'),\n      'GeoMatchLevel': _.get(opts, 'geoMatchLevel'),\n      'NumberSelectionBehavior': _.get(opts, 'numberSelectionBehavior'),\n      'InterceptCallbackUrl': _.get(opts, 'interceptCallbackUrl'),\n      'OutOfSessionCallbackUrl': _.get(opts, 'outOfSessionCallbackUrl'),\n      'ChatInstanceSid': _.get(opts, 'chatInstanceSid')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a service\n   *\n   * @function get\n   * @memberof Twilio.Proxy.V1.ServiceList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext}\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.get = function get(sid) {\n    return new ServiceContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Proxy.V1.ServiceList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ServiceListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ServiceListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ServicePage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServicePage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ServiceSolution} solution - Path solution\n *\n * @returns ServicePage\n */\n/* jshint ignore:end */\nServicePage = function ServicePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ServicePage.prototype, Page.prototype);\nServicePage.prototype.constructor = ServicePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ServiceInstance\n *\n * @function getInstance\n * @memberof Twilio.Proxy.V1.ServicePage#\n *\n * @param {ServicePayload} payload - Payload response from the API\n *\n * @returns ServiceInstance\n */\n/* jshint ignore:end */\nServicePage.prototype.getInstance = function getInstance(payload) {\n  return new ServiceInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServicePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServicePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nServicePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} chatInstanceSid - The SID of the Chat Service Instance\n * @property {string} callbackUrl -\n *          The URL we call when the interaction status changes\n * @property {number} defaultTtl - Default TTL for a Session, in seconds\n * @property {service.number_selection_behavior} numberSelectionBehavior -\n *          The preference for Proxy Number selection for the Service instance\n * @property {service.geo_match_level} geoMatchLevel -\n *          Where a proxy number must be located relative to the participant identifier\n * @property {string} interceptCallbackUrl - The URL we call on each interaction\n * @property {string} outOfSessionCallbackUrl -\n *          The URL we call when an inbound call or SMS action occurs on a closed or non-existent Session\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the Service resource\n * @property {string} links - The URLs of resources related to the Service\n *\n * @param {V1} version - Version of the resource\n * @param {ServicePayload} payload - The instance payload\n * @param {sid_like} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nServiceInstance = function ServiceInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.chatInstanceSid = payload.chat_instance_sid; // jshint ignore:line\n  this.callbackUrl = payload.callback_url; // jshint ignore:line\n  this.defaultTtl = deserialize.integer(payload.default_ttl); // jshint ignore:line\n  this.numberSelectionBehavior = payload.number_selection_behavior; // jshint ignore:line\n  this.geoMatchLevel = payload.geo_match_level; // jshint ignore:line\n  this.interceptCallbackUrl = payload.intercept_callback_url; // jshint ignore:line\n  this.outOfSessionCallbackUrl = payload.out_of_session_callback_url; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(ServiceInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new ServiceContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Proxy.V1.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.Proxy.V1.ServiceInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {number} [opts.defaultTtl] - Default TTL for a Session, in seconds\n * @param {string} [opts.callbackUrl] -\n *          The URL we should call when the interaction status changes\n * @param {service.geo_match_level} [opts.geoMatchLevel] -\n *          Where a proxy number must be located relative to the participant identifier\n * @param {service.number_selection_behavior} [opts.numberSelectionBehavior] -\n *          The preference for Proxy Number selection for the Service instance\n * @param {string} [opts.interceptCallbackUrl] -\n *          The URL we call on each interaction\n * @param {string} [opts.outOfSessionCallbackUrl] -\n *          The URL we call when an inbound call or SMS action occurs on a closed or non-existent Session\n * @param {string} [opts.chatInstanceSid] - The SID of the Chat Service Instance\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the sessions\n *\n * @function sessions\n * @memberof Twilio.Proxy.V1.ServiceInstance#\n *\n * @returns {Twilio.Proxy.V1.ServiceContext.SessionList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.sessions = function sessions() {\n  return this._proxy.sessions;\n};\n\n/* jshint ignore:start */\n/**\n * Access the phoneNumbers\n *\n * @function phoneNumbers\n * @memberof Twilio.Proxy.V1.ServiceInstance#\n *\n * @returns {Twilio.Proxy.V1.ServiceContext.PhoneNumberList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.phoneNumbers = function phoneNumbers() {\n  return this._proxy.phoneNumbers;\n};\n\n/* jshint ignore:start */\n/**\n * Access the shortCodes\n *\n * @function shortCodes\n * @memberof Twilio.Proxy.V1.ServiceInstance#\n *\n * @returns {Twilio.Proxy.V1.ServiceContext.ShortCodeList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.shortCodes = function shortCodes() {\n  return this._proxy.shortCodes;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServiceInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nServiceInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext\n *\n * @property {Twilio.Proxy.V1.ServiceContext.SessionList} sessions -\n *          sessions resource\n * @property {Twilio.Proxy.V1.ServiceContext.PhoneNumberList} phoneNumbers -\n *          phoneNumbers resource\n * @property {Twilio.Proxy.V1.ServiceContext.ShortCodeList} shortCodes -\n *          shortCodes resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nServiceContext = function ServiceContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/Services/${sid}`;\n\n  // Dependents\n  this._sessions = undefined;\n  this._phoneNumbers = undefined;\n  this._shortCodes = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Proxy.V1.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.Proxy.V1.ServiceContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {number} [opts.defaultTtl] - Default TTL for a Session, in seconds\n * @param {string} [opts.callbackUrl] -\n *          The URL we should call when the interaction status changes\n * @param {service.geo_match_level} [opts.geoMatchLevel] -\n *          Where a proxy number must be located relative to the participant identifier\n * @param {service.number_selection_behavior} [opts.numberSelectionBehavior] -\n *          The preference for Proxy Number selection for the Service instance\n * @param {string} [opts.interceptCallbackUrl] -\n *          The URL we call on each interaction\n * @param {string} [opts.outOfSessionCallbackUrl] -\n *          The URL we call when an inbound call or SMS action occurs on a closed or non-existent Session\n * @param {string} [opts.chatInstanceSid] - The SID of the Chat Service Instance\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'UniqueName': _.get(opts, 'uniqueName'),\n    'DefaultTtl': _.get(opts, 'defaultTtl'),\n    'CallbackUrl': _.get(opts, 'callbackUrl'),\n    'GeoMatchLevel': _.get(opts, 'geoMatchLevel'),\n    'NumberSelectionBehavior': _.get(opts, 'numberSelectionBehavior'),\n    'InterceptCallbackUrl': _.get(opts, 'interceptCallbackUrl'),\n    'OutOfSessionCallbackUrl': _.get(opts, 'outOfSessionCallbackUrl'),\n    'ChatInstanceSid': _.get(opts, 'chatInstanceSid')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ServiceContext.prototype,\n  'sessions', {\n    get: function() {\n      if (!this._sessions) {\n        this._sessions = new SessionList(this._version, this._solution.sid);\n      }\n      return this._sessions;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'phoneNumbers', {\n    get: function() {\n      if (!this._phoneNumbers) {\n        this._phoneNumbers = new PhoneNumberList(this._version, this._solution.sid);\n      }\n      return this._phoneNumbers;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'shortCodes', {\n    get: function() {\n      if (!this._shortCodes) {\n        this._shortCodes = new ShortCodeList(this._version, this._solution.sid);\n      }\n      return this._shortCodes;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServiceContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nServiceContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ServiceList: ServiceList,\n  ServicePage: ServicePage,\n  ServiceInstance: ServiceInstance,\n  ServiceContext: ServiceContext\n};\n"],"mappings":"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AASA,KAAKA,CAAC/F,QAAQ,EAAE;EACzD,OAAO,IAAI,CAACgG,MAAM,CAACD,KAAK,CAAC/F,QAAQ,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,eAAe,CAACmE,SAAS,CAACyC,MAAM,GAAG,SAASA,MAAMA,CAACjG,QAAQ,EAAE;EAC3D,OAAO,IAAI,CAACgG,MAAM,CAACC,MAAM,CAACjG,QAAQ,CAAC;AACrC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,eAAe,CAACmE,SAAS,CAAC0C,MAAM,GAAG,SAASA,MAAMA,CAACnG,IAAI,EAAEC,QAAQ,EAAE;EACjE,OAAO,IAAI,CAACgG,MAAM,CAACE,MAAM,CAACnG,IAAI,EAAEC,QAAQ,CAAC;AAC3C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,eAAe,CAACmE,SAAS,CAAC2C,QAAQ,GAAG,SAASA,QAAQA,CAAA,EAAG;EACvD,OAAO,IAAI,CAACH,MAAM,CAACG,QAAQ;AAC7B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA9G,eAAe,CAACmE,SAAS,CAAC4C,YAAY,GAAG,SAASA,YAAYA,CAAA,EAAG;EAC/D,OAAO,IAAI,CAACJ,MAAM,CAACI,YAAY;AACjC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA/G,eAAe,CAACmE,SAAS,CAAC6C,UAAU,GAAG,SAASA,UAAUA,CAAA,EAAG;EAC3D,OAAO,IAAI,CAACL,MAAM,CAACK,UAAU;AAC/B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAhH,eAAe,CAACmE,SAAS,CAACP,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EACnD,IAAIY,K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"},"metadata":{},"sourceType":"script","externalDependencies":[]}