{"ast":null,"code":"\"use strict\";\n\n/*\n * This code was generated by\n * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __\n *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\\ | |___ |__/ |__|  | |  | |__/\n *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \\| |___ |  \\ |  |  | |__| |  \\\n *\n * Twilio - Supersim\n * This is the public Twilio REST API.\n *\n * NOTE: This class is auto generated by OpenAPI Generator.\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SimIpAddressPage = exports.SimIpAddressInstance = exports.SimIpAddressListInstance = void 0;\nconst util_1 = require(\"util\");\nconst Page_1 = __importDefault(require(\"../../../../base/Page\"));\nconst deserialize = require(\"../../../../base/deserialize\");\nconst serialize = require(\"../../../../base/serialize\");\nconst utility_1 = require(\"../../../../base/utility\");\nfunction SimIpAddressListInstance(version, simSid) {\n  if (!(0, utility_1.isValidPathParam)(simSid)) {\n    throw new Error(\"Parameter 'simSid' is not valid.\");\n  }\n  const instance = {};\n  instance._version = version;\n  instance._solution = {\n    simSid\n  };\n  instance._uri = `/Sims/${simSid}/IpAddresses`;\n  instance.page = function page(params, callback) {\n    if (params instanceof Function) {\n      callback = params;\n      params = {};\n    } else {\n      params = params || {};\n    }\n    let data = {};\n    if (params[\"pageSize\"] !== undefined) data[\"PageSize\"] = params[\"pageSize\"];\n    if (params.pageNumber !== undefined) data[\"Page\"] = params.pageNumber;\n    if (params.pageToken !== undefined) data[\"PageToken\"] = params.pageToken;\n    const headers = {};\n    let operationVersion = version,\n      operationPromise = operationVersion.page({\n        uri: instance._uri,\n        method: \"get\",\n        params: data,\n        headers\n      });\n    operationPromise = operationPromise.then(payload => new SimIpAddressPage(operationVersion, payload, instance._solution));\n    operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n    return operationPromise;\n  };\n  instance.each = instance._version.each;\n  instance.list = instance._version.list;\n  instance.getPage = function getPage(targetUrl, callback) {\n    const operationPromise = instance._version._domain.twilio.request({\n      method: \"get\",\n      uri: targetUrl\n    });\n    let pagePromise = operationPromise.then(payload => new SimIpAddressPage(instance._version, payload, instance._solution));\n    pagePromise = instance._version.setPromiseCallback(pagePromise, callback);\n    return pagePromise;\n  };\n  instance.toJSON = function toJSON() {\n    return instance._solution;\n  };\n  instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {\n    return (0, util_1.inspect)(instance.toJSON(), options);\n  };\n  return instance;\n}\nexports.SimIpAddressListInstance = SimIpAddressListInstance;\nclass SimIpAddressInstance {\n  constructor(_version, payload, simSid) {\n    this._version = _version;\n    this.ipAddress = payload.ip_address;\n    this.ipAddressVersion = payload.ip_address_version;\n  }\n  /**\n   * Provide a user-friendly representation\n   *\n   * @returns Object\n   */\n  toJSON() {\n    return {\n      ipAddress: this.ipAddress,\n      ipAddressVersion: this.ipAddressVersion\n    };\n  }\n  [util_1.inspect.custom](_depth, options) {\n    return (0, util_1.inspect)(this.toJSON(), options);\n  }\n}\nexports.SimIpAddressInstance = SimIpAddressInstance;\nclass SimIpAddressPage extends Page_1.default {\n  /**\n   * Initialize the SimIpAddressPage\n   *\n   * @param version - Version of the resource\n   * @param response - Response from the API\n   * @param solution - Path solution\n   */\n  constructor(version, response, solution) {\n    super(version, response, solution);\n  }\n  /**\n   * Build an instance of SimIpAddressInstance\n   *\n   * @param payload - Payload response from the API\n   */\n  getInstance(payload) {\n    return new SimIpAddressInstance(this._version, payload, this._solution.simSid);\n  }\n  [util_1.inspect.custom](depth, options) {\n    return (0, util_1.inspect)(this.toJSON(), options);\n  }\n}\nexports.SimIpAddressPage = SimIpAddressPage;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","SimIpAddressPage","SimIpAddressInstance","SimIpAddressListInstance","util_1","require","Page_1","deserialize","serialize","utility_1","version","simSid","isValidPathParam","Error","instance","_version","_solution","_uri","page","params","callback","Function","data","undefined","pageNumber","pageToken","headers","operationVersion","operationPromise","uri","method","then","payload","setPromiseCallback","each","list","getPage","targetUrl","_domain","twilio","request","pagePromise","toJSON","inspect","custom","inspectImpl","_depth","options","constructor","ipAddress","ip_address","ipAddressVersion","ip_address_version","default","response","solution","getInstance","depth"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/supersim/v1/sim/simIpAddress.js"],"sourcesContent":["\"use strict\";\n/*\n * This code was generated by\n * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __\n *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\\ | |___ |__/ |__|  | |  | |__/\n *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \\| |___ |  \\ |  |  | |__| |  \\\n *\n * Twilio - Supersim\n * This is the public Twilio REST API.\n *\n * NOTE: This class is auto generated by OpenAPI Generator.\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SimIpAddressPage = exports.SimIpAddressInstance = exports.SimIpAddressListInstance = void 0;\nconst util_1 = require(\"util\");\nconst Page_1 = __importDefault(require(\"../../../../base/Page\"));\nconst deserialize = require(\"../../../../base/deserialize\");\nconst serialize = require(\"../../../../base/serialize\");\nconst utility_1 = require(\"../../../../base/utility\");\nfunction SimIpAddressListInstance(version, simSid) {\n    if (!(0, utility_1.isValidPathParam)(simSid)) {\n        throw new Error(\"Parameter 'simSid' is not valid.\");\n    }\n    const instance = {};\n    instance._version = version;\n    instance._solution = { simSid };\n    instance._uri = `/Sims/${simSid}/IpAddresses`;\n    instance.page = function page(params, callback) {\n        if (params instanceof Function) {\n            callback = params;\n            params = {};\n        }\n        else {\n            params = params || {};\n        }\n        let data = {};\n        if (params[\"pageSize\"] !== undefined)\n            data[\"PageSize\"] = params[\"pageSize\"];\n        if (params.pageNumber !== undefined)\n            data[\"Page\"] = params.pageNumber;\n        if (params.pageToken !== undefined)\n            data[\"PageToken\"] = params.pageToken;\n        const headers = {};\n        let operationVersion = version, operationPromise = operationVersion.page({\n            uri: instance._uri,\n            method: \"get\",\n            params: data,\n            headers,\n        });\n        operationPromise = operationPromise.then((payload) => new SimIpAddressPage(operationVersion, payload, instance._solution));\n        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n        return operationPromise;\n    };\n    instance.each = instance._version.each;\n    instance.list = instance._version.list;\n    instance.getPage = function getPage(targetUrl, callback) {\n        const operationPromise = instance._version._domain.twilio.request({\n            method: \"get\",\n            uri: targetUrl,\n        });\n        let pagePromise = operationPromise.then((payload) => new SimIpAddressPage(instance._version, payload, instance._solution));\n        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);\n        return pagePromise;\n    };\n    instance.toJSON = function toJSON() {\n        return instance._solution;\n    };\n    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {\n        return (0, util_1.inspect)(instance.toJSON(), options);\n    };\n    return instance;\n}\nexports.SimIpAddressListInstance = SimIpAddressListInstance;\nclass SimIpAddressInstance {\n    constructor(_version, payload, simSid) {\n        this._version = _version;\n        this.ipAddress = payload.ip_address;\n        this.ipAddressVersion = payload.ip_address_version;\n    }\n    /**\n     * Provide a user-friendly representation\n     *\n     * @returns Object\n     */\n    toJSON() {\n        return {\n            ipAddress: this.ipAddress,\n            ipAddressVersion: this.ipAddressVersion,\n        };\n    }\n    [util_1.inspect.custom](_depth, options) {\n        return (0, util_1.inspect)(this.toJSON(), options);\n    }\n}\nexports.SimIpAddressInstance = SimIpAddressInstance;\nclass SimIpAddressPage extends Page_1.default {\n    /**\n     * Initialize the SimIpAddressPage\n     *\n     * @param version - Version of the resource\n     * @param response - Response from the API\n     * @param solution - Path solution\n     */\n    constructor(version, response, solution) {\n        super(version, response, solution);\n    }\n    /**\n     * Build an instance of SimIpAddressInstance\n     *\n     * @param payload - Payload response from the API\n     */\n    getInstance(payload) {\n        return new SimIpAddressInstance(this._version, payload, this._solution.simSid);\n    }\n    [util_1.inspect.custom](depth, options) {\n        return (0, util_1.inspect)(this.toJSON(), options);\n    }\n}\nexports.SimIpAddressPage = SimIpAddressPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}