{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst RestException_1 = __importDefault(require(\"./RestException\"));\nclass Page {\n  /**\n   *\n   * Base page object to maintain request state.\n   *\n   * @param version - A twilio version instance\n   * @param response - The http response\n   * @param solution - path solution\n   */\n  constructor(version, response, solution) {\n    let payload = this.processResponse(response);\n    this._version = version;\n    this._payload = payload;\n    this._solution = solution;\n    this.nextPageUrl = this.getNextPageUrl();\n    this.previousPageUrl = this.getPreviousPageUrl();\n    this.instances = this.loadInstances(this.loadPage(payload));\n  }\n  /**\n   * Get the url of the previous page of records\n   *\n   * @returns url of the previous page, or undefined if the\n   * previous page URI/URL is not defined.\n   */\n  getPreviousPageUrl() {\n    if (this._payload.meta && \"previous_page_url\" in this._payload.meta && this._payload.meta.previous_page_url) {\n      // jshint ignore:line\n      return this._payload.meta.previous_page_url; // jshint ignore:line\n    }\n\n    if (\"previous_page_uri\" in this._payload && this._payload.previous_page_uri) {\n      // jshint ignore:line\n      return this._version._domain.absoluteUrl(this._payload.previous_page_uri); // jshint ignore:line\n    }\n\n    return undefined;\n  }\n  /**\n   * Get the url of the next page of records\n   *\n   * @returns url of the next page, or undefined if the\n   * next page URI/URL is not defined.\n   */\n  getNextPageUrl() {\n    if (this._payload.meta && \"next_page_url\" in this._payload.meta && this._payload.meta.next_page_url) {\n      // jshint ignore:line\n      return this._payload.meta.next_page_url; // jshint ignore:line\n    }\n\n    if (\"next_page_uri\" in this._payload && this._payload.next_page_uri) {\n      // jshint ignore:line\n      return this._version._domain.absoluteUrl(this._payload.next_page_uri); // jshint ignore:line\n    }\n\n    return undefined;\n  }\n  /**\n   * Build a new instance given a json payload\n   *\n   * @param payload - Payload response from the API\n   * @returns instance of a resource\n   */\n  getInstance(payload) {\n    throw new Error(\"Page.get_instance() must be implemented in the derived class\");\n  }\n  /**\n   * Load a list of records\n   *\n   * @param resources - json payload of records\n   * @returns list of resources\n   */\n  loadInstances(resources) {\n    let instances = [];\n    resources.forEach(resource => {\n      instances.push(this.getInstance(resource));\n    });\n    return instances;\n  }\n  /**\n   * Fetch the next page of records\n   *\n   * @returns promise that resolves to next page of results,\n   * or undefined if there isn't a nextPageUrl undefined.\n   */\n  nextPage() {\n    if (!this.nextPageUrl) {\n      return undefined;\n    }\n    var reqPromise = this._version._domain.twilio.request({\n      method: \"get\",\n      uri: this.nextPageUrl\n    });\n    var nextPagePromise = reqPromise.then(function (response) {\n      return new this.constructor(this._version, response, this._solution);\n    }.bind(this));\n    return nextPagePromise;\n  }\n  /**\n   * Fetch the previous page of records\n   *\n   * @returns promise that resolves to previous page of\n   * results, or undefined if there isn't a previousPageUrl undefined.\n   */\n  previousPage() {\n    if (!this.previousPageUrl) {\n      return undefined;\n    }\n    var reqPromise = this._version._domain.twilio.request({\n      method: \"get\",\n      uri: this.previousPageUrl\n    });\n    var prevPagePromise = reqPromise.then(function (response) {\n      return new this.constructor(this._version, response, this._solution);\n    }.bind(this));\n    return prevPagePromise;\n  }\n  /**\n   * Parse json response from API\n   *\n   * @param response - API response\n   *\n   * @throws Error If non 200 status code is returned\n   *\n   * @returns json parsed response\n   */\n  processResponse(response) {\n    if (response.statusCode !== 200) {\n      throw new RestException_1.default(response);\n    }\n    if (typeof response.body === \"string\") {\n      return JSON.parse(response.body);\n    }\n    return response.body;\n  }\n  /**\n   * Load a page of records\n   *\n   * @param  {object} payload json payload\n   * @return {array} the page of records\n   */\n  loadPage(payload) {\n    if (payload.meta?.key) {\n      return payload[payload.meta.key];\n    }\n    const keys = Object.keys(payload).filter(key => !Page.META_KEYS.includes(key));\n    if (keys.length === 1) {\n      return payload[keys[0]];\n    }\n    throw new Error(\"Page Records cannot be deserialized\");\n  }\n  forOwn(obj, iteratee) {\n    obj = Object(obj);\n    for (const [key, val] of Object.entries(obj)) {\n      iteratee(val, key, obj);\n    }\n  }\n  toJSON() {\n    const clone = {};\n    this.forOwn(this, (value, key) => {\n      if (!key.startsWith(\"_\") && typeof value !== \"function\") {\n        clone[key] = value;\n      }\n    });\n    return clone;\n  }\n}\nexports.default = Page;\n/**\n * Meta keys returned in a list request\n *\n * @constant META_KEYS\n */\nPage.META_KEYS = [\"end\", \"first_page_uri\", \"last_page_uri\", \"next_page_uri\", \"num_pages\", \"page\", \"page_size\", \"previous_page_uri\", \"start\", \"total\", \"uri\"];","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","RestException_1","require","Page","constructor","version","response","solution","payload","processResponse","_version","_payload","_solution","nextPageUrl","getNextPageUrl","previousPageUrl","getPreviousPageUrl","instances","loadInstances","loadPage","meta","previous_page_url","previous_page_uri","_domain","absoluteUrl","undefined","next_page_url","next_page_uri","getInstance","Error","resources","forEach","resource","push","nextPage","reqPromise","twilio","request","method","uri","nextPagePromise","then","bind","previousPage","prevPagePromise","statusCode","default","body","JSON","parse","key","keys","filter","META_KEYS","includes","length","forOwn","obj","iteratee","val","entries","toJSON","clone","startsWith"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/base/Page.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst RestException_1 = __importDefault(require(\"./RestException\"));\nclass Page {\n    /**\n     *\n     * Base page object to maintain request state.\n     *\n     * @param version - A twilio version instance\n     * @param response - The http response\n     * @param solution - path solution\n     */\n    constructor(version, response, solution) {\n        let payload = this.processResponse(response);\n        this._version = version;\n        this._payload = payload;\n        this._solution = solution;\n        this.nextPageUrl = this.getNextPageUrl();\n        this.previousPageUrl = this.getPreviousPageUrl();\n        this.instances = this.loadInstances(this.loadPage(payload));\n    }\n    /**\n     * Get the url of the previous page of records\n     *\n     * @returns url of the previous page, or undefined if the\n     * previous page URI/URL is not defined.\n     */\n    getPreviousPageUrl() {\n        if (this._payload.meta &&\n            \"previous_page_url\" in this._payload.meta &&\n            this._payload.meta.previous_page_url) {\n            // jshint ignore:line\n            return this._payload.meta.previous_page_url; // jshint ignore:line\n        }\n        if (\"previous_page_uri\" in this._payload &&\n            this._payload.previous_page_uri) {\n            // jshint ignore:line\n            return this._version._domain.absoluteUrl(this._payload.previous_page_uri); // jshint ignore:line\n        }\n        return undefined;\n    }\n    /**\n     * Get the url of the next page of records\n     *\n     * @returns url of the next page, or undefined if the\n     * next page URI/URL is not defined.\n     */\n    getNextPageUrl() {\n        if (this._payload.meta &&\n            \"next_page_url\" in this._payload.meta &&\n            this._payload.meta.next_page_url) {\n            // jshint ignore:line\n            return this._payload.meta.next_page_url; // jshint ignore:line\n        }\n        if (\"next_page_uri\" in this._payload && this._payload.next_page_uri) {\n            // jshint ignore:line\n            return this._version._domain.absoluteUrl(this._payload.next_page_uri); // jshint ignore:line\n        }\n        return undefined;\n    }\n    /**\n     * Build a new instance given a json payload\n     *\n     * @param payload - Payload response from the API\n     * @returns instance of a resource\n     */\n    getInstance(payload) {\n        throw new Error(\"Page.get_instance() must be implemented in the derived class\");\n    }\n    /**\n     * Load a list of records\n     *\n     * @param resources - json payload of records\n     * @returns list of resources\n     */\n    loadInstances(resources) {\n        let instances = [];\n        resources.forEach((resource) => {\n            instances.push(this.getInstance(resource));\n        });\n        return instances;\n    }\n    /**\n     * Fetch the next page of records\n     *\n     * @returns promise that resolves to next page of results,\n     * or undefined if there isn't a nextPageUrl undefined.\n     */\n    nextPage() {\n        if (!this.nextPageUrl) {\n            return undefined;\n        }\n        var reqPromise = this._version._domain.twilio.request({\n            method: \"get\",\n            uri: this.nextPageUrl,\n        });\n        var nextPagePromise = reqPromise.then(function (response) {\n            return new this.constructor(this._version, response, this._solution);\n        }.bind(this));\n        return nextPagePromise;\n    }\n    /**\n     * Fetch the previous page of records\n     *\n     * @returns promise that resolves to previous page of\n     * results, or undefined if there isn't a previousPageUrl undefined.\n     */\n    previousPage() {\n        if (!this.previousPageUrl) {\n            return undefined;\n        }\n        var reqPromise = this._version._domain.twilio.request({\n            method: \"get\",\n            uri: this.previousPageUrl,\n        });\n        var prevPagePromise = reqPromise.then(function (response) {\n            return new this.constructor(this._version, response, this._solution);\n        }.bind(this));\n        return prevPagePromise;\n    }\n    /**\n     * Parse json response from API\n     *\n     * @param response - API response\n     *\n     * @throws Error If non 200 status code is returned\n     *\n     * @returns json parsed response\n     */\n    processResponse(response) {\n        if (response.statusCode !== 200) {\n            throw new RestException_1.default(response);\n        }\n        if (typeof response.body === \"string\") {\n            return JSON.parse(response.body);\n        }\n        return response.body;\n    }\n    /**\n     * Load a page of records\n     *\n     * @param  {object} payload json payload\n     * @return {array} the page of records\n     */\n    loadPage(payload) {\n        if (payload.meta?.key) {\n            return payload[payload.meta.key];\n        }\n        const keys = Object.keys(payload).filter((key) => !Page.META_KEYS.includes(key));\n        if (keys.length === 1) {\n            return payload[keys[0]];\n        }\n        throw new Error(\"Page Records cannot be deserialized\");\n    }\n    forOwn(obj, iteratee) {\n        obj = Object(obj);\n        for (const [key, val] of Object.entries(obj)) {\n            iteratee(val, key, obj);\n        }\n    }\n    toJSON() {\n        const clone = {};\n        this.forOwn(this, (value, key) => {\n            if (!key.startsWith(\"_\") && typeof value !== \"function\") {\n                clone[key] = value;\n            }\n        });\n        return clone;\n    }\n}\nexports.default = Page;\n/**\n * Meta keys returned in a list request\n *\n * @constant META_KEYS\n */\nPage.META_KEYS = [\n    \"end\",\n    \"first_page_uri\",\n    \"last_page_uri\",\n    \"next_page_uri\",\n    \"num_pages\",\n    \"page\",\n    \"page_size\",\n    \"previous_page_uri\",\n    \"start\",\n    \"total\",\n    \"uri\",\n];\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}