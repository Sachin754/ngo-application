{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../../../base/values'); /* jshint ignore:line */\n\nvar VoipList;\nvar VoipPage;\nvar VoipInstance;\n\n/* jshint ignore:start */\n/**\n * Initialize the VoipList\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The account_sid\n * @param {string} countryCode - The ISO-3166-1 country code of the country.\n */\n/* jshint ignore:end */\nVoipList = function VoipList(version, accountSid, countryCode) {\n  /* jshint ignore:start */\n  /**\n   * @function voip\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipContext}\n   */\n  /* jshint ignore:end */\n  function VoipListInstance(sid) {\n    return VoipListInstance.get(sid);\n  }\n  VoipListInstance._version = version;\n  // Path Solution\n  VoipListInstance._solution = {\n    accountSid: accountSid,\n    countryCode: countryCode\n  };\n  VoipListInstance._uri = `/Accounts/${accountSid}/AvailablePhoneNumbers/${countryCode}/Voip.json`;\n  /* jshint ignore:start */\n  /**\n   * Streams VoipInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.areaCode] - The area code of the phone numbers to read\n   * @param {string} [opts.contains] - The pattern on which to match phone numbers\n   * @param {boolean} [opts.smsEnabled] -\n   *          Whether the phone numbers can receive text messages\n   * @param {boolean} [opts.mmsEnabled] -\n   *          Whether the phone numbers can receive MMS messages\n   * @param {boolean} [opts.voiceEnabled] -\n   *          Whether the phone numbers can receive calls.\n   * @param {boolean} [opts.excludeAllAddressRequired] -\n   *          Whether to exclude phone numbers that require an Address\n   * @param {boolean} [opts.excludeLocalAddressRequired] -\n   *          Whether to exclude phone numbers that require a local address\n   * @param {boolean} [opts.excludeForeignAddressRequired] -\n   *          Whether to exclude phone numbers that require a foreign address\n   * @param {boolean} [opts.beta] -\n   *          Whether to read phone numbers new to the Twilio platform\n   * @param {string} [opts.nearNumber] -\n   *          Given a phone number, find a geographically close number within distance miles. (US/Canada only)\n   * @param {string} [opts.nearLatLong] -\n   *          Given a latitude/longitude pair lat,long find geographically close numbers within distance miles. (US/Canada only)\n   * @param {number} [opts.distance] -\n   *          The search radius, in miles, for a near_ query. (US/Canada only)\n   * @param {string} [opts.inPostalCode] -\n   *          Limit results to a particular postal code. (US/Canada only)\n   * @param {string} [opts.inRegion] -\n   *          Limit results to a particular region. (US/Canada only)\n   * @param {string} [opts.inRateCenter] -\n   *          Limit results to a specific rate center, or given a phone number search within the same rate center as that number. (US/Canada only)\n   * @param {string} [opts.inLata] -\n   *          Limit results to a specific local access and transport area. (US/Canada only)\n   * @param {string} [opts.inLocality] - Limit results to a particular locality\n   * @param {boolean} [opts.faxEnabled] - Whether the phone numbers can receive faxes\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  VoipListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists VoipInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.areaCode] - The area code of the phone numbers to read\n   * @param {string} [opts.contains] - The pattern on which to match phone numbers\n   * @param {boolean} [opts.smsEnabled] -\n   *          Whether the phone numbers can receive text messages\n   * @param {boolean} [opts.mmsEnabled] -\n   *          Whether the phone numbers can receive MMS messages\n   * @param {boolean} [opts.voiceEnabled] -\n   *          Whether the phone numbers can receive calls.\n   * @param {boolean} [opts.excludeAllAddressRequired] -\n   *          Whether to exclude phone numbers that require an Address\n   * @param {boolean} [opts.excludeLocalAddressRequired] -\n   *          Whether to exclude phone numbers that require a local address\n   * @param {boolean} [opts.excludeForeignAddressRequired] -\n   *          Whether to exclude phone numbers that require a foreign address\n   * @param {boolean} [opts.beta] -\n   *          Whether to read phone numbers new to the Twilio platform\n   * @param {string} [opts.nearNumber] -\n   *          Given a phone number, find a geographically close number within distance miles. (US/Canada only)\n   * @param {string} [opts.nearLatLong] -\n   *          Given a latitude/longitude pair lat,long find geographically close numbers within distance miles. (US/Canada only)\n   * @param {number} [opts.distance] -\n   *          The search radius, in miles, for a near_ query. (US/Canada only)\n   * @param {string} [opts.inPostalCode] -\n   *          Limit results to a particular postal code. (US/Canada only)\n   * @param {string} [opts.inRegion] -\n   *          Limit results to a particular region. (US/Canada only)\n   * @param {string} [opts.inRateCenter] -\n   *          Limit results to a specific rate center, or given a phone number search within the same rate center as that number. (US/Canada only)\n   * @param {string} [opts.inLata] -\n   *          Limit results to a specific local access and transport area. (US/Canada only)\n   * @param {string} [opts.inLocality] - Limit results to a particular locality\n   * @param {boolean} [opts.faxEnabled] - Whether the phone numbers can receive faxes\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  VoipListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of VoipInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.areaCode] - The area code of the phone numbers to read\n   * @param {string} [opts.contains] - The pattern on which to match phone numbers\n   * @param {boolean} [opts.smsEnabled] -\n   *          Whether the phone numbers can receive text messages\n   * @param {boolean} [opts.mmsEnabled] -\n   *          Whether the phone numbers can receive MMS messages\n   * @param {boolean} [opts.voiceEnabled] -\n   *          Whether the phone numbers can receive calls.\n   * @param {boolean} [opts.excludeAllAddressRequired] -\n   *          Whether to exclude phone numbers that require an Address\n   * @param {boolean} [opts.excludeLocalAddressRequired] -\n   *          Whether to exclude phone numbers that require a local address\n   * @param {boolean} [opts.excludeForeignAddressRequired] -\n   *          Whether to exclude phone numbers that require a foreign address\n   * @param {boolean} [opts.beta] -\n   *          Whether to read phone numbers new to the Twilio platform\n   * @param {string} [opts.nearNumber] -\n   *          Given a phone number, find a geographically close number within distance miles. (US/Canada only)\n   * @param {string} [opts.nearLatLong] -\n   *          Given a latitude/longitude pair lat,long find geographically close numbers within distance miles. (US/Canada only)\n   * @param {number} [opts.distance] -\n   *          The search radius, in miles, for a near_ query. (US/Canada only)\n   * @param {string} [opts.inPostalCode] -\n   *          Limit results to a particular postal code. (US/Canada only)\n   * @param {string} [opts.inRegion] -\n   *          Limit results to a particular region. (US/Canada only)\n   * @param {string} [opts.inRateCenter] -\n   *          Limit results to a specific rate center, or given a phone number search within the same rate center as that number. (US/Canada only)\n   * @param {string} [opts.inLata] -\n   *          Limit results to a specific local access and transport area. (US/Canada only)\n   * @param {string} [opts.inLocality] - Limit results to a particular locality\n   * @param {boolean} [opts.faxEnabled] - Whether the phone numbers can receive faxes\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  VoipListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'AreaCode': _.get(opts, 'areaCode'),\n      'Contains': _.get(opts, 'contains'),\n      'SmsEnabled': serialize.bool(_.get(opts, 'smsEnabled')),\n      'MmsEnabled': serialize.bool(_.get(opts, 'mmsEnabled')),\n      'VoiceEnabled': serialize.bool(_.get(opts, 'voiceEnabled')),\n      'ExcludeAllAddressRequired': serialize.bool(_.get(opts, 'excludeAllAddressRequired')),\n      'ExcludeLocalAddressRequired': serialize.bool(_.get(opts, 'excludeLocalAddressRequired')),\n      'ExcludeForeignAddressRequired': serialize.bool(_.get(opts, 'excludeForeignAddressRequired')),\n      'Beta': serialize.bool(_.get(opts, 'beta')),\n      'NearNumber': _.get(opts, 'nearNumber'),\n      'NearLatLong': _.get(opts, 'nearLatLong'),\n      'Distance': _.get(opts, 'distance'),\n      'InPostalCode': _.get(opts, 'inPostalCode'),\n      'InRegion': _.get(opts, 'inRegion'),\n      'InRateCenter': _.get(opts, 'inRateCenter'),\n      'InLata': _.get(opts, 'inLata'),\n      'InLocality': _.get(opts, 'inLocality'),\n      'FaxEnabled': serialize.bool(_.get(opts, 'faxEnabled')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new VoipPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of VoipInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  VoipListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new VoipPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  VoipListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  VoipListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return VoipListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the VoipPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {VoipSolution} solution - Path solution\n *\n * @returns VoipPage\n */\n/* jshint ignore:end */\nVoipPage = function VoipPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(VoipPage.prototype, Page.prototype);\nVoipPage.prototype.constructor = VoipPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of VoipInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipPage#\n *\n * @param {VoipPayload} payload - Payload response from the API\n *\n * @returns VoipInstance\n */\n/* jshint ignore:end */\nVoipPage.prototype.getInstance = function getInstance(payload) {\n  return new VoipInstance(this._version, payload, this._solution.accountSid, this._solution.countryCode);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nVoipPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nVoipPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the VoipContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipInstance\n *\n * @property {string} friendlyName - A formatted version of the phone number\n * @property {string} phoneNumber - The phone number in E.164 format\n * @property {string} lata - The LATA of this phone number\n * @property {string} locality -\n *          The locality or city of this phone number's location\n * @property {string} rateCenter - The rate center of this phone number\n * @property {number} latitude - The latitude of this phone number's location\n * @property {number} longitude - The longitude of this phone number's location\n * @property {string} region -\n *          The two-letter state or province abbreviation of this phone number's location\n * @property {string} postalCode -\n *          The postal or ZIP code of this phone number's location\n * @property {string} isoCountry - The ISO country code of this phone number\n * @property {string} addressRequirements -\n *          The type of Address resource the phone number requires\n * @property {boolean} beta -\n *          Whether the phone number is new to the Twilio platform\n * @property {PhoneNumberCapabilities} capabilities -\n *          Whether a phone number can receive calls or messages\n *\n * @param {V2010} version - Version of the resource\n * @param {VoipPayload} payload - The instance payload\n * @param {account_sid} accountSid - The account_sid\n * @param {iso_country_code} countryCode -\n *          The ISO-3166-1 country code of the country.\n */\n/* jshint ignore:end */\nVoipInstance = function VoipInstance(version, payload, accountSid, countryCode) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.phoneNumber = payload.phone_number; // jshint ignore:line\n  this.lata = payload.lata; // jshint ignore:line\n  this.locality = payload.locality; // jshint ignore:line\n  this.rateCenter = payload.rate_center; // jshint ignore:line\n  this.latitude = deserialize.decimal(payload.latitude); // jshint ignore:line\n  this.longitude = deserialize.decimal(payload.longitude); // jshint ignore:line\n  this.region = payload.region; // jshint ignore:line\n  this.postalCode = payload.postal_code; // jshint ignore:line\n  this.isoCountry = payload.iso_country; // jshint ignore:line\n  this.addressRequirements = payload.address_requirements; // jshint ignore:line\n  this.beta = payload.beta; // jshint ignore:line\n  this.capabilities = payload.capabilities; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    countryCode: countryCode\n  };\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nVoipInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nVoipInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  VoipList: VoipList,\n  VoipPage: VoipPage,\n  VoipInstance: VoipInstance\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","serialize","values","VoipList","VoipPage","VoipInstance","version","accountSid","countryCode","VoipListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","bool","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","friendlyName","friendly_name","phoneNumber","phone_number","lata","locality","rateCenter","rate_center","latitude","decimal","longitude","region","postalCode","postal_code","isoCountry","iso_country","addressRequirements","address_requirements","beta","capabilities","_context","undefined","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/api/v2010/account/availablePhoneNumber/voip.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar VoipList;\nvar VoipPage;\nvar VoipInstance;\n\n/* jshint ignore:start */\n/**\n * Initialize the VoipList\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The account_sid\n * @param {string} countryCode - The ISO-3166-1 country code of the country.\n */\n/* jshint ignore:end */\nVoipList = function VoipList(version, accountSid, countryCode) {\n  /* jshint ignore:start */\n  /**\n   * @function voip\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipContext}\n   */\n  /* jshint ignore:end */\n  function VoipListInstance(sid) {\n    return VoipListInstance.get(sid);\n  }\n\n  VoipListInstance._version = version;\n  // Path Solution\n  VoipListInstance._solution = {accountSid: accountSid, countryCode: countryCode};\n  VoipListInstance._uri = `/Accounts/${accountSid}/AvailablePhoneNumbers/${countryCode}/Voip.json`;\n  /* jshint ignore:start */\n  /**\n   * Streams VoipInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.areaCode] - The area code of the phone numbers to read\n   * @param {string} [opts.contains] - The pattern on which to match phone numbers\n   * @param {boolean} [opts.smsEnabled] -\n   *          Whether the phone numbers can receive text messages\n   * @param {boolean} [opts.mmsEnabled] -\n   *          Whether the phone numbers can receive MMS messages\n   * @param {boolean} [opts.voiceEnabled] -\n   *          Whether the phone numbers can receive calls.\n   * @param {boolean} [opts.excludeAllAddressRequired] -\n   *          Whether to exclude phone numbers that require an Address\n   * @param {boolean} [opts.excludeLocalAddressRequired] -\n   *          Whether to exclude phone numbers that require a local address\n   * @param {boolean} [opts.excludeForeignAddressRequired] -\n   *          Whether to exclude phone numbers that require a foreign address\n   * @param {boolean} [opts.beta] -\n   *          Whether to read phone numbers new to the Twilio platform\n   * @param {string} [opts.nearNumber] -\n   *          Given a phone number, find a geographically close number within distance miles. (US/Canada only)\n   * @param {string} [opts.nearLatLong] -\n   *          Given a latitude/longitude pair lat,long find geographically close numbers within distance miles. (US/Canada only)\n   * @param {number} [opts.distance] -\n   *          The search radius, in miles, for a near_ query. (US/Canada only)\n   * @param {string} [opts.inPostalCode] -\n   *          Limit results to a particular postal code. (US/Canada only)\n   * @param {string} [opts.inRegion] -\n   *          Limit results to a particular region. (US/Canada only)\n   * @param {string} [opts.inRateCenter] -\n   *          Limit results to a specific rate center, or given a phone number search within the same rate center as that number. (US/Canada only)\n   * @param {string} [opts.inLata] -\n   *          Limit results to a specific local access and transport area. (US/Canada only)\n   * @param {string} [opts.inLocality] - Limit results to a particular locality\n   * @param {boolean} [opts.faxEnabled] - Whether the phone numbers can receive faxes\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  VoipListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists VoipInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.areaCode] - The area code of the phone numbers to read\n   * @param {string} [opts.contains] - The pattern on which to match phone numbers\n   * @param {boolean} [opts.smsEnabled] -\n   *          Whether the phone numbers can receive text messages\n   * @param {boolean} [opts.mmsEnabled] -\n   *          Whether the phone numbers can receive MMS messages\n   * @param {boolean} [opts.voiceEnabled] -\n   *          Whether the phone numbers can receive calls.\n   * @param {boolean} [opts.excludeAllAddressRequired] -\n   *          Whether to exclude phone numbers that require an Address\n   * @param {boolean} [opts.excludeLocalAddressRequired] -\n   *          Whether to exclude phone numbers that require a local address\n   * @param {boolean} [opts.excludeForeignAddressRequired] -\n   *          Whether to exclude phone numbers that require a foreign address\n   * @param {boolean} [opts.beta] -\n   *          Whether to read phone numbers new to the Twilio platform\n   * @param {string} [opts.nearNumber] -\n   *          Given a phone number, find a geographically close number within distance miles. (US/Canada only)\n   * @param {string} [opts.nearLatLong] -\n   *          Given a latitude/longitude pair lat,long find geographically close numbers within distance miles. (US/Canada only)\n   * @param {number} [opts.distance] -\n   *          The search radius, in miles, for a near_ query. (US/Canada only)\n   * @param {string} [opts.inPostalCode] -\n   *          Limit results to a particular postal code. (US/Canada only)\n   * @param {string} [opts.inRegion] -\n   *          Limit results to a particular region. (US/Canada only)\n   * @param {string} [opts.inRateCenter] -\n   *          Limit results to a specific rate center, or given a phone number search within the same rate center as that number. (US/Canada only)\n   * @param {string} [opts.inLata] -\n   *          Limit results to a specific local access and transport area. (US/Canada only)\n   * @param {string} [opts.inLocality] - Limit results to a particular locality\n   * @param {boolean} [opts.faxEnabled] - Whether the phone numbers can receive faxes\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  VoipListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of VoipInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.areaCode] - The area code of the phone numbers to read\n   * @param {string} [opts.contains] - The pattern on which to match phone numbers\n   * @param {boolean} [opts.smsEnabled] -\n   *          Whether the phone numbers can receive text messages\n   * @param {boolean} [opts.mmsEnabled] -\n   *          Whether the phone numbers can receive MMS messages\n   * @param {boolean} [opts.voiceEnabled] -\n   *          Whether the phone numbers can receive calls.\n   * @param {boolean} [opts.excludeAllAddressRequired] -\n   *          Whether to exclude phone numbers that require an Address\n   * @param {boolean} [opts.excludeLocalAddressRequired] -\n   *          Whether to exclude phone numbers that require a local address\n   * @param {boolean} [opts.excludeForeignAddressRequired] -\n   *          Whether to exclude phone numbers that require a foreign address\n   * @param {boolean} [opts.beta] -\n   *          Whether to read phone numbers new to the Twilio platform\n   * @param {string} [opts.nearNumber] -\n   *          Given a phone number, find a geographically close number within distance miles. (US/Canada only)\n   * @param {string} [opts.nearLatLong] -\n   *          Given a latitude/longitude pair lat,long find geographically close numbers within distance miles. (US/Canada only)\n   * @param {number} [opts.distance] -\n   *          The search radius, in miles, for a near_ query. (US/Canada only)\n   * @param {string} [opts.inPostalCode] -\n   *          Limit results to a particular postal code. (US/Canada only)\n   * @param {string} [opts.inRegion] -\n   *          Limit results to a particular region. (US/Canada only)\n   * @param {string} [opts.inRateCenter] -\n   *          Limit results to a specific rate center, or given a phone number search within the same rate center as that number. (US/Canada only)\n   * @param {string} [opts.inLata] -\n   *          Limit results to a specific local access and transport area. (US/Canada only)\n   * @param {string} [opts.inLocality] - Limit results to a particular locality\n   * @param {boolean} [opts.faxEnabled] - Whether the phone numbers can receive faxes\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  VoipListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'AreaCode': _.get(opts, 'areaCode'),\n      'Contains': _.get(opts, 'contains'),\n      'SmsEnabled': serialize.bool(_.get(opts, 'smsEnabled')),\n      'MmsEnabled': serialize.bool(_.get(opts, 'mmsEnabled')),\n      'VoiceEnabled': serialize.bool(_.get(opts, 'voiceEnabled')),\n      'ExcludeAllAddressRequired': serialize.bool(_.get(opts, 'excludeAllAddressRequired')),\n      'ExcludeLocalAddressRequired': serialize.bool(_.get(opts, 'excludeLocalAddressRequired')),\n      'ExcludeForeignAddressRequired': serialize.bool(_.get(opts, 'excludeForeignAddressRequired')),\n      'Beta': serialize.bool(_.get(opts, 'beta')),\n      'NearNumber': _.get(opts, 'nearNumber'),\n      'NearLatLong': _.get(opts, 'nearLatLong'),\n      'Distance': _.get(opts, 'distance'),\n      'InPostalCode': _.get(opts, 'inPostalCode'),\n      'InRegion': _.get(opts, 'inRegion'),\n      'InRateCenter': _.get(opts, 'inRateCenter'),\n      'InLata': _.get(opts, 'inLata'),\n      'InLocality': _.get(opts, 'inLocality'),\n      'FaxEnabled': serialize.bool(_.get(opts, 'faxEnabled')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new VoipPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of VoipInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  VoipListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new VoipPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  VoipListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  VoipListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return VoipListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the VoipPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {VoipSolution} solution - Path solution\n *\n * @returns VoipPage\n */\n/* jshint ignore:end */\nVoipPage = function VoipPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(VoipPage.prototype, Page.prototype);\nVoipPage.prototype.constructor = VoipPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of VoipInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipPage#\n *\n * @param {VoipPayload} payload - Payload response from the API\n *\n * @returns VoipInstance\n */\n/* jshint ignore:end */\nVoipPage.prototype.getInstance = function getInstance(payload) {\n  return new VoipInstance(\n    this._version,\n    payload,\n    this._solution.accountSid,\n    this._solution.countryCode\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nVoipPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nVoipPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the VoipContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipInstance\n *\n * @property {string} friendlyName - A formatted version of the phone number\n * @property {string} phoneNumber - The phone number in E.164 format\n * @property {string} lata - The LATA of this phone number\n * @property {string} locality -\n *          The locality or city of this phone number's location\n * @property {string} rateCenter - The rate center of this phone number\n * @property {number} latitude - The latitude of this phone number's location\n * @property {number} longitude - The longitude of this phone number's location\n * @property {string} region -\n *          The two-letter state or province abbreviation of this phone number's location\n * @property {string} postalCode -\n *          The postal or ZIP code of this phone number's location\n * @property {string} isoCountry - The ISO country code of this phone number\n * @property {string} addressRequirements -\n *          The type of Address resource the phone number requires\n * @property {boolean} beta -\n *          Whether the phone number is new to the Twilio platform\n * @property {PhoneNumberCapabilities} capabilities -\n *          Whether a phone number can receive calls or messages\n *\n * @param {V2010} version - Version of the resource\n * @param {VoipPayload} payload - The instance payload\n * @param {account_sid} accountSid - The account_sid\n * @param {iso_country_code} countryCode -\n *          The ISO-3166-1 country code of the country.\n */\n/* jshint ignore:end */\nVoipInstance = function VoipInstance(version, payload, accountSid, countryCode)\n                                      {\n  this._version = version;\n\n  // Marshaled Properties\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.phoneNumber = payload.phone_number; // jshint ignore:line\n  this.lata = payload.lata; // jshint ignore:line\n  this.locality = payload.locality; // jshint ignore:line\n  this.rateCenter = payload.rate_center; // jshint ignore:line\n  this.latitude = deserialize.decimal(payload.latitude); // jshint ignore:line\n  this.longitude = deserialize.decimal(payload.longitude); // jshint ignore:line\n  this.region = payload.region; // jshint ignore:line\n  this.postalCode = payload.postal_code; // jshint ignore:line\n  this.isoCountry = payload.iso_country; // jshint ignore:line\n  this.addressRequirements = payload.address_requirements; // jshint ignore:line\n  this.beta = payload.beta; // jshint ignore:line\n  this.capabilities = payload.capabilities; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, countryCode: countryCode, };\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nVoipInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nVoipInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  VoipList: VoipList,\n  VoipPage: VoipPage,\n  VoipInstance: VoipInstance\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}