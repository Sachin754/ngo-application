{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../../base/values'); /* jshint ignore:line */\n\nvar PhoneNumberList;\nvar PhoneNumberPage;\nvar PhoneNumberInstance;\nvar PhoneNumberContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the PhoneNumberList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.PhoneNumberList\n *\n * @param {Twilio.Proxy.V1} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the PhoneNumber resource's parent Service resource\n */\n/* jshint ignore:end */\nPhoneNumberList = function PhoneNumberList(version, serviceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function phoneNumbers\n   * @memberof Twilio.Proxy.V1.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext.PhoneNumberContext}\n   */\n  /* jshint ignore:end */\n  function PhoneNumberListInstance(sid) {\n    return PhoneNumberListInstance.get(sid);\n  }\n  PhoneNumberListInstance._version = version;\n  // Path Solution\n  PhoneNumberListInstance._solution = {\n    serviceSid: serviceSid\n  };\n  PhoneNumberListInstance._uri = `/Services/${serviceSid}/PhoneNumbers`;\n  /* jshint ignore:start */\n  /**\n   * create a PhoneNumberInstance\n   *\n   * @function create\n   * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sid] - The SID of a Twilio IncomingPhoneNumber resource\n   * @param {string} [opts.phoneNumber] - The phone number in E.164 format\n   * @param {boolean} [opts.isReserved] -\n   *          Whether the new phone number should be reserved\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed PhoneNumberInstance\n   */\n  /* jshint ignore:end */\n  PhoneNumberListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Sid': _.get(opts, 'sid'),\n      'PhoneNumber': _.get(opts, 'phoneNumber'),\n      'IsReserved': serialize.bool(_.get(opts, 'isReserved'))\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new PhoneNumberInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams PhoneNumberInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  PhoneNumberListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists PhoneNumberInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  PhoneNumberListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of PhoneNumberInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  PhoneNumberListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new PhoneNumberPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of PhoneNumberInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  PhoneNumberListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new PhoneNumberPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a phone_number\n   *\n   * @function get\n   * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext.PhoneNumberContext}\n   */\n  /* jshint ignore:end */\n  PhoneNumberListInstance.get = function get(sid) {\n    return new PhoneNumberContext(this._version, this._solution.serviceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  PhoneNumberListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  PhoneNumberListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return PhoneNumberListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the PhoneNumberPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.PhoneNumberPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {PhoneNumberSolution} solution - Path solution\n *\n * @returns PhoneNumberPage\n */\n/* jshint ignore:end */\nPhoneNumberPage = function PhoneNumberPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(PhoneNumberPage.prototype, Page.prototype);\nPhoneNumberPage.prototype.constructor = PhoneNumberPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of PhoneNumberInstance\n *\n * @function getInstance\n * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberPage#\n *\n * @param {PhoneNumberPayload} payload - Payload response from the API\n *\n * @returns PhoneNumberInstance\n */\n/* jshint ignore:end */\nPhoneNumberPage.prototype.getInstance = function getInstance(payload) {\n  return new PhoneNumberInstance(this._version, payload, this._solution.serviceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nPhoneNumberPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nPhoneNumberPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the PhoneNumberContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.PhoneNumberInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} serviceSid -\n *          The SID of the PhoneNumber resource's parent Service resource\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} phoneNumber - The phone number in E.164 format\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} isoCountry - The ISO Country Code\n * @property {PhoneNumberCapabilities} capabilities -\n *          The capabilities of the phone number\n * @property {string} url - The absolute URL of the PhoneNumber resource\n * @property {boolean} isReserved -\n *          Reserve the phone number for manual assignment to participants only\n * @property {number} inUse - The number of open session assigned to the number.\n *\n * @param {V1} version - Version of the resource\n * @param {PhoneNumberPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the PhoneNumber resource's parent Service resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nPhoneNumberInstance = function PhoneNumberInstance(version, payload, serviceSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.phoneNumber = payload.phone_number; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.isoCountry = payload.iso_country; // jshint ignore:line\n  this.capabilities = payload.capabilities; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.isReserved = payload.is_reserved; // jshint ignore:line\n  this.inUse = deserialize.integer(payload.in_use); // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(PhoneNumberInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new PhoneNumberContext(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * remove a PhoneNumberInstance\n *\n * @function remove\n * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed PhoneNumberInstance\n */\n/* jshint ignore:end */\nPhoneNumberInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a PhoneNumberInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed PhoneNumberInstance\n */\n/* jshint ignore:end */\nPhoneNumberInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a PhoneNumberInstance\n *\n * @function update\n * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {boolean} [opts.isReserved] -\n *          Whether the new phone number should be reserved\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed PhoneNumberInstance\n */\n/* jshint ignore:end */\nPhoneNumberInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nPhoneNumberInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nPhoneNumberInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the PhoneNumberContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.PhoneNumberContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} serviceSid -\n *          The SID of the parent Service resource of the PhoneNumber resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nPhoneNumberContext = function PhoneNumberContext(version, serviceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid\n  };\n  this._uri = `/Services/${serviceSid}/PhoneNumbers/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * remove a PhoneNumberInstance\n *\n * @function remove\n * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed PhoneNumberInstance\n */\n/* jshint ignore:end */\nPhoneNumberContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a PhoneNumberInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed PhoneNumberInstance\n */\n/* jshint ignore:end */\nPhoneNumberContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new PhoneNumberInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a PhoneNumberInstance\n *\n * @function update\n * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberContext#\n *\n * @param {object} [opts] - Options for request\n * @param {boolean} [opts.isReserved] -\n *          Whether the new phone number should be reserved\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed PhoneNumberInstance\n */\n/* jshint ignore:end */\nPhoneNumberContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'IsReserved': serialize.bool(_.get(opts, 'isReserved'))\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new PhoneNumberInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nPhoneNumberContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nPhoneNumberContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  PhoneNumberList: PhoneNumberList,\n  PhoneNumberPage: PhoneNumberPage,\n  PhoneNumberInstance: PhoneNumberInstance,\n  PhoneNumberContext: PhoneNumberContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","serialize","values","PhoneNumberList","PhoneNumberPage","PhoneNumberInstance","PhoneNumberContext","version","serviceSid","PhoneNumberListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isFunction","deferred","defer","data","of","bool","promise","uri","method","then","payload","resolve","bind","catch","error","reject","nodeify","each","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","service_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","phoneNumber","phone_number","friendlyName","friendly_name","isoCountry","iso_country","capabilities","url","isReserved","is_reserved","inUse","integer","in_use","_context","undefined","Object","defineProperty","remove","_proxy","fetch","update","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/proxy/v1/service/phoneNumber.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar PhoneNumberList;\nvar PhoneNumberPage;\nvar PhoneNumberInstance;\nvar PhoneNumberContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the PhoneNumberList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.PhoneNumberList\n *\n * @param {Twilio.Proxy.V1} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the PhoneNumber resource's parent Service resource\n */\n/* jshint ignore:end */\nPhoneNumberList = function PhoneNumberList(version, serviceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function phoneNumbers\n   * @memberof Twilio.Proxy.V1.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext.PhoneNumberContext}\n   */\n  /* jshint ignore:end */\n  function PhoneNumberListInstance(sid) {\n    return PhoneNumberListInstance.get(sid);\n  }\n\n  PhoneNumberListInstance._version = version;\n  // Path Solution\n  PhoneNumberListInstance._solution = {serviceSid: serviceSid};\n  PhoneNumberListInstance._uri = `/Services/${serviceSid}/PhoneNumbers`;\n  /* jshint ignore:start */\n  /**\n   * create a PhoneNumberInstance\n   *\n   * @function create\n   * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sid] - The SID of a Twilio IncomingPhoneNumber resource\n   * @param {string} [opts.phoneNumber] - The phone number in E.164 format\n   * @param {boolean} [opts.isReserved] -\n   *          Whether the new phone number should be reserved\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed PhoneNumberInstance\n   */\n  /* jshint ignore:end */\n  PhoneNumberListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Sid': _.get(opts, 'sid'),\n      'PhoneNumber': _.get(opts, 'phoneNumber'),\n      'IsReserved': serialize.bool(_.get(opts, 'isReserved'))\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new PhoneNumberInstance(\n        this._version,\n        payload,\n        this._solution.serviceSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams PhoneNumberInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  PhoneNumberListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists PhoneNumberInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  PhoneNumberListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of PhoneNumberInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  PhoneNumberListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new PhoneNumberPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of PhoneNumberInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  PhoneNumberListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new PhoneNumberPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a phone_number\n   *\n   * @function get\n   * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext.PhoneNumberContext}\n   */\n  /* jshint ignore:end */\n  PhoneNumberListInstance.get = function get(sid) {\n    return new PhoneNumberContext(this._version, this._solution.serviceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  PhoneNumberListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  PhoneNumberListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return PhoneNumberListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the PhoneNumberPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.PhoneNumberPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {PhoneNumberSolution} solution - Path solution\n *\n * @returns PhoneNumberPage\n */\n/* jshint ignore:end */\nPhoneNumberPage = function PhoneNumberPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(PhoneNumberPage.prototype, Page.prototype);\nPhoneNumberPage.prototype.constructor = PhoneNumberPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of PhoneNumberInstance\n *\n * @function getInstance\n * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberPage#\n *\n * @param {PhoneNumberPayload} payload - Payload response from the API\n *\n * @returns PhoneNumberInstance\n */\n/* jshint ignore:end */\nPhoneNumberPage.prototype.getInstance = function getInstance(payload) {\n  return new PhoneNumberInstance(this._version, payload, this._solution.serviceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nPhoneNumberPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nPhoneNumberPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the PhoneNumberContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.PhoneNumberInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} serviceSid -\n *          The SID of the PhoneNumber resource's parent Service resource\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} phoneNumber - The phone number in E.164 format\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} isoCountry - The ISO Country Code\n * @property {PhoneNumberCapabilities} capabilities -\n *          The capabilities of the phone number\n * @property {string} url - The absolute URL of the PhoneNumber resource\n * @property {boolean} isReserved -\n *          Reserve the phone number for manual assignment to participants only\n * @property {number} inUse - The number of open session assigned to the number.\n *\n * @param {V1} version - Version of the resource\n * @param {PhoneNumberPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the PhoneNumber resource's parent Service resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nPhoneNumberInstance = function PhoneNumberInstance(version, payload, serviceSid,\n                                                    sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.phoneNumber = payload.phone_number; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.isoCountry = payload.iso_country; // jshint ignore:line\n  this.capabilities = payload.capabilities; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.isReserved = payload.is_reserved; // jshint ignore:line\n  this.inUse = deserialize.integer(payload.in_use); // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(PhoneNumberInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new PhoneNumberContext(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * remove a PhoneNumberInstance\n *\n * @function remove\n * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed PhoneNumberInstance\n */\n/* jshint ignore:end */\nPhoneNumberInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a PhoneNumberInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed PhoneNumberInstance\n */\n/* jshint ignore:end */\nPhoneNumberInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a PhoneNumberInstance\n *\n * @function update\n * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {boolean} [opts.isReserved] -\n *          Whether the new phone number should be reserved\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed PhoneNumberInstance\n */\n/* jshint ignore:end */\nPhoneNumberInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nPhoneNumberInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nPhoneNumberInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the PhoneNumberContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.PhoneNumberContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} serviceSid -\n *          The SID of the parent Service resource of the PhoneNumber resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nPhoneNumberContext = function PhoneNumberContext(version, serviceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, sid: sid, };\n  this._uri = `/Services/${serviceSid}/PhoneNumbers/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * remove a PhoneNumberInstance\n *\n * @function remove\n * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed PhoneNumberInstance\n */\n/* jshint ignore:end */\nPhoneNumberContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a PhoneNumberInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed PhoneNumberInstance\n */\n/* jshint ignore:end */\nPhoneNumberContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new PhoneNumberInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a PhoneNumberInstance\n *\n * @function update\n * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberContext#\n *\n * @param {object} [opts] - Options for request\n * @param {boolean} [opts.isReserved] -\n *          Whether the new phone number should be reserved\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed PhoneNumberInstance\n */\n/* jshint ignore:end */\nPhoneNumberContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({'IsReserved': serialize.bool(_.get(opts, 'isReserved'))});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new PhoneNumberInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.PhoneNumberContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nPhoneNumberContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nPhoneNumberContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  PhoneNumberList: PhoneNumberList,\n  PhoneNumberPage: PhoneNumberPage,\n  PhoneNumberInstance: PhoneNumberInstance,\n  PhoneNumberContext: PhoneNumberContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}