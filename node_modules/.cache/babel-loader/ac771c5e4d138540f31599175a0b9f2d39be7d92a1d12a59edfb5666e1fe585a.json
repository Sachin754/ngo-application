{"ast":null,"code":"\"use strict\";\n\n/*\n * This code was generated by\n * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __\n *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\\ | |___ |__/ |__|  | |  | |__/\n *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \\| |___ |  \\ |  |  | |__| |  \\\n *\n * Twilio - Messaging\n * This is the public Twilio REST API.\n *\n * NOTE: This class is auto generated by OpenAPI Generator.\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DomainCertsListInstance = exports.DomainCertsInstance = exports.DomainCertsContextImpl = void 0;\nconst util_1 = require(\"util\");\nconst deserialize = require(\"../../../base/deserialize\");\nconst serialize = require(\"../../../base/serialize\");\nconst utility_1 = require(\"../../../base/utility\");\nclass DomainCertsContextImpl {\n  constructor(_version, domainSid) {\n    this._version = _version;\n    if (!(0, utility_1.isValidPathParam)(domainSid)) {\n      throw new Error(\"Parameter 'domainSid' is not valid.\");\n    }\n    this._solution = {\n      domainSid\n    };\n    this._uri = `/LinkShortening/Domains/${domainSid}/Certificate`;\n  }\n  remove(callback) {\n    const instance = this;\n    let operationVersion = instance._version,\n      operationPromise = operationVersion.remove({\n        uri: instance._uri,\n        method: \"delete\"\n      });\n    operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n    return operationPromise;\n  }\n  fetch(callback) {\n    const instance = this;\n    let operationVersion = instance._version,\n      operationPromise = operationVersion.fetch({\n        uri: instance._uri,\n        method: \"get\"\n      });\n    operationPromise = operationPromise.then(payload => new DomainCertsInstance(operationVersion, payload, instance._solution.domainSid));\n    operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n    return operationPromise;\n  }\n  update(params, callback) {\n    if (params === null || params === undefined) {\n      throw new Error('Required parameter \"params\" missing.');\n    }\n    if (params[\"tlsCert\"] === null || params[\"tlsCert\"] === undefined) {\n      throw new Error(\"Required parameter \\\"params['tlsCert']\\\" missing.\");\n    }\n    let data = {};\n    data[\"TlsCert\"] = params[\"tlsCert\"];\n    const headers = {};\n    headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n    const instance = this;\n    let operationVersion = instance._version,\n      operationPromise = operationVersion.update({\n        uri: instance._uri,\n        method: \"post\",\n        data,\n        headers\n      });\n    operationPromise = operationPromise.then(payload => new DomainCertsInstance(operationVersion, payload, instance._solution.domainSid));\n    operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n    return operationPromise;\n  }\n  /**\n   * Provide a user-friendly representation\n   *\n   * @returns Object\n   */\n  toJSON() {\n    return this._solution;\n  }\n  [util_1.inspect.custom](_depth, options) {\n    return (0, util_1.inspect)(this.toJSON(), options);\n  }\n}\nexports.DomainCertsContextImpl = DomainCertsContextImpl;\nclass DomainCertsInstance {\n  constructor(_version, payload, domainSid) {\n    this._version = _version;\n    this.domainSid = payload.domain_sid;\n    this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);\n    this.dateExpires = deserialize.iso8601DateTime(payload.date_expires);\n    this.dateCreated = deserialize.iso8601DateTime(payload.date_created);\n    this.domainName = payload.domain_name;\n    this.certificateSid = payload.certificate_sid;\n    this.url = payload.url;\n    this.certInValidation = payload.cert_in_validation;\n    this._solution = {\n      domainSid: domainSid || this.domainSid\n    };\n  }\n  get _proxy() {\n    this._context = this._context || new DomainCertsContextImpl(this._version, this._solution.domainSid);\n    return this._context;\n  }\n  /**\n   * Remove a DomainCertsInstance\n   *\n   * @param callback - Callback to handle processed record\n   *\n   * @returns Resolves to processed boolean\n   */\n  remove(callback) {\n    return this._proxy.remove(callback);\n  }\n  /**\n   * Fetch a DomainCertsInstance\n   *\n   * @param callback - Callback to handle processed record\n   *\n   * @returns Resolves to processed DomainCertsInstance\n   */\n  fetch(callback) {\n    return this._proxy.fetch(callback);\n  }\n  update(params, callback) {\n    return this._proxy.update(params, callback);\n  }\n  /**\n   * Provide a user-friendly representation\n   *\n   * @returns Object\n   */\n  toJSON() {\n    return {\n      domainSid: this.domainSid,\n      dateUpdated: this.dateUpdated,\n      dateExpires: this.dateExpires,\n      dateCreated: this.dateCreated,\n      domainName: this.domainName,\n      certificateSid: this.certificateSid,\n      url: this.url,\n      certInValidation: this.certInValidation\n    };\n  }\n  [util_1.inspect.custom](_depth, options) {\n    return (0, util_1.inspect)(this.toJSON(), options);\n  }\n}\nexports.DomainCertsInstance = DomainCertsInstance;\nfunction DomainCertsListInstance(version) {\n  const instance = domainSid => instance.get(domainSid);\n  instance.get = function get(domainSid) {\n    return new DomainCertsContextImpl(version, domainSid);\n  };\n  instance._version = version;\n  instance._solution = {};\n  instance._uri = ``;\n  instance.toJSON = function toJSON() {\n    return instance._solution;\n  };\n  instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {\n    return (0, util_1.inspect)(instance.toJSON(), options);\n  };\n  return instance;\n}\nexports.DomainCertsListInstance = DomainCertsListInstance;","map":{"version":3,"names":["Object","defineProperty","exports","value","DomainCertsListInstance","DomainCertsInstance","DomainCertsContextImpl","util_1","require","deserialize","serialize","utility_1","constructor","_version","domainSid","isValidPathParam","Error","_solution","_uri","remove","callback","instance","operationVersion","operationPromise","uri","method","setPromiseCallback","fetch","then","payload","update","params","undefined","data","headers","toJSON","inspect","custom","_depth","options","domain_sid","dateUpdated","iso8601DateTime","date_updated","dateExpires","date_expires","dateCreated","date_created","domainName","domain_name","certificateSid","certificate_sid","url","certInValidation","cert_in_validation","_proxy","_context","version","get","inspectImpl"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/messaging/v1/domainCerts.js"],"sourcesContent":["\"use strict\";\n/*\n * This code was generated by\n * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __\n *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\\ | |___ |__/ |__|  | |  | |__/\n *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \\| |___ |  \\ |  |  | |__| |  \\\n *\n * Twilio - Messaging\n * This is the public Twilio REST API.\n *\n * NOTE: This class is auto generated by OpenAPI Generator.\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DomainCertsListInstance = exports.DomainCertsInstance = exports.DomainCertsContextImpl = void 0;\nconst util_1 = require(\"util\");\nconst deserialize = require(\"../../../base/deserialize\");\nconst serialize = require(\"../../../base/serialize\");\nconst utility_1 = require(\"../../../base/utility\");\nclass DomainCertsContextImpl {\n    constructor(_version, domainSid) {\n        this._version = _version;\n        if (!(0, utility_1.isValidPathParam)(domainSid)) {\n            throw new Error(\"Parameter 'domainSid' is not valid.\");\n        }\n        this._solution = { domainSid };\n        this._uri = `/LinkShortening/Domains/${domainSid}/Certificate`;\n    }\n    remove(callback) {\n        const instance = this;\n        let operationVersion = instance._version, operationPromise = operationVersion.remove({\n            uri: instance._uri,\n            method: \"delete\",\n        });\n        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n        return operationPromise;\n    }\n    fetch(callback) {\n        const instance = this;\n        let operationVersion = instance._version, operationPromise = operationVersion.fetch({\n            uri: instance._uri,\n            method: \"get\",\n        });\n        operationPromise = operationPromise.then((payload) => new DomainCertsInstance(operationVersion, payload, instance._solution.domainSid));\n        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n        return operationPromise;\n    }\n    update(params, callback) {\n        if (params === null || params === undefined) {\n            throw new Error('Required parameter \"params\" missing.');\n        }\n        if (params[\"tlsCert\"] === null || params[\"tlsCert\"] === undefined) {\n            throw new Error(\"Required parameter \\\"params['tlsCert']\\\" missing.\");\n        }\n        let data = {};\n        data[\"TlsCert\"] = params[\"tlsCert\"];\n        const headers = {};\n        headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n        const instance = this;\n        let operationVersion = instance._version, operationPromise = operationVersion.update({\n            uri: instance._uri,\n            method: \"post\",\n            data,\n            headers,\n        });\n        operationPromise = operationPromise.then((payload) => new DomainCertsInstance(operationVersion, payload, instance._solution.domainSid));\n        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n        return operationPromise;\n    }\n    /**\n     * Provide a user-friendly representation\n     *\n     * @returns Object\n     */\n    toJSON() {\n        return this._solution;\n    }\n    [util_1.inspect.custom](_depth, options) {\n        return (0, util_1.inspect)(this.toJSON(), options);\n    }\n}\nexports.DomainCertsContextImpl = DomainCertsContextImpl;\nclass DomainCertsInstance {\n    constructor(_version, payload, domainSid) {\n        this._version = _version;\n        this.domainSid = payload.domain_sid;\n        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);\n        this.dateExpires = deserialize.iso8601DateTime(payload.date_expires);\n        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);\n        this.domainName = payload.domain_name;\n        this.certificateSid = payload.certificate_sid;\n        this.url = payload.url;\n        this.certInValidation = payload.cert_in_validation;\n        this._solution = { domainSid: domainSid || this.domainSid };\n    }\n    get _proxy() {\n        this._context =\n            this._context ||\n                new DomainCertsContextImpl(this._version, this._solution.domainSid);\n        return this._context;\n    }\n    /**\n     * Remove a DomainCertsInstance\n     *\n     * @param callback - Callback to handle processed record\n     *\n     * @returns Resolves to processed boolean\n     */\n    remove(callback) {\n        return this._proxy.remove(callback);\n    }\n    /**\n     * Fetch a DomainCertsInstance\n     *\n     * @param callback - Callback to handle processed record\n     *\n     * @returns Resolves to processed DomainCertsInstance\n     */\n    fetch(callback) {\n        return this._proxy.fetch(callback);\n    }\n    update(params, callback) {\n        return this._proxy.update(params, callback);\n    }\n    /**\n     * Provide a user-friendly representation\n     *\n     * @returns Object\n     */\n    toJSON() {\n        return {\n            domainSid: this.domainSid,\n            dateUpdated: this.dateUpdated,\n            dateExpires: this.dateExpires,\n            dateCreated: this.dateCreated,\n            domainName: this.domainName,\n            certificateSid: this.certificateSid,\n            url: this.url,\n            certInValidation: this.certInValidation,\n        };\n    }\n    [util_1.inspect.custom](_depth, options) {\n        return (0, util_1.inspect)(this.toJSON(), options);\n    }\n}\nexports.DomainCertsInstance = DomainCertsInstance;\nfunction DomainCertsListInstance(version) {\n    const instance = ((domainSid) => instance.get(domainSid));\n    instance.get = function get(domainSid) {\n        return new DomainCertsContextImpl(version, domainSid);\n    };\n    instance._version = version;\n    instance._solution = {};\n    instance._uri = ``;\n    instance.toJSON = function toJSON() {\n        return instance._solution;\n    };\n    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {\n        return (0, util_1.inspect)(instance.toJSON(), options);\n    };\n    return instance;\n}\nexports.DomainCertsListInstance = DomainCertsListInstance;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}