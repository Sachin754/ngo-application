{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../base/Page'); /* jshint ignore:line */\nvar ParticipantList = require('./room/roomParticipant').ParticipantList;\nvar RecordingRulesList = require('./room/roomRecordingRule').RecordingRulesList;\nvar RoomRecordingList = require('./room/recording').RoomRecordingList;\nvar deserialize = require('../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../base/values'); /* jshint ignore:line */\n\nvar RoomList;\nvar RoomPage;\nvar RoomInstance;\nvar RoomContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomList\n *\n * @constructor Twilio.Video.V1.RoomList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nRoomList = function RoomList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function rooms\n   * @memberof Twilio.Video.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.RoomContext}\n   */\n  /* jshint ignore:end */\n  function RoomListInstance(sid) {\n    return RoomListInstance.get(sid);\n  }\n  RoomListInstance._version = version;\n  // Path Solution\n  RoomListInstance._solution = {};\n  RoomListInstance._uri = `/Rooms`;\n  /* jshint ignore:start */\n  /**\n   * create a RoomInstance\n   *\n   * @function create\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.enableTurn] -\n   *          Enable Twilio's Network Traversal TURN service\n   * @param {room.room_type} [opts.type] - The type of room\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {string} [opts.statusCallback] -\n   *          The URL to send status information to your application\n   * @param {string} [opts.statusCallbackMethod] -\n   *          The HTTP method we should use to call status_callback\n   * @param {number} [opts.maxParticipants] -\n   *          The maximum number of concurrent Participants allowed in the room\n   * @param {boolean} [opts.recordParticipantsOnConnect] -\n   *          Whether to start recording when Participants connect\n   * @param {room.video_codec|list} [opts.videoCodecs] -\n   *          An array of the video codecs that are supported when publishing a track in the room\n   * @param {string} [opts.mediaRegion] -\n   *          The region for the media server in Group Rooms\n   * @param {object} [opts.recordingRules] - A collection of Recording Rules\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed RoomInstance\n   */\n  /* jshint ignore:end */\n  RoomListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'EnableTurn': serialize.bool(_.get(opts, 'enableTurn')),\n      'Type': _.get(opts, 'type'),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n      'MaxParticipants': _.get(opts, 'maxParticipants'),\n      'RecordParticipantsOnConnect': serialize.bool(_.get(opts, 'recordParticipantsOnConnect')),\n      'VideoCodecs': serialize.map(_.get(opts, 'videoCodecs'), function (e) {\n        return e;\n      }),\n      'MediaRegion': _.get(opts, 'mediaRegion'),\n      'RecordingRules': serialize.object(_.get(opts, 'recordingRules'))\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new RoomInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams RoomInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room.room_status} [opts.status] - Read only the rooms with this status\n   * @param {string} [opts.uniqueName] - Read only rooms with this unique_name\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only rooms that started on or after this date, given as YYYY-MM-DD\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only rooms that started before this date, given as YYYY-MM-DD\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  RoomListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists RoomInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room.room_status} [opts.status] - Read only the rooms with this status\n   * @param {string} [opts.uniqueName] - Read only rooms with this unique_name\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only rooms that started on or after this date, given as YYYY-MM-DD\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only rooms that started before this date, given as YYYY-MM-DD\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  RoomListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of RoomInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room.room_status} [opts.status] - Read only the rooms with this status\n   * @param {string} [opts.uniqueName] - Read only rooms with this unique_name\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only rooms that started on or after this date, given as YYYY-MM-DD\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only rooms that started before this date, given as YYYY-MM-DD\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  RoomListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Status': _.get(opts, 'status'),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'DateCreatedBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedBefore')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new RoomPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of RoomInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  RoomListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new RoomPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a room\n   *\n   * @function get\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Video.V1.RoomContext}\n   */\n  /* jshint ignore:end */\n  RoomListInstance.get = function get(sid) {\n    return new RoomContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  RoomListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  RoomListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return RoomListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomPage\n *\n * @constructor Twilio.Video.V1.RoomPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {RoomSolution} solution - Path solution\n *\n * @returns RoomPage\n */\n/* jshint ignore:end */\nRoomPage = function RoomPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(RoomPage.prototype, Page.prototype);\nRoomPage.prototype.constructor = RoomPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of RoomInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.RoomPage#\n *\n * @param {RoomPayload} payload - Payload response from the API\n *\n * @returns RoomInstance\n */\n/* jshint ignore:end */\nRoomPage.prototype.getInstance = function getInstance(payload) {\n  return new RoomInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRoomPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nRoomPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomContext\n *\n * @constructor Twilio.Video.V1.RoomInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {room.room_status} status - The status of the room\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {boolean} enableTurn - Enable Twilio's Network Traversal TURN service\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {string} statusCallback -\n *          The URL to send status information to your application\n * @property {string} statusCallbackMethod -\n *          The HTTP method we use to call status_callback\n * @property {Date} endTime - The UTC end time of the room in UTC ISO 8601 format\n * @property {number} duration - The duration of the room in seconds\n * @property {room.room_type} type - The type of room\n * @property {number} maxParticipants -\n *          The maximum number of concurrent Participants allowed in the room\n * @property {number} maxConcurrentPublishedTracks -\n *          The maximum number of published tracks allowed in the room at the same time\n * @property {boolean} recordParticipantsOnConnect -\n *          Whether to start recording when Participants connect\n * @property {room.video_codec} videoCodecs -\n *          An array of the video codecs that are supported when publishing a track in the room\n * @property {string} mediaRegion - The region for the media server in Group Rooms\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {RoomPayload} payload - The instance payload\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nRoomInstance = function RoomInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.enableTurn = payload.enable_turn; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n  this.statusCallbackMethod = payload.status_callback_method; // jshint ignore:line\n  this.endTime = deserialize.iso8601DateTime(payload.end_time); // jshint ignore:line\n  this.duration = deserialize.integer(payload.duration); // jshint ignore:line\n  this.type = payload.type; // jshint ignore:line\n  this.maxParticipants = deserialize.integer(payload.max_participants); // jshint ignore:line\n  this.maxConcurrentPublishedTracks = deserialize.integer(payload.max_concurrent_published_tracks); // jshint ignore:line\n  this.recordParticipantsOnConnect = payload.record_participants_on_connect; // jshint ignore:line\n  this.videoCodecs = payload.video_codecs; // jshint ignore:line\n  this.mediaRegion = payload.media_region; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(RoomInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new RoomContext(this._version, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a RoomInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n/* jshint ignore:end */\nRoomInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a RoomInstance\n *\n * @function update\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @param {object} opts - Options for request\n * @param {room.room_status} opts.status - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n/* jshint ignore:end */\nRoomInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the recordings\n *\n * @function recordings\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.RoomRecordingList}\n */\n/* jshint ignore:end */\nRoomInstance.prototype.recordings = function recordings() {\n  return this._proxy.recordings;\n};\n\n/* jshint ignore:start */\n/**\n * Access the participants\n *\n * @function participants\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.ParticipantList}\n */\n/* jshint ignore:end */\nRoomInstance.prototype.participants = function participants() {\n  return this._proxy.participants;\n};\n\n/* jshint ignore:start */\n/**\n * Access the recordingRules\n *\n * @function recordingRules\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.RecordingRulesList}\n */\n/* jshint ignore:end */\nRoomInstance.prototype.recordingRules = function recordingRules() {\n  return this._proxy.recordingRules;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRoomInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nRoomInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomContext\n *\n * @constructor Twilio.Video.V1.RoomContext\n *\n * @property {Twilio.Video.V1.RoomContext.RoomRecordingList} recordings -\n *          recordings resource\n * @property {Twilio.Video.V1.RoomContext.ParticipantList} participants -\n *          participants resource\n * @property {Twilio.Video.V1.RoomContext.RecordingRulesList} recordingRules -\n *          recordingRules resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nRoomContext = function RoomContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/Rooms/${sid}`;\n\n  // Dependents\n  this._recordings = undefined;\n  this._participants = undefined;\n  this._recordingRules = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a RoomInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n/* jshint ignore:end */\nRoomContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new RoomInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a RoomInstance\n *\n * @function update\n * @memberof Twilio.Video.V1.RoomContext#\n *\n * @param {object} opts - Options for request\n * @param {room.room_status} opts.status - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n/* jshint ignore:end */\nRoomContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n  if (_.isUndefined(opts.status)) {\n    throw new Error('Required parameter \"opts.status\" missing.');\n  }\n  var deferred = Q.defer();\n  var data = values.of({\n    'Status': _.get(opts, 'status')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new RoomInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(RoomContext.prototype, 'recordings', {\n  get: function () {\n    if (!this._recordings) {\n      this._recordings = new RoomRecordingList(this._version, this._solution.sid);\n    }\n    return this._recordings;\n  }\n});\nObject.defineProperty(RoomContext.prototype, 'participants', {\n  get: function () {\n    if (!this._participants) {\n      this._participants = new ParticipantList(this._version, this._solution.sid);\n    }\n    return this._participants;\n  }\n});\nObject.defineProperty(RoomContext.prototype, 'recordingRules', {\n  get: function () {\n    if (!this._recordingRules) {\n      this._recordingRules = new RecordingRulesList(this._version, this._solution.sid);\n    }\n    return this._recordingRules;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRoomContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nRoomContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  RoomList: RoomList,\n  RoomPage: RoomPage,\n  RoomInstance: RoomInstance,\n  RoomContext: RoomContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","ParticipantList","RecordingRulesList","RoomRecordingList","deserialize","serialize","values","RoomList","RoomPage","RoomInstance","RoomContext","version","RoomListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isFunction","deferred","defer","data","of","bool","map","e","object","promise","uri","method","then","payload","resolve","bind","catch","error","reject","nodeify","each","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","iso8601DateTime","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","status","dateCreated","date_created","dateUpdated","date_updated","accountSid","account_sid","enableTurn","enable_turn","uniqueName","unique_name","statusCallback","status_callback","statusCallbackMethod","status_callback_method","endTime","end_time","duration","integer","type","maxParticipants","max_participants","maxConcurrentPublishedTracks","max_concurrent_published_tracks","recordParticipantsOnConnect","record_participants_on_connect","videoCodecs","video_codecs","mediaRegion","media_region","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","update","recordings","participants","recordingRules","_recordings","_participants","_recordingRules","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/video/v1/room.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar ParticipantList = require('./room/roomParticipant').ParticipantList;\nvar RecordingRulesList = require('./room/roomRecordingRule').RecordingRulesList;\nvar RoomRecordingList = require('./room/recording').RoomRecordingList;\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar RoomList;\nvar RoomPage;\nvar RoomInstance;\nvar RoomContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomList\n *\n * @constructor Twilio.Video.V1.RoomList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nRoomList = function RoomList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function rooms\n   * @memberof Twilio.Video.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.RoomContext}\n   */\n  /* jshint ignore:end */\n  function RoomListInstance(sid) {\n    return RoomListInstance.get(sid);\n  }\n\n  RoomListInstance._version = version;\n  // Path Solution\n  RoomListInstance._solution = {};\n  RoomListInstance._uri = `/Rooms`;\n  /* jshint ignore:start */\n  /**\n   * create a RoomInstance\n   *\n   * @function create\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.enableTurn] -\n   *          Enable Twilio's Network Traversal TURN service\n   * @param {room.room_type} [opts.type] - The type of room\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {string} [opts.statusCallback] -\n   *          The URL to send status information to your application\n   * @param {string} [opts.statusCallbackMethod] -\n   *          The HTTP method we should use to call status_callback\n   * @param {number} [opts.maxParticipants] -\n   *          The maximum number of concurrent Participants allowed in the room\n   * @param {boolean} [opts.recordParticipantsOnConnect] -\n   *          Whether to start recording when Participants connect\n   * @param {room.video_codec|list} [opts.videoCodecs] -\n   *          An array of the video codecs that are supported when publishing a track in the room\n   * @param {string} [opts.mediaRegion] -\n   *          The region for the media server in Group Rooms\n   * @param {object} [opts.recordingRules] - A collection of Recording Rules\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed RoomInstance\n   */\n  /* jshint ignore:end */\n  RoomListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'EnableTurn': serialize.bool(_.get(opts, 'enableTurn')),\n      'Type': _.get(opts, 'type'),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n      'MaxParticipants': _.get(opts, 'maxParticipants'),\n      'RecordParticipantsOnConnect': serialize.bool(_.get(opts, 'recordParticipantsOnConnect')),\n      'VideoCodecs': serialize.map(_.get(opts, 'videoCodecs'), function(e) { return e; }),\n      'MediaRegion': _.get(opts, 'mediaRegion'),\n      'RecordingRules': serialize.object(_.get(opts, 'recordingRules'))\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new RoomInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams RoomInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room.room_status} [opts.status] - Read only the rooms with this status\n   * @param {string} [opts.uniqueName] - Read only rooms with this unique_name\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only rooms that started on or after this date, given as YYYY-MM-DD\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only rooms that started before this date, given as YYYY-MM-DD\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  RoomListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists RoomInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room.room_status} [opts.status] - Read only the rooms with this status\n   * @param {string} [opts.uniqueName] - Read only rooms with this unique_name\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only rooms that started on or after this date, given as YYYY-MM-DD\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only rooms that started before this date, given as YYYY-MM-DD\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  RoomListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of RoomInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room.room_status} [opts.status] - Read only the rooms with this status\n   * @param {string} [opts.uniqueName] - Read only rooms with this unique_name\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only rooms that started on or after this date, given as YYYY-MM-DD\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only rooms that started before this date, given as YYYY-MM-DD\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  RoomListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Status': _.get(opts, 'status'),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'DateCreatedBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedBefore')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new RoomPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of RoomInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  RoomListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new RoomPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a room\n   *\n   * @function get\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Video.V1.RoomContext}\n   */\n  /* jshint ignore:end */\n  RoomListInstance.get = function get(sid) {\n    return new RoomContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  RoomListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  RoomListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return RoomListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomPage\n *\n * @constructor Twilio.Video.V1.RoomPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {RoomSolution} solution - Path solution\n *\n * @returns RoomPage\n */\n/* jshint ignore:end */\nRoomPage = function RoomPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(RoomPage.prototype, Page.prototype);\nRoomPage.prototype.constructor = RoomPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of RoomInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.RoomPage#\n *\n * @param {RoomPayload} payload - Payload response from the API\n *\n * @returns RoomInstance\n */\n/* jshint ignore:end */\nRoomPage.prototype.getInstance = function getInstance(payload) {\n  return new RoomInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRoomPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nRoomPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomContext\n *\n * @constructor Twilio.Video.V1.RoomInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {room.room_status} status - The status of the room\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {boolean} enableTurn - Enable Twilio's Network Traversal TURN service\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {string} statusCallback -\n *          The URL to send status information to your application\n * @property {string} statusCallbackMethod -\n *          The HTTP method we use to call status_callback\n * @property {Date} endTime - The UTC end time of the room in UTC ISO 8601 format\n * @property {number} duration - The duration of the room in seconds\n * @property {room.room_type} type - The type of room\n * @property {number} maxParticipants -\n *          The maximum number of concurrent Participants allowed in the room\n * @property {number} maxConcurrentPublishedTracks -\n *          The maximum number of published tracks allowed in the room at the same time\n * @property {boolean} recordParticipantsOnConnect -\n *          Whether to start recording when Participants connect\n * @property {room.video_codec} videoCodecs -\n *          An array of the video codecs that are supported when publishing a track in the room\n * @property {string} mediaRegion - The region for the media server in Group Rooms\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {RoomPayload} payload - The instance payload\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nRoomInstance = function RoomInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.enableTurn = payload.enable_turn; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n  this.statusCallbackMethod = payload.status_callback_method; // jshint ignore:line\n  this.endTime = deserialize.iso8601DateTime(payload.end_time); // jshint ignore:line\n  this.duration = deserialize.integer(payload.duration); // jshint ignore:line\n  this.type = payload.type; // jshint ignore:line\n  this.maxParticipants = deserialize.integer(payload.max_participants); // jshint ignore:line\n  this.maxConcurrentPublishedTracks = deserialize.integer(payload.max_concurrent_published_tracks); // jshint ignore:line\n  this.recordParticipantsOnConnect = payload.record_participants_on_connect; // jshint ignore:line\n  this.videoCodecs = payload.video_codecs; // jshint ignore:line\n  this.mediaRegion = payload.media_region; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(RoomInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new RoomContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a RoomInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n/* jshint ignore:end */\nRoomInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a RoomInstance\n *\n * @function update\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @param {object} opts - Options for request\n * @param {room.room_status} opts.status - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n/* jshint ignore:end */\nRoomInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the recordings\n *\n * @function recordings\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.RoomRecordingList}\n */\n/* jshint ignore:end */\nRoomInstance.prototype.recordings = function recordings() {\n  return this._proxy.recordings;\n};\n\n/* jshint ignore:start */\n/**\n * Access the participants\n *\n * @function participants\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.ParticipantList}\n */\n/* jshint ignore:end */\nRoomInstance.prototype.participants = function participants() {\n  return this._proxy.participants;\n};\n\n/* jshint ignore:start */\n/**\n * Access the recordingRules\n *\n * @function recordingRules\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.RecordingRulesList}\n */\n/* jshint ignore:end */\nRoomInstance.prototype.recordingRules = function recordingRules() {\n  return this._proxy.recordingRules;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRoomInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nRoomInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomContext\n *\n * @constructor Twilio.Video.V1.RoomContext\n *\n * @property {Twilio.Video.V1.RoomContext.RoomRecordingList} recordings -\n *          recordings resource\n * @property {Twilio.Video.V1.RoomContext.ParticipantList} participants -\n *          participants resource\n * @property {Twilio.Video.V1.RoomContext.RecordingRulesList} recordingRules -\n *          recordingRules resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nRoomContext = function RoomContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/Rooms/${sid}`;\n\n  // Dependents\n  this._recordings = undefined;\n  this._participants = undefined;\n  this._recordingRules = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a RoomInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n/* jshint ignore:end */\nRoomContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new RoomInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a RoomInstance\n *\n * @function update\n * @memberof Twilio.Video.V1.RoomContext#\n *\n * @param {object} opts - Options for request\n * @param {room.room_status} opts.status - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n/* jshint ignore:end */\nRoomContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n  if (_.isUndefined(opts.status)) {\n    throw new Error('Required parameter \"opts.status\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({'Status': _.get(opts, 'status')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new RoomInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(RoomContext.prototype,\n  'recordings', {\n    get: function() {\n      if (!this._recordings) {\n        this._recordings = new RoomRecordingList(this._version, this._solution.sid);\n      }\n      return this._recordings;\n    }\n});\n\nObject.defineProperty(RoomContext.prototype,\n  'participants', {\n    get: function() {\n      if (!this._participants) {\n        this._participants = new ParticipantList(this._version, this._solution.sid);\n      }\n      return this._participants;\n    }\n});\n\nObject.defineProperty(RoomContext.prototype,\n  'recordingRules', {\n    get: function() {\n      if (!this._recordingRules) {\n        this._recordingRules = new RecordingRulesList(this._version, this._solution.sid);\n      }\n      return this._recordingRules;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRoomContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nRoomContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  RoomList: RoomList,\n  RoomPage: RoomPage,\n  RoomInstance: RoomInstance,\n  RoomContext: RoomContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}