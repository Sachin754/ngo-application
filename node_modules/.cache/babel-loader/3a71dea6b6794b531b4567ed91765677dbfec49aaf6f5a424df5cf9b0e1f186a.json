{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../base/deserialize'); /* jshint ignore:line */\nvar values = require('../../../base/values'); /* jshint ignore:line */\n\nvar UserList;\nvar UserPage;\nvar UserInstance;\nvar UserContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the UserList\n *\n * @constructor Twilio.Conversations.V1.UserList\n *\n * @param {Twilio.Conversations.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nUserList = function UserList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function users\n   * @memberof Twilio.Conversations.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Conversations.V1.UserContext}\n   */\n  /* jshint ignore:end */\n  function UserListInstance(sid) {\n    return UserListInstance.get(sid);\n  }\n  UserListInstance._version = version;\n  // Path Solution\n  UserListInstance._solution = {};\n  UserListInstance._uri = `/Users`;\n  /* jshint ignore:start */\n  /**\n   * create a UserInstance\n   *\n   * @function create\n   * @memberof Twilio.Conversations.V1.UserList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.identity - The string that identifies the resource's User\n   * @param {string} [opts.friendlyName] -\n   *          The string that you assigned to describe the resource\n   * @param {string} [opts.attributes] -\n   *          The JSON Object string that stores application-specific data\n   * @param {string} [opts.roleSid] -\n   *          The SID of a service-level Role to assign to the user\n   * @param {user.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n   *          The X-Twilio-Webhook-Enabled HTTP request header\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed UserInstance\n   */\n  /* jshint ignore:end */\n  UserListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.identity)) {\n      throw new Error('Required parameter \"opts.identity\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'Identity': _.get(opts, 'identity'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Attributes': _.get(opts, 'attributes'),\n      'RoleSid': _.get(opts, 'roleSid')\n    });\n    var headers = values.of({\n      'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data,\n      headers: headers\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new UserInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams UserInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Conversations.V1.UserList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  UserListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists UserInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Conversations.V1.UserList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  UserListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of UserInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Conversations.V1.UserList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  UserListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new UserPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of UserInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Conversations.V1.UserList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  UserListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new UserPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a user\n   *\n   * @function get\n   * @memberof Twilio.Conversations.V1.UserList#\n   *\n   * @param {string} sid - The SID of the User resource to fetch\n   *\n   * @returns {Twilio.Conversations.V1.UserContext}\n   */\n  /* jshint ignore:end */\n  UserListInstance.get = function get(sid) {\n    return new UserContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Conversations.V1.UserList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  UserListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  UserListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return UserListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the UserPage\n *\n * @constructor Twilio.Conversations.V1.UserPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {UserSolution} solution - Path solution\n *\n * @returns UserPage\n */\n/* jshint ignore:end */\nUserPage = function UserPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(UserPage.prototype, Page.prototype);\nUserPage.prototype.constructor = UserPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of UserInstance\n *\n * @function getInstance\n * @memberof Twilio.Conversations.V1.UserPage#\n *\n * @param {UserPayload} payload - Payload response from the API\n *\n * @returns UserInstance\n */\n/* jshint ignore:end */\nUserPage.prototype.getInstance = function getInstance(payload) {\n  return new UserInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.UserPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nUserPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nUserPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the UserContext\n *\n * @constructor Twilio.Conversations.V1.UserInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} chatServiceSid -\n *          The SID of the Conversation Service that the resource is associated with\n * @property {string} roleSid -\n *          The SID of a service-level Role assigned to the user\n * @property {string} identity - The string that identifies the resource's User\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} attributes -\n *          The JSON Object string that stores application-specific data\n * @property {boolean} isOnline -\n *          Whether the User is actively connected to this Conversations Service and online\n * @property {boolean} isNotifiable -\n *          Whether the User has a potentially valid Push Notification registration for this Conversations Service\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - An absolute URL for this user.\n *\n * @param {V1} version - Version of the resource\n * @param {UserPayload} payload - The instance payload\n * @param {sid_like} sid - The SID of the User resource to fetch\n */\n/* jshint ignore:end */\nUserInstance = function UserInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.chatServiceSid = payload.chat_service_sid; // jshint ignore:line\n  this.roleSid = payload.role_sid; // jshint ignore:line\n  this.identity = payload.identity; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.attributes = payload.attributes; // jshint ignore:line\n  this.isOnline = payload.is_online; // jshint ignore:line\n  this.isNotifiable = payload.is_notifiable; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(UserInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new UserContext(this._version, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * update a UserInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.UserInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          The string that you assigned to describe the resource\n * @param {string} [opts.attributes] -\n *          The JSON Object string that stores application-specific data\n * @param {string} [opts.roleSid] -\n *          The SID of a service-level Role to assign to the user\n * @param {user.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserInstance\n */\n/* jshint ignore:end */\nUserInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a UserInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.UserInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {user.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserInstance\n */\n/* jshint ignore:end */\nUserInstance.prototype.remove = function remove(opts, callback) {\n  return this._proxy.remove(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a UserInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.UserInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserInstance\n */\n/* jshint ignore:end */\nUserInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.UserInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nUserInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nUserInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the UserContext\n *\n * @constructor Twilio.Conversations.V1.UserContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} sid - The SID of the User resource to fetch\n */\n/* jshint ignore:end */\nUserContext = function UserContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/Users/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * update a UserInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.UserContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          The string that you assigned to describe the resource\n * @param {string} [opts.attributes] -\n *          The JSON Object string that stores application-specific data\n * @param {string} [opts.roleSid] -\n *          The SID of a service-level Role to assign to the user\n * @param {user.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserInstance\n */\n/* jshint ignore:end */\nUserContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'Attributes': _.get(opts, 'attributes'),\n    'RoleSid': _.get(opts, 'roleSid')\n  });\n  var headers = values.of({\n    'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data,\n    headers: headers\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new UserInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a UserInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.UserContext#\n *\n * @param {object} [opts] - Options for request\n * @param {user.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserInstance\n */\n/* jshint ignore:end */\nUserContext.prototype.remove = function remove(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var headers = values.of({\n    'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')\n  });\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE',\n    headers: headers\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a UserInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.UserContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserInstance\n */\n/* jshint ignore:end */\nUserContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new UserInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.UserContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nUserContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nUserContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  UserList: UserList,\n  UserPage: UserPage,\n  UserInstance: UserInstance,\n  UserContext: UserContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","values","UserList","UserPage","UserInstance","UserContext","version","UserListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","identity","deferred","defer","data","of","headers","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","chatServiceSid","chat_service_sid","roleSid","role_sid","friendlyName","friendly_name","attributes","isOnline","is_online","isNotifiable","is_notifiable","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","_context","undefined","Object","defineProperty","update","_proxy","remove","fetch","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/conversations/v1/user.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar UserList;\nvar UserPage;\nvar UserInstance;\nvar UserContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the UserList\n *\n * @constructor Twilio.Conversations.V1.UserList\n *\n * @param {Twilio.Conversations.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nUserList = function UserList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function users\n   * @memberof Twilio.Conversations.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Conversations.V1.UserContext}\n   */\n  /* jshint ignore:end */\n  function UserListInstance(sid) {\n    return UserListInstance.get(sid);\n  }\n\n  UserListInstance._version = version;\n  // Path Solution\n  UserListInstance._solution = {};\n  UserListInstance._uri = `/Users`;\n  /* jshint ignore:start */\n  /**\n   * create a UserInstance\n   *\n   * @function create\n   * @memberof Twilio.Conversations.V1.UserList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.identity - The string that identifies the resource's User\n   * @param {string} [opts.friendlyName] -\n   *          The string that you assigned to describe the resource\n   * @param {string} [opts.attributes] -\n   *          The JSON Object string that stores application-specific data\n   * @param {string} [opts.roleSid] -\n   *          The SID of a service-level Role to assign to the user\n   * @param {user.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n   *          The X-Twilio-Webhook-Enabled HTTP request header\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed UserInstance\n   */\n  /* jshint ignore:end */\n  UserListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.identity)) {\n      throw new Error('Required parameter \"opts.identity\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Identity': _.get(opts, 'identity'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Attributes': _.get(opts, 'attributes'),\n      'RoleSid': _.get(opts, 'roleSid')\n    });\n    var headers = values.of({'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')});\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data, headers: headers});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new UserInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams UserInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Conversations.V1.UserList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  UserListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists UserInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Conversations.V1.UserList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  UserListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of UserInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Conversations.V1.UserList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  UserListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new UserPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of UserInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Conversations.V1.UserList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  UserListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new UserPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a user\n   *\n   * @function get\n   * @memberof Twilio.Conversations.V1.UserList#\n   *\n   * @param {string} sid - The SID of the User resource to fetch\n   *\n   * @returns {Twilio.Conversations.V1.UserContext}\n   */\n  /* jshint ignore:end */\n  UserListInstance.get = function get(sid) {\n    return new UserContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Conversations.V1.UserList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  UserListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  UserListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return UserListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the UserPage\n *\n * @constructor Twilio.Conversations.V1.UserPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {UserSolution} solution - Path solution\n *\n * @returns UserPage\n */\n/* jshint ignore:end */\nUserPage = function UserPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(UserPage.prototype, Page.prototype);\nUserPage.prototype.constructor = UserPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of UserInstance\n *\n * @function getInstance\n * @memberof Twilio.Conversations.V1.UserPage#\n *\n * @param {UserPayload} payload - Payload response from the API\n *\n * @returns UserInstance\n */\n/* jshint ignore:end */\nUserPage.prototype.getInstance = function getInstance(payload) {\n  return new UserInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.UserPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nUserPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nUserPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the UserContext\n *\n * @constructor Twilio.Conversations.V1.UserInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} chatServiceSid -\n *          The SID of the Conversation Service that the resource is associated with\n * @property {string} roleSid -\n *          The SID of a service-level Role assigned to the user\n * @property {string} identity - The string that identifies the resource's User\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} attributes -\n *          The JSON Object string that stores application-specific data\n * @property {boolean} isOnline -\n *          Whether the User is actively connected to this Conversations Service and online\n * @property {boolean} isNotifiable -\n *          Whether the User has a potentially valid Push Notification registration for this Conversations Service\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - An absolute URL for this user.\n *\n * @param {V1} version - Version of the resource\n * @param {UserPayload} payload - The instance payload\n * @param {sid_like} sid - The SID of the User resource to fetch\n */\n/* jshint ignore:end */\nUserInstance = function UserInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.chatServiceSid = payload.chat_service_sid; // jshint ignore:line\n  this.roleSid = payload.role_sid; // jshint ignore:line\n  this.identity = payload.identity; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.attributes = payload.attributes; // jshint ignore:line\n  this.isOnline = payload.is_online; // jshint ignore:line\n  this.isNotifiable = payload.is_notifiable; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(UserInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new UserContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * update a UserInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.UserInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          The string that you assigned to describe the resource\n * @param {string} [opts.attributes] -\n *          The JSON Object string that stores application-specific data\n * @param {string} [opts.roleSid] -\n *          The SID of a service-level Role to assign to the user\n * @param {user.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserInstance\n */\n/* jshint ignore:end */\nUserInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a UserInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.UserInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {user.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserInstance\n */\n/* jshint ignore:end */\nUserInstance.prototype.remove = function remove(opts, callback) {\n  return this._proxy.remove(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a UserInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.UserInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserInstance\n */\n/* jshint ignore:end */\nUserInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.UserInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nUserInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nUserInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the UserContext\n *\n * @constructor Twilio.Conversations.V1.UserContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} sid - The SID of the User resource to fetch\n */\n/* jshint ignore:end */\nUserContext = function UserContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/Users/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * update a UserInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.UserContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          The string that you assigned to describe the resource\n * @param {string} [opts.attributes] -\n *          The JSON Object string that stores application-specific data\n * @param {string} [opts.roleSid] -\n *          The SID of a service-level Role to assign to the user\n * @param {user.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserInstance\n */\n/* jshint ignore:end */\nUserContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'Attributes': _.get(opts, 'attributes'),\n    'RoleSid': _.get(opts, 'roleSid')\n  });\n  var headers = values.of({'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data, headers: headers});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new UserInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a UserInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.UserContext#\n *\n * @param {object} [opts] - Options for request\n * @param {user.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserInstance\n */\n/* jshint ignore:end */\nUserContext.prototype.remove = function remove(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var headers = values.of({'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')});\n\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE', headers: headers});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a UserInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.UserContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserInstance\n */\n/* jshint ignore:end */\nUserContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new UserInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.UserContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nUserContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nUserContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  UserList: UserList,\n  UserPage: UserPage,\n  UserInstance: UserInstance,\n  UserContext: UserContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}