{"ast":null,"code":"\"use strict\";\n\n/*\n * This code was generated by\n * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __\n *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\\ | |___ |__/ |__|  | |  | |__/\n *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \\| |___ |  \\ |  |  | |__| |  \\\n *\n * Twilio - Taskrouter\n * This is the public Twilio REST API.\n *\n * NOTE: This class is auto generated by OpenAPI Generator.\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TaskPage = exports.TaskListInstance = exports.TaskInstance = exports.TaskContextImpl = void 0;\nconst util_1 = require(\"util\");\nconst Page_1 = __importDefault(require(\"../../../../base/Page\"));\nconst deserialize = require(\"../../../../base/deserialize\");\nconst serialize = require(\"../../../../base/serialize\");\nconst utility_1 = require(\"../../../../base/utility\");\nconst reservation_1 = require(\"./task/reservation\");\nclass TaskContextImpl {\n  constructor(_version, workspaceSid, sid) {\n    this._version = _version;\n    if (!(0, utility_1.isValidPathParam)(workspaceSid)) {\n      throw new Error(\"Parameter 'workspaceSid' is not valid.\");\n    }\n    if (!(0, utility_1.isValidPathParam)(sid)) {\n      throw new Error(\"Parameter 'sid' is not valid.\");\n    }\n    this._solution = {\n      workspaceSid,\n      sid\n    };\n    this._uri = `/Workspaces/${workspaceSid}/Tasks/${sid}`;\n  }\n  get reservations() {\n    this._reservations = this._reservations || (0, reservation_1.ReservationListInstance)(this._version, this._solution.workspaceSid, this._solution.sid);\n    return this._reservations;\n  }\n  remove(params, callback) {\n    if (params instanceof Function) {\n      callback = params;\n      params = {};\n    } else {\n      params = params || {};\n    }\n    let data = {};\n    const headers = {};\n    if (params[\"ifMatch\"] !== undefined) headers[\"If-Match\"] = params[\"ifMatch\"];\n    const instance = this;\n    let operationVersion = instance._version,\n      operationPromise = operationVersion.remove({\n        uri: instance._uri,\n        method: \"delete\",\n        params: data,\n        headers\n      });\n    operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n    return operationPromise;\n  }\n  fetch(callback) {\n    const instance = this;\n    let operationVersion = instance._version,\n      operationPromise = operationVersion.fetch({\n        uri: instance._uri,\n        method: \"get\"\n      });\n    operationPromise = operationPromise.then(payload => new TaskInstance(operationVersion, payload, instance._solution.workspaceSid, instance._solution.sid));\n    operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n    return operationPromise;\n  }\n  update(params, callback) {\n    if (params instanceof Function) {\n      callback = params;\n      params = {};\n    } else {\n      params = params || {};\n    }\n    let data = {};\n    if (params[\"attributes\"] !== undefined) data[\"Attributes\"] = params[\"attributes\"];\n    if (params[\"assignmentStatus\"] !== undefined) data[\"AssignmentStatus\"] = params[\"assignmentStatus\"];\n    if (params[\"reason\"] !== undefined) data[\"Reason\"] = params[\"reason\"];\n    if (params[\"priority\"] !== undefined) data[\"Priority\"] = params[\"priority\"];\n    if (params[\"taskChannel\"] !== undefined) data[\"TaskChannel\"] = params[\"taskChannel\"];\n    const headers = {};\n    headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n    if (params[\"ifMatch\"] !== undefined) headers[\"If-Match\"] = params[\"ifMatch\"];\n    const instance = this;\n    let operationVersion = instance._version,\n      operationPromise = operationVersion.update({\n        uri: instance._uri,\n        method: \"post\",\n        data,\n        headers\n      });\n    operationPromise = operationPromise.then(payload => new TaskInstance(operationVersion, payload, instance._solution.workspaceSid, instance._solution.sid));\n    operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n    return operationPromise;\n  }\n  /**\n   * Provide a user-friendly representation\n   *\n   * @returns Object\n   */\n  toJSON() {\n    return this._solution;\n  }\n  [util_1.inspect.custom](_depth, options) {\n    return (0, util_1.inspect)(this.toJSON(), options);\n  }\n}\nexports.TaskContextImpl = TaskContextImpl;\nclass TaskInstance {\n  constructor(_version, payload, workspaceSid, sid) {\n    this._version = _version;\n    this.accountSid = payload.account_sid;\n    this.age = deserialize.integer(payload.age);\n    this.assignmentStatus = payload.assignment_status;\n    this.attributes = payload.attributes;\n    this.addons = payload.addons;\n    this.dateCreated = deserialize.iso8601DateTime(payload.date_created);\n    this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);\n    this.taskQueueEnteredDate = deserialize.iso8601DateTime(payload.task_queue_entered_date);\n    this.priority = deserialize.integer(payload.priority);\n    this.reason = payload.reason;\n    this.sid = payload.sid;\n    this.taskQueueSid = payload.task_queue_sid;\n    this.taskQueueFriendlyName = payload.task_queue_friendly_name;\n    this.taskChannelSid = payload.task_channel_sid;\n    this.taskChannelUniqueName = payload.task_channel_unique_name;\n    this.timeout = deserialize.integer(payload.timeout);\n    this.workflowSid = payload.workflow_sid;\n    this.workflowFriendlyName = payload.workflow_friendly_name;\n    this.workspaceSid = payload.workspace_sid;\n    this.url = payload.url;\n    this.links = payload.links;\n    this._solution = {\n      workspaceSid,\n      sid: sid || this.sid\n    };\n  }\n  get _proxy() {\n    this._context = this._context || new TaskContextImpl(this._version, this._solution.workspaceSid, this._solution.sid);\n    return this._context;\n  }\n  remove(params, callback) {\n    return this._proxy.remove(params, callback);\n  }\n  /**\n   * Fetch a TaskInstance\n   *\n   * @param callback - Callback to handle processed record\n   *\n   * @returns Resolves to processed TaskInstance\n   */\n  fetch(callback) {\n    return this._proxy.fetch(callback);\n  }\n  update(params, callback) {\n    return this._proxy.update(params, callback);\n  }\n  /**\n   * Access the reservations.\n   */\n  reservations() {\n    return this._proxy.reservations;\n  }\n  /**\n   * Provide a user-friendly representation\n   *\n   * @returns Object\n   */\n  toJSON() {\n    return {\n      accountSid: this.accountSid,\n      age: this.age,\n      assignmentStatus: this.assignmentStatus,\n      attributes: this.attributes,\n      addons: this.addons,\n      dateCreated: this.dateCreated,\n      dateUpdated: this.dateUpdated,\n      taskQueueEnteredDate: this.taskQueueEnteredDate,\n      priority: this.priority,\n      reason: this.reason,\n      sid: this.sid,\n      taskQueueSid: this.taskQueueSid,\n      taskQueueFriendlyName: this.taskQueueFriendlyName,\n      taskChannelSid: this.taskChannelSid,\n      taskChannelUniqueName: this.taskChannelUniqueName,\n      timeout: this.timeout,\n      workflowSid: this.workflowSid,\n      workflowFriendlyName: this.workflowFriendlyName,\n      workspaceSid: this.workspaceSid,\n      url: this.url,\n      links: this.links\n    };\n  }\n  [util_1.inspect.custom](_depth, options) {\n    return (0, util_1.inspect)(this.toJSON(), options);\n  }\n}\nexports.TaskInstance = TaskInstance;\nfunction TaskListInstance(version, workspaceSid) {\n  if (!(0, utility_1.isValidPathParam)(workspaceSid)) {\n    throw new Error(\"Parameter 'workspaceSid' is not valid.\");\n  }\n  const instance = sid => instance.get(sid);\n  instance.get = function get(sid) {\n    return new TaskContextImpl(version, workspaceSid, sid);\n  };\n  instance._version = version;\n  instance._solution = {\n    workspaceSid\n  };\n  instance._uri = `/Workspaces/${workspaceSid}/Tasks`;\n  instance.create = function create(params, callback) {\n    if (params instanceof Function) {\n      callback = params;\n      params = {};\n    } else {\n      params = params || {};\n    }\n    let data = {};\n    if (params[\"timeout\"] !== undefined) data[\"Timeout\"] = params[\"timeout\"];\n    if (params[\"priority\"] !== undefined) data[\"Priority\"] = params[\"priority\"];\n    if (params[\"taskChannel\"] !== undefined) data[\"TaskChannel\"] = params[\"taskChannel\"];\n    if (params[\"workflowSid\"] !== undefined) data[\"WorkflowSid\"] = params[\"workflowSid\"];\n    if (params[\"attributes\"] !== undefined) data[\"Attributes\"] = params[\"attributes\"];\n    const headers = {};\n    headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n    let operationVersion = version,\n      operationPromise = operationVersion.create({\n        uri: instance._uri,\n        method: \"post\",\n        data,\n        headers\n      });\n    operationPromise = operationPromise.then(payload => new TaskInstance(operationVersion, payload, instance._solution.workspaceSid));\n    operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n    return operationPromise;\n  };\n  instance.page = function page(params, callback) {\n    if (params instanceof Function) {\n      callback = params;\n      params = {};\n    } else {\n      params = params || {};\n    }\n    let data = {};\n    if (params[\"priority\"] !== undefined) data[\"Priority\"] = params[\"priority\"];\n    if (params[\"assignmentStatus\"] !== undefined) data[\"AssignmentStatus\"] = serialize.map(params[\"assignmentStatus\"], e => e);\n    if (params[\"workflowSid\"] !== undefined) data[\"WorkflowSid\"] = params[\"workflowSid\"];\n    if (params[\"workflowName\"] !== undefined) data[\"WorkflowName\"] = params[\"workflowName\"];\n    if (params[\"taskQueueSid\"] !== undefined) data[\"TaskQueueSid\"] = params[\"taskQueueSid\"];\n    if (params[\"taskQueueName\"] !== undefined) data[\"TaskQueueName\"] = params[\"taskQueueName\"];\n    if (params[\"evaluateTaskAttributes\"] !== undefined) data[\"EvaluateTaskAttributes\"] = params[\"evaluateTaskAttributes\"];\n    if (params[\"ordering\"] !== undefined) data[\"Ordering\"] = params[\"ordering\"];\n    if (params[\"hasAddons\"] !== undefined) data[\"HasAddons\"] = serialize.bool(params[\"hasAddons\"]);\n    if (params[\"pageSize\"] !== undefined) data[\"PageSize\"] = params[\"pageSize\"];\n    if (params.pageNumber !== undefined) data[\"Page\"] = params.pageNumber;\n    if (params.pageToken !== undefined) data[\"PageToken\"] = params.pageToken;\n    const headers = {};\n    let operationVersion = version,\n      operationPromise = operationVersion.page({\n        uri: instance._uri,\n        method: \"get\",\n        params: data,\n        headers\n      });\n    operationPromise = operationPromise.then(payload => new TaskPage(operationVersion, payload, instance._solution));\n    operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n    return operationPromise;\n  };\n  instance.each = instance._version.each;\n  instance.list = instance._version.list;\n  instance.getPage = function getPage(targetUrl, callback) {\n    const operationPromise = instance._version._domain.twilio.request({\n      method: \"get\",\n      uri: targetUrl\n    });\n    let pagePromise = operationPromise.then(payload => new TaskPage(instance._version, payload, instance._solution));\n    pagePromise = instance._version.setPromiseCallback(pagePromise, callback);\n    return pagePromise;\n  };\n  instance.toJSON = function toJSON() {\n    return instance._solution;\n  };\n  instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {\n    return (0, util_1.inspect)(instance.toJSON(), options);\n  };\n  return instance;\n}\nexports.TaskListInstance = TaskListInstance;\nclass TaskPage extends Page_1.default {\n  /**\n   * Initialize the TaskPage\n   *\n   * @param version - Version of the resource\n   * @param response - Response from the API\n   * @param solution - Path solution\n   */\n  constructor(version, response, solution) {\n    super(version, response, solution);\n  }\n  /**\n   * Build an instance of TaskInstance\n   *\n   * @param payload - Payload response from the API\n   */\n  getInstance(payload) {\n    return new TaskInstance(this._version, payload, this._solution.workspaceSid);\n  }\n  [util_1.inspect.custom](depth, options) {\n    return (0, util_1.inspect)(this.toJSON(), options);\n  }\n}\nexports.TaskPage = TaskPage;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","TaskPage","TaskListInstance","TaskInstance","TaskContextImpl","util_1","require","Page_1","deserialize","serialize","utility_1","reservation_1","constructor","_version","workspaceSid","sid","isValidPathParam","Error","_solution","_uri","reservations","_reservations","ReservationListInstance","remove","params","callback","Function","data","headers","undefined","instance","operationVersion","operationPromise","uri","method","setPromiseCallback","fetch","then","payload","update","toJSON","inspect","custom","_depth","options","accountSid","account_sid","age","integer","assignmentStatus","assignment_status","attributes","addons","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","taskQueueEnteredDate","task_queue_entered_date","priority","reason","taskQueueSid","task_queue_sid","taskQueueFriendlyName","task_queue_friendly_name","taskChannelSid","task_channel_sid","taskChannelUniqueName","task_channel_unique_name","timeout","workflowSid","workflow_sid","workflowFriendlyName","workflow_friendly_name","workspace_sid","url","links","_proxy","_context","version","get","create","page","map","e","bool","pageNumber","pageToken","each","list","getPage","targetUrl","_domain","twilio","request","pagePromise","inspectImpl","default","response","solution","getInstance","depth"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/taskrouter/v1/workspace/task.js"],"sourcesContent":["\"use strict\";\n/*\n * This code was generated by\n * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __\n *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\\ | |___ |__/ |__|  | |  | |__/\n *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \\| |___ |  \\ |  |  | |__| |  \\\n *\n * Twilio - Taskrouter\n * This is the public Twilio REST API.\n *\n * NOTE: This class is auto generated by OpenAPI Generator.\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TaskPage = exports.TaskListInstance = exports.TaskInstance = exports.TaskContextImpl = void 0;\nconst util_1 = require(\"util\");\nconst Page_1 = __importDefault(require(\"../../../../base/Page\"));\nconst deserialize = require(\"../../../../base/deserialize\");\nconst serialize = require(\"../../../../base/serialize\");\nconst utility_1 = require(\"../../../../base/utility\");\nconst reservation_1 = require(\"./task/reservation\");\nclass TaskContextImpl {\n    constructor(_version, workspaceSid, sid) {\n        this._version = _version;\n        if (!(0, utility_1.isValidPathParam)(workspaceSid)) {\n            throw new Error(\"Parameter 'workspaceSid' is not valid.\");\n        }\n        if (!(0, utility_1.isValidPathParam)(sid)) {\n            throw new Error(\"Parameter 'sid' is not valid.\");\n        }\n        this._solution = { workspaceSid, sid };\n        this._uri = `/Workspaces/${workspaceSid}/Tasks/${sid}`;\n    }\n    get reservations() {\n        this._reservations =\n            this._reservations ||\n                (0, reservation_1.ReservationListInstance)(this._version, this._solution.workspaceSid, this._solution.sid);\n        return this._reservations;\n    }\n    remove(params, callback) {\n        if (params instanceof Function) {\n            callback = params;\n            params = {};\n        }\n        else {\n            params = params || {};\n        }\n        let data = {};\n        const headers = {};\n        if (params[\"ifMatch\"] !== undefined)\n            headers[\"If-Match\"] = params[\"ifMatch\"];\n        const instance = this;\n        let operationVersion = instance._version, operationPromise = operationVersion.remove({\n            uri: instance._uri,\n            method: \"delete\",\n            params: data,\n            headers,\n        });\n        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n        return operationPromise;\n    }\n    fetch(callback) {\n        const instance = this;\n        let operationVersion = instance._version, operationPromise = operationVersion.fetch({\n            uri: instance._uri,\n            method: \"get\",\n        });\n        operationPromise = operationPromise.then((payload) => new TaskInstance(operationVersion, payload, instance._solution.workspaceSid, instance._solution.sid));\n        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n        return operationPromise;\n    }\n    update(params, callback) {\n        if (params instanceof Function) {\n            callback = params;\n            params = {};\n        }\n        else {\n            params = params || {};\n        }\n        let data = {};\n        if (params[\"attributes\"] !== undefined)\n            data[\"Attributes\"] = params[\"attributes\"];\n        if (params[\"assignmentStatus\"] !== undefined)\n            data[\"AssignmentStatus\"] = params[\"assignmentStatus\"];\n        if (params[\"reason\"] !== undefined)\n            data[\"Reason\"] = params[\"reason\"];\n        if (params[\"priority\"] !== undefined)\n            data[\"Priority\"] = params[\"priority\"];\n        if (params[\"taskChannel\"] !== undefined)\n            data[\"TaskChannel\"] = params[\"taskChannel\"];\n        const headers = {};\n        headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n        if (params[\"ifMatch\"] !== undefined)\n            headers[\"If-Match\"] = params[\"ifMatch\"];\n        const instance = this;\n        let operationVersion = instance._version, operationPromise = operationVersion.update({\n            uri: instance._uri,\n            method: \"post\",\n            data,\n            headers,\n        });\n        operationPromise = operationPromise.then((payload) => new TaskInstance(operationVersion, payload, instance._solution.workspaceSid, instance._solution.sid));\n        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n        return operationPromise;\n    }\n    /**\n     * Provide a user-friendly representation\n     *\n     * @returns Object\n     */\n    toJSON() {\n        return this._solution;\n    }\n    [util_1.inspect.custom](_depth, options) {\n        return (0, util_1.inspect)(this.toJSON(), options);\n    }\n}\nexports.TaskContextImpl = TaskContextImpl;\nclass TaskInstance {\n    constructor(_version, payload, workspaceSid, sid) {\n        this._version = _version;\n        this.accountSid = payload.account_sid;\n        this.age = deserialize.integer(payload.age);\n        this.assignmentStatus = payload.assignment_status;\n        this.attributes = payload.attributes;\n        this.addons = payload.addons;\n        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);\n        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);\n        this.taskQueueEnteredDate = deserialize.iso8601DateTime(payload.task_queue_entered_date);\n        this.priority = deserialize.integer(payload.priority);\n        this.reason = payload.reason;\n        this.sid = payload.sid;\n        this.taskQueueSid = payload.task_queue_sid;\n        this.taskQueueFriendlyName = payload.task_queue_friendly_name;\n        this.taskChannelSid = payload.task_channel_sid;\n        this.taskChannelUniqueName = payload.task_channel_unique_name;\n        this.timeout = deserialize.integer(payload.timeout);\n        this.workflowSid = payload.workflow_sid;\n        this.workflowFriendlyName = payload.workflow_friendly_name;\n        this.workspaceSid = payload.workspace_sid;\n        this.url = payload.url;\n        this.links = payload.links;\n        this._solution = { workspaceSid, sid: sid || this.sid };\n    }\n    get _proxy() {\n        this._context =\n            this._context ||\n                new TaskContextImpl(this._version, this._solution.workspaceSid, this._solution.sid);\n        return this._context;\n    }\n    remove(params, callback) {\n        return this._proxy.remove(params, callback);\n    }\n    /**\n     * Fetch a TaskInstance\n     *\n     * @param callback - Callback to handle processed record\n     *\n     * @returns Resolves to processed TaskInstance\n     */\n    fetch(callback) {\n        return this._proxy.fetch(callback);\n    }\n    update(params, callback) {\n        return this._proxy.update(params, callback);\n    }\n    /**\n     * Access the reservations.\n     */\n    reservations() {\n        return this._proxy.reservations;\n    }\n    /**\n     * Provide a user-friendly representation\n     *\n     * @returns Object\n     */\n    toJSON() {\n        return {\n            accountSid: this.accountSid,\n            age: this.age,\n            assignmentStatus: this.assignmentStatus,\n            attributes: this.attributes,\n            addons: this.addons,\n            dateCreated: this.dateCreated,\n            dateUpdated: this.dateUpdated,\n            taskQueueEnteredDate: this.taskQueueEnteredDate,\n            priority: this.priority,\n            reason: this.reason,\n            sid: this.sid,\n            taskQueueSid: this.taskQueueSid,\n            taskQueueFriendlyName: this.taskQueueFriendlyName,\n            taskChannelSid: this.taskChannelSid,\n            taskChannelUniqueName: this.taskChannelUniqueName,\n            timeout: this.timeout,\n            workflowSid: this.workflowSid,\n            workflowFriendlyName: this.workflowFriendlyName,\n            workspaceSid: this.workspaceSid,\n            url: this.url,\n            links: this.links,\n        };\n    }\n    [util_1.inspect.custom](_depth, options) {\n        return (0, util_1.inspect)(this.toJSON(), options);\n    }\n}\nexports.TaskInstance = TaskInstance;\nfunction TaskListInstance(version, workspaceSid) {\n    if (!(0, utility_1.isValidPathParam)(workspaceSid)) {\n        throw new Error(\"Parameter 'workspaceSid' is not valid.\");\n    }\n    const instance = ((sid) => instance.get(sid));\n    instance.get = function get(sid) {\n        return new TaskContextImpl(version, workspaceSid, sid);\n    };\n    instance._version = version;\n    instance._solution = { workspaceSid };\n    instance._uri = `/Workspaces/${workspaceSid}/Tasks`;\n    instance.create = function create(params, callback) {\n        if (params instanceof Function) {\n            callback = params;\n            params = {};\n        }\n        else {\n            params = params || {};\n        }\n        let data = {};\n        if (params[\"timeout\"] !== undefined)\n            data[\"Timeout\"] = params[\"timeout\"];\n        if (params[\"priority\"] !== undefined)\n            data[\"Priority\"] = params[\"priority\"];\n        if (params[\"taskChannel\"] !== undefined)\n            data[\"TaskChannel\"] = params[\"taskChannel\"];\n        if (params[\"workflowSid\"] !== undefined)\n            data[\"WorkflowSid\"] = params[\"workflowSid\"];\n        if (params[\"attributes\"] !== undefined)\n            data[\"Attributes\"] = params[\"attributes\"];\n        const headers = {};\n        headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n        let operationVersion = version, operationPromise = operationVersion.create({\n            uri: instance._uri,\n            method: \"post\",\n            data,\n            headers,\n        });\n        operationPromise = operationPromise.then((payload) => new TaskInstance(operationVersion, payload, instance._solution.workspaceSid));\n        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n        return operationPromise;\n    };\n    instance.page = function page(params, callback) {\n        if (params instanceof Function) {\n            callback = params;\n            params = {};\n        }\n        else {\n            params = params || {};\n        }\n        let data = {};\n        if (params[\"priority\"] !== undefined)\n            data[\"Priority\"] = params[\"priority\"];\n        if (params[\"assignmentStatus\"] !== undefined)\n            data[\"AssignmentStatus\"] = serialize.map(params[\"assignmentStatus\"], (e) => e);\n        if (params[\"workflowSid\"] !== undefined)\n            data[\"WorkflowSid\"] = params[\"workflowSid\"];\n        if (params[\"workflowName\"] !== undefined)\n            data[\"WorkflowName\"] = params[\"workflowName\"];\n        if (params[\"taskQueueSid\"] !== undefined)\n            data[\"TaskQueueSid\"] = params[\"taskQueueSid\"];\n        if (params[\"taskQueueName\"] !== undefined)\n            data[\"TaskQueueName\"] = params[\"taskQueueName\"];\n        if (params[\"evaluateTaskAttributes\"] !== undefined)\n            data[\"EvaluateTaskAttributes\"] = params[\"evaluateTaskAttributes\"];\n        if (params[\"ordering\"] !== undefined)\n            data[\"Ordering\"] = params[\"ordering\"];\n        if (params[\"hasAddons\"] !== undefined)\n            data[\"HasAddons\"] = serialize.bool(params[\"hasAddons\"]);\n        if (params[\"pageSize\"] !== undefined)\n            data[\"PageSize\"] = params[\"pageSize\"];\n        if (params.pageNumber !== undefined)\n            data[\"Page\"] = params.pageNumber;\n        if (params.pageToken !== undefined)\n            data[\"PageToken\"] = params.pageToken;\n        const headers = {};\n        let operationVersion = version, operationPromise = operationVersion.page({\n            uri: instance._uri,\n            method: \"get\",\n            params: data,\n            headers,\n        });\n        operationPromise = operationPromise.then((payload) => new TaskPage(operationVersion, payload, instance._solution));\n        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n        return operationPromise;\n    };\n    instance.each = instance._version.each;\n    instance.list = instance._version.list;\n    instance.getPage = function getPage(targetUrl, callback) {\n        const operationPromise = instance._version._domain.twilio.request({\n            method: \"get\",\n            uri: targetUrl,\n        });\n        let pagePromise = operationPromise.then((payload) => new TaskPage(instance._version, payload, instance._solution));\n        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);\n        return pagePromise;\n    };\n    instance.toJSON = function toJSON() {\n        return instance._solution;\n    };\n    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {\n        return (0, util_1.inspect)(instance.toJSON(), options);\n    };\n    return instance;\n}\nexports.TaskListInstance = TaskListInstance;\nclass TaskPage extends Page_1.default {\n    /**\n     * Initialize the TaskPage\n     *\n     * @param version - Version of the resource\n     * @param response - Response from the API\n     * @param solution - Path solution\n     */\n    constructor(version, response, solution) {\n        super(version, response, solution);\n    }\n    /**\n     * Build an instance of TaskInstance\n     *\n     * @param payload - Payload response from the API\n     */\n    getInstance(payload) {\n        return new TaskInstance(this._version, payload, this._solution.workspaceSid);\n    }\n    [util_1.inspect.custom](depth, options) {\n        return (0, util_1.inspect)(this.toJSON(), options);\n    }\n}\nexports.TaskPage = TaskPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}