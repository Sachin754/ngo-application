{"ast":null,"code":"\"use strict\";\n\n/*\n * This code was generated by\n * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __\n *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\\ | |___ |__/ |__|  | |  | |__/\n *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \\| |___ |  \\ |  |  | |__| |  \\\n *\n * Twilio - Routes\n * This is the public Twilio REST API.\n *\n * NOTE: This class is auto generated by OpenAPI Generator.\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TrunkListInstance = exports.TrunkInstance = exports.TrunkContextImpl = void 0;\nconst util_1 = require(\"util\");\nconst deserialize = require(\"../../../base/deserialize\");\nconst serialize = require(\"../../../base/serialize\");\nconst utility_1 = require(\"../../../base/utility\");\nclass TrunkContextImpl {\n  constructor(_version, sipTrunkDomain) {\n    this._version = _version;\n    if (!(0, utility_1.isValidPathParam)(sipTrunkDomain)) {\n      throw new Error(\"Parameter 'sipTrunkDomain' is not valid.\");\n    }\n    this._solution = {\n      sipTrunkDomain\n    };\n    this._uri = `/Trunks/${sipTrunkDomain}`;\n  }\n  fetch(callback) {\n    const instance = this;\n    let operationVersion = instance._version,\n      operationPromise = operationVersion.fetch({\n        uri: instance._uri,\n        method: \"get\"\n      });\n    operationPromise = operationPromise.then(payload => new TrunkInstance(operationVersion, payload, instance._solution.sipTrunkDomain));\n    operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n    return operationPromise;\n  }\n  update(params, callback) {\n    if (params instanceof Function) {\n      callback = params;\n      params = {};\n    } else {\n      params = params || {};\n    }\n    let data = {};\n    if (params[\"voiceRegion\"] !== undefined) data[\"VoiceRegion\"] = params[\"voiceRegion\"];\n    if (params[\"friendlyName\"] !== undefined) data[\"FriendlyName\"] = params[\"friendlyName\"];\n    const headers = {};\n    headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n    const instance = this;\n    let operationVersion = instance._version,\n      operationPromise = operationVersion.update({\n        uri: instance._uri,\n        method: \"post\",\n        data,\n        headers\n      });\n    operationPromise = operationPromise.then(payload => new TrunkInstance(operationVersion, payload, instance._solution.sipTrunkDomain));\n    operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n    return operationPromise;\n  }\n  /**\n   * Provide a user-friendly representation\n   *\n   * @returns Object\n   */\n  toJSON() {\n    return this._solution;\n  }\n  [util_1.inspect.custom](_depth, options) {\n    return (0, util_1.inspect)(this.toJSON(), options);\n  }\n}\nexports.TrunkContextImpl = TrunkContextImpl;\nclass TrunkInstance {\n  constructor(_version, payload, sipTrunkDomain) {\n    this._version = _version;\n    this.sipTrunkDomain = payload.sip_trunk_domain;\n    this.url = payload.url;\n    this.sid = payload.sid;\n    this.accountSid = payload.account_sid;\n    this.friendlyName = payload.friendly_name;\n    this.voiceRegion = payload.voice_region;\n    this.dateCreated = deserialize.iso8601DateTime(payload.date_created);\n    this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);\n    this._solution = {\n      sipTrunkDomain: sipTrunkDomain || this.sipTrunkDomain\n    };\n  }\n  get _proxy() {\n    this._context = this._context || new TrunkContextImpl(this._version, this._solution.sipTrunkDomain);\n    return this._context;\n  }\n  /**\n   * Fetch a TrunkInstance\n   *\n   * @param callback - Callback to handle processed record\n   *\n   * @returns Resolves to processed TrunkInstance\n   */\n  fetch(callback) {\n    return this._proxy.fetch(callback);\n  }\n  update(params, callback) {\n    return this._proxy.update(params, callback);\n  }\n  /**\n   * Provide a user-friendly representation\n   *\n   * @returns Object\n   */\n  toJSON() {\n    return {\n      sipTrunkDomain: this.sipTrunkDomain,\n      url: this.url,\n      sid: this.sid,\n      accountSid: this.accountSid,\n      friendlyName: this.friendlyName,\n      voiceRegion: this.voiceRegion,\n      dateCreated: this.dateCreated,\n      dateUpdated: this.dateUpdated\n    };\n  }\n  [util_1.inspect.custom](_depth, options) {\n    return (0, util_1.inspect)(this.toJSON(), options);\n  }\n}\nexports.TrunkInstance = TrunkInstance;\nfunction TrunkListInstance(version) {\n  const instance = sipTrunkDomain => instance.get(sipTrunkDomain);\n  instance.get = function get(sipTrunkDomain) {\n    return new TrunkContextImpl(version, sipTrunkDomain);\n  };\n  instance._version = version;\n  instance._solution = {};\n  instance._uri = ``;\n  instance.toJSON = function toJSON() {\n    return instance._solution;\n  };\n  instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {\n    return (0, util_1.inspect)(instance.toJSON(), options);\n  };\n  return instance;\n}\nexports.TrunkListInstance = TrunkListInstance;","map":{"version":3,"names":["Object","defineProperty","exports","value","TrunkListInstance","TrunkInstance","TrunkContextImpl","util_1","require","deserialize","serialize","utility_1","constructor","_version","sipTrunkDomain","isValidPathParam","Error","_solution","_uri","fetch","callback","instance","operationVersion","operationPromise","uri","method","then","payload","setPromiseCallback","update","params","Function","data","undefined","headers","toJSON","inspect","custom","_depth","options","sip_trunk_domain","url","sid","accountSid","account_sid","friendlyName","friendly_name","voiceRegion","voice_region","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","_proxy","_context","version","get","inspectImpl"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/routes/v2/trunk.js"],"sourcesContent":["\"use strict\";\n/*\n * This code was generated by\n * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __\n *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\\ | |___ |__/ |__|  | |  | |__/\n *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \\| |___ |  \\ |  |  | |__| |  \\\n *\n * Twilio - Routes\n * This is the public Twilio REST API.\n *\n * NOTE: This class is auto generated by OpenAPI Generator.\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TrunkListInstance = exports.TrunkInstance = exports.TrunkContextImpl = void 0;\nconst util_1 = require(\"util\");\nconst deserialize = require(\"../../../base/deserialize\");\nconst serialize = require(\"../../../base/serialize\");\nconst utility_1 = require(\"../../../base/utility\");\nclass TrunkContextImpl {\n    constructor(_version, sipTrunkDomain) {\n        this._version = _version;\n        if (!(0, utility_1.isValidPathParam)(sipTrunkDomain)) {\n            throw new Error(\"Parameter 'sipTrunkDomain' is not valid.\");\n        }\n        this._solution = { sipTrunkDomain };\n        this._uri = `/Trunks/${sipTrunkDomain}`;\n    }\n    fetch(callback) {\n        const instance = this;\n        let operationVersion = instance._version, operationPromise = operationVersion.fetch({\n            uri: instance._uri,\n            method: \"get\",\n        });\n        operationPromise = operationPromise.then((payload) => new TrunkInstance(operationVersion, payload, instance._solution.sipTrunkDomain));\n        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n        return operationPromise;\n    }\n    update(params, callback) {\n        if (params instanceof Function) {\n            callback = params;\n            params = {};\n        }\n        else {\n            params = params || {};\n        }\n        let data = {};\n        if (params[\"voiceRegion\"] !== undefined)\n            data[\"VoiceRegion\"] = params[\"voiceRegion\"];\n        if (params[\"friendlyName\"] !== undefined)\n            data[\"FriendlyName\"] = params[\"friendlyName\"];\n        const headers = {};\n        headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n        const instance = this;\n        let operationVersion = instance._version, operationPromise = operationVersion.update({\n            uri: instance._uri,\n            method: \"post\",\n            data,\n            headers,\n        });\n        operationPromise = operationPromise.then((payload) => new TrunkInstance(operationVersion, payload, instance._solution.sipTrunkDomain));\n        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n        return operationPromise;\n    }\n    /**\n     * Provide a user-friendly representation\n     *\n     * @returns Object\n     */\n    toJSON() {\n        return this._solution;\n    }\n    [util_1.inspect.custom](_depth, options) {\n        return (0, util_1.inspect)(this.toJSON(), options);\n    }\n}\nexports.TrunkContextImpl = TrunkContextImpl;\nclass TrunkInstance {\n    constructor(_version, payload, sipTrunkDomain) {\n        this._version = _version;\n        this.sipTrunkDomain = payload.sip_trunk_domain;\n        this.url = payload.url;\n        this.sid = payload.sid;\n        this.accountSid = payload.account_sid;\n        this.friendlyName = payload.friendly_name;\n        this.voiceRegion = payload.voice_region;\n        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);\n        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);\n        this._solution = { sipTrunkDomain: sipTrunkDomain || this.sipTrunkDomain };\n    }\n    get _proxy() {\n        this._context =\n            this._context ||\n                new TrunkContextImpl(this._version, this._solution.sipTrunkDomain);\n        return this._context;\n    }\n    /**\n     * Fetch a TrunkInstance\n     *\n     * @param callback - Callback to handle processed record\n     *\n     * @returns Resolves to processed TrunkInstance\n     */\n    fetch(callback) {\n        return this._proxy.fetch(callback);\n    }\n    update(params, callback) {\n        return this._proxy.update(params, callback);\n    }\n    /**\n     * Provide a user-friendly representation\n     *\n     * @returns Object\n     */\n    toJSON() {\n        return {\n            sipTrunkDomain: this.sipTrunkDomain,\n            url: this.url,\n            sid: this.sid,\n            accountSid: this.accountSid,\n            friendlyName: this.friendlyName,\n            voiceRegion: this.voiceRegion,\n            dateCreated: this.dateCreated,\n            dateUpdated: this.dateUpdated,\n        };\n    }\n    [util_1.inspect.custom](_depth, options) {\n        return (0, util_1.inspect)(this.toJSON(), options);\n    }\n}\nexports.TrunkInstance = TrunkInstance;\nfunction TrunkListInstance(version) {\n    const instance = ((sipTrunkDomain) => instance.get(sipTrunkDomain));\n    instance.get = function get(sipTrunkDomain) {\n        return new TrunkContextImpl(version, sipTrunkDomain);\n    };\n    instance._version = version;\n    instance._solution = {};\n    instance._uri = ``;\n    instance.toJSON = function toJSON() {\n        return instance._solution;\n    };\n    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {\n        return (0, util_1.inspect)(instance.toJSON(), options);\n    };\n    return instance;\n}\nexports.TrunkListInstance = TrunkListInstance;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,iBAAiB,GAAGF,OAAO,CAACG,aAAa,GAAGH,OAAO,CAACI,gBAAgB,GAAG,KAAK,CAAC;AACrF,MAAMC,MAAM,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC9B,MAAMC,WAAW,GAAGD,OAAO,CAAC,2BAA2B,CAAC;AACxD,MAAME,SAAS,GAAGF,OAAO,CAAC,yBAAyB,CAAC;AACpD,MAAMG,SAAS,GAAGH,OAAO,CAAC,uBAAuB,CAAC;AAClD,MAAMF,gBAAgB,CAAC;EACnBM,WAAWA,CAACC,QAAQ,EAAEC,cAAc,EAAE;IAClC,IAAI,CAACD,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAAC,CAAC,CAAC,EAAEF,SAAS,CAACI,gBAAgB,EAAED,cAAc,CAAC,EAAE;MAClD,MAAM,IAAIE,KAAK,CAAC,0CAA0C,CAAC;IAC/D;IACA,IAAI,CAACC,SAAS,GAAG;MAAEH;IAAe,CAAC;IACnC,IAAI,CAACI,IAAI,GAAI,WAAUJ,cAAe,EAAC;EAC3C;EACAK,KAAKA,CAACC,QAAQ,EAAE;IACZ,MAAMC,QAAQ,GAAG,IAAI;IACrB,IAAIC,gBAAgB,GAAGD,QAAQ,CAACR,QAAQ;MAAEU,gBAAgB,GAAGD,gBAAgB,CAACH,KAAK,CAAC;QAChFK,GAAG,EAAEH,QAAQ,CAACH,IAAI;QAClBO,MAAM,EAAE;MACZ,CAAC,CAAC;IACFF,gBAAgB,GAAGA,gBAAgB,CAACG,IAAI,CAAEC,OAAO,IAAK,IAAItB,aAAa,CAACiB,gBAAgB,EAAEK,OAAO,EAAEN,QAAQ,CAACJ,SAAS,CAACH,cAAc,CAAC,CAAC;IACtIS,gBAAgB,GAAGF,QAAQ,CAACR,QAAQ,CAACe,kBAAkB,CAACL,gBAAgB,EAAEH,QAAQ,CAAC;IACnF,OAAOG,gBAAgB;EAC3B;EACAM,MAAMA,CAACC,MAAM,EAAEV,QAAQ,EAAE;IACrB,IAAIU,MAAM,YAAYC,QAAQ,EAAE;MAC5BX,QAAQ,GAAGU,MAAM;MACjBA,MAAM,GAAG,CAAC,CAAC;IACf,CAAC,MACI;MACDA,MAAM,GAAGA,MAAM,IAAI,CAAC,CAAC;IACzB;IACA,IAAIE,IAAI,GAAG,CAAC,CAAC;IACb,IAAIF,MAAM,CAAC,aAAa,CAAC,KAAKG,SAAS,EACnCD,IAAI,CAAC,aAAa,CAAC,GAAGF,MAAM,CAAC,aAAa,CAAC;IAC/C,IAAIA,MAAM,CAAC,cAAc,CAAC,KAAKG,SAAS,EACpCD,IAAI,CAAC,cAAc,CAAC,GAAGF,MAAM,CAAC,cAAc,CAAC;IACjD,MAAMI,OAAO,GAAG,CAAC,CAAC;IAClBA,OAAO,CAAC,cAAc,CAAC,GAAG,mCAAmC;IAC7D,MAAMb,QAAQ,GAAG,IAAI;IACrB,IAAIC,gBAAgB,GAAGD,QAAQ,CAACR,QAAQ;MAAEU,gBAAgB,GAAGD,gBAAgB,CAACO,MAAM,CAAC;QACjFL,GAAG,EAAEH,QAAQ,CAACH,IAAI;QAClBO,MAAM,EAAE,MAAM;QACdO,IAAI;QACJE;MACJ,CAAC,CAAC;IACFX,gBAAgB,GAAGA,gBAAgB,CAACG,IAAI,CAAEC,OAAO,IAAK,IAAItB,aAAa,CAACiB,gBAAgB,EAAEK,OAAO,EAAEN,QAAQ,CAACJ,SAAS,CAACH,cAAc,CAAC,CAAC;IACtIS,gBAAgB,GAAGF,QAAQ,CAACR,QAAQ,CAACe,kBAAkB,CAACL,gBAAgB,EAAEH,QAAQ,CAAC;IACnF,OAAOG,gBAAgB;EAC3B;EACA;AACJ;AACA;AACA;AACA;EACIY,MAAMA,CAAA,EAAG;IACL,OAAO,IAAI,CAAClB,SAAS;EACzB;EACA,CAACV,MAAM,CAAC6B,OAAO,CAACC,MAAM,EAAEC,MAAM,EAAEC,OAAO,EAAE;IACrC,OAAO,CAAC,CAAC,EAAEhC,MAAM,CAAC6B,OAAO,EAAE,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;EACtD;AACJ;AACArC,OAAO,CAACI,gBAAgB,GAAGA,gBAAgB;AAC3C,MAAMD,aAAa,CAAC;EAChBO,WAAWA,CAACC,QAAQ,EAAEc,OAAO,EAAEb,cAAc,EAAE;IAC3C,IAAI,CAACD,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,cAAc,GAAGa,OAAO,CAACa,gBAAgB;IAC9C,IAAI,CAACC,GAAG,GAAGd,OAAO,CAACc,GAAG;IACtB,IAAI,CAACC,GAAG,GAAGf,OAAO,CAACe,GAAG;IACtB,IAAI,CAACC,UAAU,GAAGhB,OAAO,CAACiB,WAAW;IACrC,IAAI,CAACC,YAAY,GAAGlB,OAAO,CAACmB,aAAa;IACzC,IAAI,CAACC,WAAW,GAAGpB,OAAO,CAACqB,YAAY;IACvC,IAAI,CAACC,WAAW,GAAGxC,WAAW,CAACyC,eAAe,CAACvB,OAAO,CAACwB,YAAY,CAAC;IACpE,IAAI,CAACC,WAAW,GAAG3C,WAAW,CAACyC,eAAe,CAACvB,OAAO,CAAC0B,YAAY,CAAC;IACpE,IAAI,CAACpC,SAAS,GAAG;MAAEH,cAAc,EAAEA,cAAc,IAAI,IAAI,CAACA;IAAe,CAAC;EAC9E;EACA,IAAIwC,MAAMA,CAAA,EAAG;IACT,IAAI,CAACC,QAAQ,GACT,IAAI,CAACA,QAAQ,IACT,IAAIjD,gBAAgB,CAAC,IAAI,CAACO,QAAQ,EAAE,IAAI,CAACI,SAAS,CAACH,cAAc,CAAC;IAC1E,OAAO,IAAI,CAACyC,QAAQ;EACxB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIpC,KAAKA,CAACC,QAAQ,EAAE;IACZ,OAAO,IAAI,CAACkC,MAAM,CAACnC,KAAK,CAACC,QAAQ,CAAC;EACtC;EACAS,MAAMA,CAACC,MAAM,EAAEV,QAAQ,EAAE;IACrB,OAAO,IAAI,CAACkC,MAAM,CAACzB,MAAM,CAACC,MAAM,EAAEV,QAAQ,CAAC;EAC/C;EACA;AACJ;AACA;AACA;AACA;EACIe,MAAMA,CAAA,EAAG;IACL,OAAO;MACHrB,cAAc,EAAE,IAAI,CAACA,cAAc;MACnC2B,GAAG,EAAE,IAAI,CAACA,GAAG;MACbC,GAAG,EAAE,IAAI,CAACA,GAAG;MACbC,UAAU,EAAE,IAAI,CAACA,UAAU;MAC3BE,YAAY,EAAE,IAAI,CAACA,YAAY;MAC/BE,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BE,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BG,WAAW,EAAE,IAAI,CAACA;IACtB,CAAC;EACL;EACA,CAAC7C,MAAM,CAAC6B,OAAO,CAACC,MAAM,EAAEC,MAAM,EAAEC,OAAO,EAAE;IACrC,OAAO,CAAC,CAAC,EAAEhC,MAAM,CAAC6B,OAAO,EAAE,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;EACtD;AACJ;AACArC,OAAO,CAACG,aAAa,GAAGA,aAAa;AACrC,SAASD,iBAAiBA,CAACoD,OAAO,EAAE;EAChC,MAAMnC,QAAQ,GAAKP,cAAc,IAAKO,QAAQ,CAACoC,GAAG,CAAC3C,cAAc,CAAE;EACnEO,QAAQ,CAACoC,GAAG,GAAG,SAASA,GAAGA,CAAC3C,cAAc,EAAE;IACxC,OAAO,IAAIR,gBAAgB,CAACkD,OAAO,EAAE1C,cAAc,CAAC;EACxD,CAAC;EACDO,QAAQ,CAACR,QAAQ,GAAG2C,OAAO;EAC3BnC,QAAQ,CAACJ,SAAS,GAAG,CAAC,CAAC;EACvBI,QAAQ,CAACH,IAAI,GAAI,EAAC;EAClBG,QAAQ,CAACc,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;IAChC,OAAOd,QAAQ,CAACJ,SAAS;EAC7B,CAAC;EACDI,QAAQ,CAACd,MAAM,CAAC6B,OAAO,CAACC,MAAM,CAAC,GAAG,SAASqB,WAAWA,CAACpB,MAAM,EAAEC,OAAO,EAAE;IACpE,OAAO,CAAC,CAAC,EAAEhC,MAAM,CAAC6B,OAAO,EAAEf,QAAQ,CAACc,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;EAC1D,CAAC;EACD,OAAOlB,QAAQ;AACnB;AACAnB,OAAO,CAACE,iBAAiB,GAAGA,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}