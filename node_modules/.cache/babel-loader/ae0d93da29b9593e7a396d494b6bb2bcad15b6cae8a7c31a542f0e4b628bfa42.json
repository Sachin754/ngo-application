{"ast":null,"code":"\"use strict\";\n\n/*\n * This code was generated by\n * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __\n *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\\ | |___ |__/ |__|  | |  | |__/\n *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \\| |___ |  \\ |  |  | |__| |  \\\n *\n * Twilio - Api\n * This is the public Twilio REST API.\n *\n * NOTE: This class is auto generated by OpenAPI Generator.\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AccountPage = exports.AccountListInstance = exports.AccountInstance = exports.AccountContextImpl = void 0;\nconst util_1 = require(\"util\");\nconst Page_1 = __importDefault(require(\"../../../base/Page\"));\nconst deserialize = require(\"../../../base/deserialize\");\nconst serialize = require(\"../../../base/serialize\");\nconst utility_1 = require(\"../../../base/utility\");\nconst address_1 = require(\"./account/address\");\nconst application_1 = require(\"./account/application\");\nconst authorizedConnectApp_1 = require(\"./account/authorizedConnectApp\");\nconst availablePhoneNumberCountry_1 = require(\"./account/availablePhoneNumberCountry\");\nconst balance_1 = require(\"./account/balance\");\nconst call_1 = require(\"./account/call\");\nconst conference_1 = require(\"./account/conference\");\nconst connectApp_1 = require(\"./account/connectApp\");\nconst incomingPhoneNumber_1 = require(\"./account/incomingPhoneNumber\");\nconst key_1 = require(\"./account/key\");\nconst message_1 = require(\"./account/message\");\nconst newKey_1 = require(\"./account/newKey\");\nconst newSigningKey_1 = require(\"./account/newSigningKey\");\nconst notification_1 = require(\"./account/notification\");\nconst outgoingCallerId_1 = require(\"./account/outgoingCallerId\");\nconst queue_1 = require(\"./account/queue\");\nconst recording_1 = require(\"./account/recording\");\nconst shortCode_1 = require(\"./account/shortCode\");\nconst signingKey_1 = require(\"./account/signingKey\");\nconst sip_1 = require(\"./account/sip\");\nconst token_1 = require(\"./account/token\");\nconst transcription_1 = require(\"./account/transcription\");\nconst usage_1 = require(\"./account/usage\");\nconst validationRequest_1 = require(\"./account/validationRequest\");\nclass AccountContextImpl {\n  constructor(_version, sid) {\n    this._version = _version;\n    if (!(0, utility_1.isValidPathParam)(sid)) {\n      throw new Error(\"Parameter 'sid' is not valid.\");\n    }\n    this._solution = {\n      sid\n    };\n    this._uri = `/Accounts/${sid}.json`;\n  }\n  get addresses() {\n    this._addresses = this._addresses || (0, address_1.AddressListInstance)(this._version, this._solution.sid);\n    return this._addresses;\n  }\n  get applications() {\n    this._applications = this._applications || (0, application_1.ApplicationListInstance)(this._version, this._solution.sid);\n    return this._applications;\n  }\n  get authorizedConnectApps() {\n    this._authorizedConnectApps = this._authorizedConnectApps || (0, authorizedConnectApp_1.AuthorizedConnectAppListInstance)(this._version, this._solution.sid);\n    return this._authorizedConnectApps;\n  }\n  get availablePhoneNumbers() {\n    this._availablePhoneNumbers = this._availablePhoneNumbers || (0, availablePhoneNumberCountry_1.AvailablePhoneNumberCountryListInstance)(this._version, this._solution.sid);\n    return this._availablePhoneNumbers;\n  }\n  get balance() {\n    this._balance = this._balance || (0, balance_1.BalanceListInstance)(this._version, this._solution.sid);\n    return this._balance;\n  }\n  get calls() {\n    this._calls = this._calls || (0, call_1.CallListInstance)(this._version, this._solution.sid);\n    return this._calls;\n  }\n  get conferences() {\n    this._conferences = this._conferences || (0, conference_1.ConferenceListInstance)(this._version, this._solution.sid);\n    return this._conferences;\n  }\n  get connectApps() {\n    this._connectApps = this._connectApps || (0, connectApp_1.ConnectAppListInstance)(this._version, this._solution.sid);\n    return this._connectApps;\n  }\n  get incomingPhoneNumbers() {\n    this._incomingPhoneNumbers = this._incomingPhoneNumbers || (0, incomingPhoneNumber_1.IncomingPhoneNumberListInstance)(this._version, this._solution.sid);\n    return this._incomingPhoneNumbers;\n  }\n  get keys() {\n    this._keys = this._keys || (0, key_1.KeyListInstance)(this._version, this._solution.sid);\n    return this._keys;\n  }\n  get messages() {\n    this._messages = this._messages || (0, message_1.MessageListInstance)(this._version, this._solution.sid);\n    return this._messages;\n  }\n  get newKeys() {\n    this._newKeys = this._newKeys || (0, newKey_1.NewKeyListInstance)(this._version, this._solution.sid);\n    return this._newKeys;\n  }\n  get newSigningKeys() {\n    this._newSigningKeys = this._newSigningKeys || (0, newSigningKey_1.NewSigningKeyListInstance)(this._version, this._solution.sid);\n    return this._newSigningKeys;\n  }\n  get notifications() {\n    this._notifications = this._notifications || (0, notification_1.NotificationListInstance)(this._version, this._solution.sid);\n    return this._notifications;\n  }\n  get outgoingCallerIds() {\n    this._outgoingCallerIds = this._outgoingCallerIds || (0, outgoingCallerId_1.OutgoingCallerIdListInstance)(this._version, this._solution.sid);\n    return this._outgoingCallerIds;\n  }\n  get queues() {\n    this._queues = this._queues || (0, queue_1.QueueListInstance)(this._version, this._solution.sid);\n    return this._queues;\n  }\n  get recordings() {\n    this._recordings = this._recordings || (0, recording_1.RecordingListInstance)(this._version, this._solution.sid);\n    return this._recordings;\n  }\n  get shortCodes() {\n    this._shortCodes = this._shortCodes || (0, shortCode_1.ShortCodeListInstance)(this._version, this._solution.sid);\n    return this._shortCodes;\n  }\n  get signingKeys() {\n    this._signingKeys = this._signingKeys || (0, signingKey_1.SigningKeyListInstance)(this._version, this._solution.sid);\n    return this._signingKeys;\n  }\n  get sip() {\n    this._sip = this._sip || (0, sip_1.SipListInstance)(this._version, this._solution.sid);\n    return this._sip;\n  }\n  get tokens() {\n    this._tokens = this._tokens || (0, token_1.TokenListInstance)(this._version, this._solution.sid);\n    return this._tokens;\n  }\n  get transcriptions() {\n    this._transcriptions = this._transcriptions || (0, transcription_1.TranscriptionListInstance)(this._version, this._solution.sid);\n    return this._transcriptions;\n  }\n  get usage() {\n    this._usage = this._usage || (0, usage_1.UsageListInstance)(this._version, this._solution.sid);\n    return this._usage;\n  }\n  get validationRequests() {\n    this._validationRequests = this._validationRequests || (0, validationRequest_1.ValidationRequestListInstance)(this._version, this._solution.sid);\n    return this._validationRequests;\n  }\n  fetch(callback) {\n    const instance = this;\n    let operationVersion = instance._version,\n      operationPromise = operationVersion.fetch({\n        uri: instance._uri,\n        method: \"get\"\n      });\n    operationPromise = operationPromise.then(payload => new AccountInstance(operationVersion, payload, instance._solution.sid));\n    operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n    return operationPromise;\n  }\n  update(params, callback) {\n    if (params instanceof Function) {\n      callback = params;\n      params = {};\n    } else {\n      params = params || {};\n    }\n    let data = {};\n    if (params[\"friendlyName\"] !== undefined) data[\"FriendlyName\"] = params[\"friendlyName\"];\n    if (params[\"status\"] !== undefined) data[\"Status\"] = params[\"status\"];\n    const headers = {};\n    headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n    const instance = this;\n    let operationVersion = instance._version,\n      operationPromise = operationVersion.update({\n        uri: instance._uri,\n        method: \"post\",\n        data,\n        headers\n      });\n    operationPromise = operationPromise.then(payload => new AccountInstance(operationVersion, payload, instance._solution.sid));\n    operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n    return operationPromise;\n  }\n  /**\n   * Provide a user-friendly representation\n   *\n   * @returns Object\n   */\n  toJSON() {\n    return this._solution;\n  }\n  [util_1.inspect.custom](_depth, options) {\n    return (0, util_1.inspect)(this.toJSON(), options);\n  }\n}\nexports.AccountContextImpl = AccountContextImpl;\nclass AccountInstance {\n  constructor(_version, payload, sid) {\n    this._version = _version;\n    this.authToken = payload.auth_token;\n    this.dateCreated = deserialize.rfc2822DateTime(payload.date_created);\n    this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated);\n    this.friendlyName = payload.friendly_name;\n    this.ownerAccountSid = payload.owner_account_sid;\n    this.sid = payload.sid;\n    this.status = payload.status;\n    this.subresourceUris = payload.subresource_uris;\n    this.type = payload.type;\n    this.uri = payload.uri;\n    this._solution = {\n      sid: sid || this.sid\n    };\n  }\n  get _proxy() {\n    this._context = this._context || new AccountContextImpl(this._version, this._solution.sid);\n    return this._context;\n  }\n  /**\n   * Fetch a AccountInstance\n   *\n   * @param callback - Callback to handle processed record\n   *\n   * @returns Resolves to processed AccountInstance\n   */\n  fetch(callback) {\n    return this._proxy.fetch(callback);\n  }\n  update(params, callback) {\n    return this._proxy.update(params, callback);\n  }\n  /**\n   * Access the addresses.\n   */\n  addresses() {\n    return this._proxy.addresses;\n  }\n  /**\n   * Access the applications.\n   */\n  applications() {\n    return this._proxy.applications;\n  }\n  /**\n   * Access the authorizedConnectApps.\n   */\n  authorizedConnectApps() {\n    return this._proxy.authorizedConnectApps;\n  }\n  /**\n   * Access the availablePhoneNumbers.\n   */\n  availablePhoneNumbers() {\n    return this._proxy.availablePhoneNumbers;\n  }\n  /**\n   * Access the balance.\n   */\n  balance() {\n    return this._proxy.balance;\n  }\n  /**\n   * Access the calls.\n   */\n  calls() {\n    return this._proxy.calls;\n  }\n  /**\n   * Access the conferences.\n   */\n  conferences() {\n    return this._proxy.conferences;\n  }\n  /**\n   * Access the connectApps.\n   */\n  connectApps() {\n    return this._proxy.connectApps;\n  }\n  /**\n   * Access the incomingPhoneNumbers.\n   */\n  incomingPhoneNumbers() {\n    return this._proxy.incomingPhoneNumbers;\n  }\n  /**\n   * Access the keys.\n   */\n  keys() {\n    return this._proxy.keys;\n  }\n  /**\n   * Access the messages.\n   */\n  messages() {\n    return this._proxy.messages;\n  }\n  /**\n   * Access the newKeys.\n   */\n  newKeys() {\n    return this._proxy.newKeys;\n  }\n  /**\n   * Access the newSigningKeys.\n   */\n  newSigningKeys() {\n    return this._proxy.newSigningKeys;\n  }\n  /**\n   * Access the notifications.\n   */\n  notifications() {\n    return this._proxy.notifications;\n  }\n  /**\n   * Access the outgoingCallerIds.\n   */\n  outgoingCallerIds() {\n    return this._proxy.outgoingCallerIds;\n  }\n  /**\n   * Access the queues.\n   */\n  queues() {\n    return this._proxy.queues;\n  }\n  /**\n   * Access the recordings.\n   */\n  recordings() {\n    return this._proxy.recordings;\n  }\n  /**\n   * Access the shortCodes.\n   */\n  shortCodes() {\n    return this._proxy.shortCodes;\n  }\n  /**\n   * Access the signingKeys.\n   */\n  signingKeys() {\n    return this._proxy.signingKeys;\n  }\n  /**\n   * Access the sip.\n   */\n  sip() {\n    return this._proxy.sip;\n  }\n  /**\n   * Access the tokens.\n   */\n  tokens() {\n    return this._proxy.tokens;\n  }\n  /**\n   * Access the transcriptions.\n   */\n  transcriptions() {\n    return this._proxy.transcriptions;\n  }\n  /**\n   * Access the usage.\n   */\n  usage() {\n    return this._proxy.usage;\n  }\n  /**\n   * Access the validationRequests.\n   */\n  validationRequests() {\n    return this._proxy.validationRequests;\n  }\n  /**\n   * Provide a user-friendly representation\n   *\n   * @returns Object\n   */\n  toJSON() {\n    return {\n      authToken: this.authToken,\n      dateCreated: this.dateCreated,\n      dateUpdated: this.dateUpdated,\n      friendlyName: this.friendlyName,\n      ownerAccountSid: this.ownerAccountSid,\n      sid: this.sid,\n      status: this.status,\n      subresourceUris: this.subresourceUris,\n      type: this.type,\n      uri: this.uri\n    };\n  }\n  [util_1.inspect.custom](_depth, options) {\n    return (0, util_1.inspect)(this.toJSON(), options);\n  }\n}\nexports.AccountInstance = AccountInstance;\nfunction AccountListInstance(version) {\n  const instance = sid => instance.get(sid);\n  instance.get = function get(sid) {\n    return new AccountContextImpl(version, sid);\n  };\n  instance._version = version;\n  instance._solution = {};\n  instance._uri = `/Accounts.json`;\n  instance.create = function create(params, callback) {\n    if (params instanceof Function) {\n      callback = params;\n      params = {};\n    } else {\n      params = params || {};\n    }\n    let data = {};\n    if (params[\"friendlyName\"] !== undefined) data[\"FriendlyName\"] = params[\"friendlyName\"];\n    const headers = {};\n    headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n    let operationVersion = version,\n      operationPromise = operationVersion.create({\n        uri: instance._uri,\n        method: \"post\",\n        data,\n        headers\n      });\n    operationPromise = operationPromise.then(payload => new AccountInstance(operationVersion, payload));\n    operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n    return operationPromise;\n  };\n  instance.page = function page(params, callback) {\n    if (params instanceof Function) {\n      callback = params;\n      params = {};\n    } else {\n      params = params || {};\n    }\n    let data = {};\n    if (params[\"friendlyName\"] !== undefined) data[\"FriendlyName\"] = params[\"friendlyName\"];\n    if (params[\"status\"] !== undefined) data[\"Status\"] = params[\"status\"];\n    if (params[\"pageSize\"] !== undefined) data[\"PageSize\"] = params[\"pageSize\"];\n    if (params.pageNumber !== undefined) data[\"Page\"] = params.pageNumber;\n    if (params.pageToken !== undefined) data[\"PageToken\"] = params.pageToken;\n    const headers = {};\n    let operationVersion = version,\n      operationPromise = operationVersion.page({\n        uri: instance._uri,\n        method: \"get\",\n        params: data,\n        headers\n      });\n    operationPromise = operationPromise.then(payload => new AccountPage(operationVersion, payload, instance._solution));\n    operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n    return operationPromise;\n  };\n  instance.each = instance._version.each;\n  instance.list = instance._version.list;\n  instance.getPage = function getPage(targetUrl, callback) {\n    const operationPromise = instance._version._domain.twilio.request({\n      method: \"get\",\n      uri: targetUrl\n    });\n    let pagePromise = operationPromise.then(payload => new AccountPage(instance._version, payload, instance._solution));\n    pagePromise = instance._version.setPromiseCallback(pagePromise, callback);\n    return pagePromise;\n  };\n  instance.toJSON = function toJSON() {\n    return instance._solution;\n  };\n  instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {\n    return (0, util_1.inspect)(instance.toJSON(), options);\n  };\n  return instance;\n}\nexports.AccountListInstance = AccountListInstance;\nclass AccountPage extends Page_1.default {\n  /**\n   * Initialize the AccountPage\n   *\n   * @param version - Version of the resource\n   * @param response - Response from the API\n   * @param solution - Path solution\n   */\n  constructor(version, response, solution) {\n    super(version, response, solution);\n  }\n  /**\n   * Build an instance of AccountInstance\n   *\n   * @param payload - Payload response from the API\n   */\n  getInstance(payload) {\n    return new AccountInstance(this._version, payload);\n  }\n  [util_1.inspect.custom](depth, options) {\n    return (0, util_1.inspect)(this.toJSON(), options);\n  }\n}\nexports.AccountPage = AccountPage;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","AccountPage","AccountListInstance","AccountInstance","AccountContextImpl","util_1","require","Page_1","deserialize","serialize","utility_1","address_1","application_1","authorizedConnectApp_1","availablePhoneNumberCountry_1","balance_1","call_1","conference_1","connectApp_1","incomingPhoneNumber_1","key_1","message_1","newKey_1","newSigningKey_1","notification_1","outgoingCallerId_1","queue_1","recording_1","shortCode_1","signingKey_1","sip_1","token_1","transcription_1","usage_1","validationRequest_1","constructor","_version","sid","isValidPathParam","Error","_solution","_uri","addresses","_addresses","AddressListInstance","applications","_applications","ApplicationListInstance","authorizedConnectApps","_authorizedConnectApps","AuthorizedConnectAppListInstance","availablePhoneNumbers","_availablePhoneNumbers","AvailablePhoneNumberCountryListInstance","balance","_balance","BalanceListInstance","calls","_calls","CallListInstance","conferences","_conferences","ConferenceListInstance","connectApps","_connectApps","ConnectAppListInstance","incomingPhoneNumbers","_incomingPhoneNumbers","IncomingPhoneNumberListInstance","keys","_keys","KeyListInstance","messages","_messages","MessageListInstance","newKeys","_newKeys","NewKeyListInstance","newSigningKeys","_newSigningKeys","NewSigningKeyListInstance","notifications","_notifications","NotificationListInstance","outgoingCallerIds","_outgoingCallerIds","OutgoingCallerIdListInstance","queues","_queues","QueueListInstance","recordings","_recordings","RecordingListInstance","shortCodes","_shortCodes","ShortCodeListInstance","signingKeys","_signingKeys","SigningKeyListInstance","sip","_sip","SipListInstance","tokens","_tokens","TokenListInstance","transcriptions","_transcriptions","TranscriptionListInstance","usage","_usage","UsageListInstance","validationRequests","_validationRequests","ValidationRequestListInstance","fetch","callback","instance","operationVersion","operationPromise","uri","method","then","payload","setPromiseCallback","update","params","Function","data","undefined","headers","toJSON","inspect","custom","_depth","options","authToken","auth_token","dateCreated","rfc2822DateTime","date_created","dateUpdated","date_updated","friendlyName","friendly_name","ownerAccountSid","owner_account_sid","status","subresourceUris","subresource_uris","type","_proxy","_context","version","get","create","page","pageNumber","pageToken","each","list","getPage","targetUrl","_domain","twilio","request","pagePromise","inspectImpl","default","response","solution","getInstance","depth"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/api/v2010/account.js"],"sourcesContent":["\"use strict\";\n/*\n * This code was generated by\n * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __\n *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\\ | |___ |__/ |__|  | |  | |__/\n *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \\| |___ |  \\ |  |  | |__| |  \\\n *\n * Twilio - Api\n * This is the public Twilio REST API.\n *\n * NOTE: This class is auto generated by OpenAPI Generator.\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AccountPage = exports.AccountListInstance = exports.AccountInstance = exports.AccountContextImpl = void 0;\nconst util_1 = require(\"util\");\nconst Page_1 = __importDefault(require(\"../../../base/Page\"));\nconst deserialize = require(\"../../../base/deserialize\");\nconst serialize = require(\"../../../base/serialize\");\nconst utility_1 = require(\"../../../base/utility\");\nconst address_1 = require(\"./account/address\");\nconst application_1 = require(\"./account/application\");\nconst authorizedConnectApp_1 = require(\"./account/authorizedConnectApp\");\nconst availablePhoneNumberCountry_1 = require(\"./account/availablePhoneNumberCountry\");\nconst balance_1 = require(\"./account/balance\");\nconst call_1 = require(\"./account/call\");\nconst conference_1 = require(\"./account/conference\");\nconst connectApp_1 = require(\"./account/connectApp\");\nconst incomingPhoneNumber_1 = require(\"./account/incomingPhoneNumber\");\nconst key_1 = require(\"./account/key\");\nconst message_1 = require(\"./account/message\");\nconst newKey_1 = require(\"./account/newKey\");\nconst newSigningKey_1 = require(\"./account/newSigningKey\");\nconst notification_1 = require(\"./account/notification\");\nconst outgoingCallerId_1 = require(\"./account/outgoingCallerId\");\nconst queue_1 = require(\"./account/queue\");\nconst recording_1 = require(\"./account/recording\");\nconst shortCode_1 = require(\"./account/shortCode\");\nconst signingKey_1 = require(\"./account/signingKey\");\nconst sip_1 = require(\"./account/sip\");\nconst token_1 = require(\"./account/token\");\nconst transcription_1 = require(\"./account/transcription\");\nconst usage_1 = require(\"./account/usage\");\nconst validationRequest_1 = require(\"./account/validationRequest\");\nclass AccountContextImpl {\n    constructor(_version, sid) {\n        this._version = _version;\n        if (!(0, utility_1.isValidPathParam)(sid)) {\n            throw new Error(\"Parameter 'sid' is not valid.\");\n        }\n        this._solution = { sid };\n        this._uri = `/Accounts/${sid}.json`;\n    }\n    get addresses() {\n        this._addresses =\n            this._addresses || (0, address_1.AddressListInstance)(this._version, this._solution.sid);\n        return this._addresses;\n    }\n    get applications() {\n        this._applications =\n            this._applications ||\n                (0, application_1.ApplicationListInstance)(this._version, this._solution.sid);\n        return this._applications;\n    }\n    get authorizedConnectApps() {\n        this._authorizedConnectApps =\n            this._authorizedConnectApps ||\n                (0, authorizedConnectApp_1.AuthorizedConnectAppListInstance)(this._version, this._solution.sid);\n        return this._authorizedConnectApps;\n    }\n    get availablePhoneNumbers() {\n        this._availablePhoneNumbers =\n            this._availablePhoneNumbers ||\n                (0, availablePhoneNumberCountry_1.AvailablePhoneNumberCountryListInstance)(this._version, this._solution.sid);\n        return this._availablePhoneNumbers;\n    }\n    get balance() {\n        this._balance =\n            this._balance || (0, balance_1.BalanceListInstance)(this._version, this._solution.sid);\n        return this._balance;\n    }\n    get calls() {\n        this._calls =\n            this._calls || (0, call_1.CallListInstance)(this._version, this._solution.sid);\n        return this._calls;\n    }\n    get conferences() {\n        this._conferences =\n            this._conferences ||\n                (0, conference_1.ConferenceListInstance)(this._version, this._solution.sid);\n        return this._conferences;\n    }\n    get connectApps() {\n        this._connectApps =\n            this._connectApps ||\n                (0, connectApp_1.ConnectAppListInstance)(this._version, this._solution.sid);\n        return this._connectApps;\n    }\n    get incomingPhoneNumbers() {\n        this._incomingPhoneNumbers =\n            this._incomingPhoneNumbers ||\n                (0, incomingPhoneNumber_1.IncomingPhoneNumberListInstance)(this._version, this._solution.sid);\n        return this._incomingPhoneNumbers;\n    }\n    get keys() {\n        this._keys =\n            this._keys || (0, key_1.KeyListInstance)(this._version, this._solution.sid);\n        return this._keys;\n    }\n    get messages() {\n        this._messages =\n            this._messages || (0, message_1.MessageListInstance)(this._version, this._solution.sid);\n        return this._messages;\n    }\n    get newKeys() {\n        this._newKeys =\n            this._newKeys || (0, newKey_1.NewKeyListInstance)(this._version, this._solution.sid);\n        return this._newKeys;\n    }\n    get newSigningKeys() {\n        this._newSigningKeys =\n            this._newSigningKeys ||\n                (0, newSigningKey_1.NewSigningKeyListInstance)(this._version, this._solution.sid);\n        return this._newSigningKeys;\n    }\n    get notifications() {\n        this._notifications =\n            this._notifications ||\n                (0, notification_1.NotificationListInstance)(this._version, this._solution.sid);\n        return this._notifications;\n    }\n    get outgoingCallerIds() {\n        this._outgoingCallerIds =\n            this._outgoingCallerIds ||\n                (0, outgoingCallerId_1.OutgoingCallerIdListInstance)(this._version, this._solution.sid);\n        return this._outgoingCallerIds;\n    }\n    get queues() {\n        this._queues =\n            this._queues || (0, queue_1.QueueListInstance)(this._version, this._solution.sid);\n        return this._queues;\n    }\n    get recordings() {\n        this._recordings =\n            this._recordings ||\n                (0, recording_1.RecordingListInstance)(this._version, this._solution.sid);\n        return this._recordings;\n    }\n    get shortCodes() {\n        this._shortCodes =\n            this._shortCodes ||\n                (0, shortCode_1.ShortCodeListInstance)(this._version, this._solution.sid);\n        return this._shortCodes;\n    }\n    get signingKeys() {\n        this._signingKeys =\n            this._signingKeys ||\n                (0, signingKey_1.SigningKeyListInstance)(this._version, this._solution.sid);\n        return this._signingKeys;\n    }\n    get sip() {\n        this._sip = this._sip || (0, sip_1.SipListInstance)(this._version, this._solution.sid);\n        return this._sip;\n    }\n    get tokens() {\n        this._tokens =\n            this._tokens || (0, token_1.TokenListInstance)(this._version, this._solution.sid);\n        return this._tokens;\n    }\n    get transcriptions() {\n        this._transcriptions =\n            this._transcriptions ||\n                (0, transcription_1.TranscriptionListInstance)(this._version, this._solution.sid);\n        return this._transcriptions;\n    }\n    get usage() {\n        this._usage =\n            this._usage || (0, usage_1.UsageListInstance)(this._version, this._solution.sid);\n        return this._usage;\n    }\n    get validationRequests() {\n        this._validationRequests =\n            this._validationRequests ||\n                (0, validationRequest_1.ValidationRequestListInstance)(this._version, this._solution.sid);\n        return this._validationRequests;\n    }\n    fetch(callback) {\n        const instance = this;\n        let operationVersion = instance._version, operationPromise = operationVersion.fetch({\n            uri: instance._uri,\n            method: \"get\",\n        });\n        operationPromise = operationPromise.then((payload) => new AccountInstance(operationVersion, payload, instance._solution.sid));\n        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n        return operationPromise;\n    }\n    update(params, callback) {\n        if (params instanceof Function) {\n            callback = params;\n            params = {};\n        }\n        else {\n            params = params || {};\n        }\n        let data = {};\n        if (params[\"friendlyName\"] !== undefined)\n            data[\"FriendlyName\"] = params[\"friendlyName\"];\n        if (params[\"status\"] !== undefined)\n            data[\"Status\"] = params[\"status\"];\n        const headers = {};\n        headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n        const instance = this;\n        let operationVersion = instance._version, operationPromise = operationVersion.update({\n            uri: instance._uri,\n            method: \"post\",\n            data,\n            headers,\n        });\n        operationPromise = operationPromise.then((payload) => new AccountInstance(operationVersion, payload, instance._solution.sid));\n        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n        return operationPromise;\n    }\n    /**\n     * Provide a user-friendly representation\n     *\n     * @returns Object\n     */\n    toJSON() {\n        return this._solution;\n    }\n    [util_1.inspect.custom](_depth, options) {\n        return (0, util_1.inspect)(this.toJSON(), options);\n    }\n}\nexports.AccountContextImpl = AccountContextImpl;\nclass AccountInstance {\n    constructor(_version, payload, sid) {\n        this._version = _version;\n        this.authToken = payload.auth_token;\n        this.dateCreated = deserialize.rfc2822DateTime(payload.date_created);\n        this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated);\n        this.friendlyName = payload.friendly_name;\n        this.ownerAccountSid = payload.owner_account_sid;\n        this.sid = payload.sid;\n        this.status = payload.status;\n        this.subresourceUris = payload.subresource_uris;\n        this.type = payload.type;\n        this.uri = payload.uri;\n        this._solution = { sid: sid || this.sid };\n    }\n    get _proxy() {\n        this._context =\n            this._context ||\n                new AccountContextImpl(this._version, this._solution.sid);\n        return this._context;\n    }\n    /**\n     * Fetch a AccountInstance\n     *\n     * @param callback - Callback to handle processed record\n     *\n     * @returns Resolves to processed AccountInstance\n     */\n    fetch(callback) {\n        return this._proxy.fetch(callback);\n    }\n    update(params, callback) {\n        return this._proxy.update(params, callback);\n    }\n    /**\n     * Access the addresses.\n     */\n    addresses() {\n        return this._proxy.addresses;\n    }\n    /**\n     * Access the applications.\n     */\n    applications() {\n        return this._proxy.applications;\n    }\n    /**\n     * Access the authorizedConnectApps.\n     */\n    authorizedConnectApps() {\n        return this._proxy.authorizedConnectApps;\n    }\n    /**\n     * Access the availablePhoneNumbers.\n     */\n    availablePhoneNumbers() {\n        return this._proxy.availablePhoneNumbers;\n    }\n    /**\n     * Access the balance.\n     */\n    balance() {\n        return this._proxy.balance;\n    }\n    /**\n     * Access the calls.\n     */\n    calls() {\n        return this._proxy.calls;\n    }\n    /**\n     * Access the conferences.\n     */\n    conferences() {\n        return this._proxy.conferences;\n    }\n    /**\n     * Access the connectApps.\n     */\n    connectApps() {\n        return this._proxy.connectApps;\n    }\n    /**\n     * Access the incomingPhoneNumbers.\n     */\n    incomingPhoneNumbers() {\n        return this._proxy.incomingPhoneNumbers;\n    }\n    /**\n     * Access the keys.\n     */\n    keys() {\n        return this._proxy.keys;\n    }\n    /**\n     * Access the messages.\n     */\n    messages() {\n        return this._proxy.messages;\n    }\n    /**\n     * Access the newKeys.\n     */\n    newKeys() {\n        return this._proxy.newKeys;\n    }\n    /**\n     * Access the newSigningKeys.\n     */\n    newSigningKeys() {\n        return this._proxy.newSigningKeys;\n    }\n    /**\n     * Access the notifications.\n     */\n    notifications() {\n        return this._proxy.notifications;\n    }\n    /**\n     * Access the outgoingCallerIds.\n     */\n    outgoingCallerIds() {\n        return this._proxy.outgoingCallerIds;\n    }\n    /**\n     * Access the queues.\n     */\n    queues() {\n        return this._proxy.queues;\n    }\n    /**\n     * Access the recordings.\n     */\n    recordings() {\n        return this._proxy.recordings;\n    }\n    /**\n     * Access the shortCodes.\n     */\n    shortCodes() {\n        return this._proxy.shortCodes;\n    }\n    /**\n     * Access the signingKeys.\n     */\n    signingKeys() {\n        return this._proxy.signingKeys;\n    }\n    /**\n     * Access the sip.\n     */\n    sip() {\n        return this._proxy.sip;\n    }\n    /**\n     * Access the tokens.\n     */\n    tokens() {\n        return this._proxy.tokens;\n    }\n    /**\n     * Access the transcriptions.\n     */\n    transcriptions() {\n        return this._proxy.transcriptions;\n    }\n    /**\n     * Access the usage.\n     */\n    usage() {\n        return this._proxy.usage;\n    }\n    /**\n     * Access the validationRequests.\n     */\n    validationRequests() {\n        return this._proxy.validationRequests;\n    }\n    /**\n     * Provide a user-friendly representation\n     *\n     * @returns Object\n     */\n    toJSON() {\n        return {\n            authToken: this.authToken,\n            dateCreated: this.dateCreated,\n            dateUpdated: this.dateUpdated,\n            friendlyName: this.friendlyName,\n            ownerAccountSid: this.ownerAccountSid,\n            sid: this.sid,\n            status: this.status,\n            subresourceUris: this.subresourceUris,\n            type: this.type,\n            uri: this.uri,\n        };\n    }\n    [util_1.inspect.custom](_depth, options) {\n        return (0, util_1.inspect)(this.toJSON(), options);\n    }\n}\nexports.AccountInstance = AccountInstance;\nfunction AccountListInstance(version) {\n    const instance = ((sid) => instance.get(sid));\n    instance.get = function get(sid) {\n        return new AccountContextImpl(version, sid);\n    };\n    instance._version = version;\n    instance._solution = {};\n    instance._uri = `/Accounts.json`;\n    instance.create = function create(params, callback) {\n        if (params instanceof Function) {\n            callback = params;\n            params = {};\n        }\n        else {\n            params = params || {};\n        }\n        let data = {};\n        if (params[\"friendlyName\"] !== undefined)\n            data[\"FriendlyName\"] = params[\"friendlyName\"];\n        const headers = {};\n        headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n        let operationVersion = version, operationPromise = operationVersion.create({\n            uri: instance._uri,\n            method: \"post\",\n            data,\n            headers,\n        });\n        operationPromise = operationPromise.then((payload) => new AccountInstance(operationVersion, payload));\n        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n        return operationPromise;\n    };\n    instance.page = function page(params, callback) {\n        if (params instanceof Function) {\n            callback = params;\n            params = {};\n        }\n        else {\n            params = params || {};\n        }\n        let data = {};\n        if (params[\"friendlyName\"] !== undefined)\n            data[\"FriendlyName\"] = params[\"friendlyName\"];\n        if (params[\"status\"] !== undefined)\n            data[\"Status\"] = params[\"status\"];\n        if (params[\"pageSize\"] !== undefined)\n            data[\"PageSize\"] = params[\"pageSize\"];\n        if (params.pageNumber !== undefined)\n            data[\"Page\"] = params.pageNumber;\n        if (params.pageToken !== undefined)\n            data[\"PageToken\"] = params.pageToken;\n        const headers = {};\n        let operationVersion = version, operationPromise = operationVersion.page({\n            uri: instance._uri,\n            method: \"get\",\n            params: data,\n            headers,\n        });\n        operationPromise = operationPromise.then((payload) => new AccountPage(operationVersion, payload, instance._solution));\n        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n        return operationPromise;\n    };\n    instance.each = instance._version.each;\n    instance.list = instance._version.list;\n    instance.getPage = function getPage(targetUrl, callback) {\n        const operationPromise = instance._version._domain.twilio.request({\n            method: \"get\",\n            uri: targetUrl,\n        });\n        let pagePromise = operationPromise.then((payload) => new AccountPage(instance._version, payload, instance._solution));\n        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);\n        return pagePromise;\n    };\n    instance.toJSON = function toJSON() {\n        return instance._solution;\n    };\n    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {\n        return (0, util_1.inspect)(instance.toJSON(), options);\n    };\n    return instance;\n}\nexports.AccountListInstance = AccountListInstance;\nclass AccountPage extends Page_1.default {\n    /**\n     * Initialize the AccountPage\n     *\n     * @param version - Version of the resource\n     * @param response - Response from the API\n     * @param solution - Path solution\n     */\n    constructor(version, response, solution) {\n        super(version, response, solution);\n    }\n    /**\n     * Build an instance of AccountInstance\n     *\n     * @param payload - Payload response from the API\n     */\n    getInstance(payload) {\n        return new AccountInstance(this._version, payload);\n    }\n    [util_1.inspect.custom](depth, options) {\n        return (0, util_1.inspect)(this.toJSON(), options);\n    }\n}\nexports.AccountPage = AccountPage;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,WAAW,GAAGF,OAAO,CAACG,mBAAmB,GAAGH,OAAO,CAACI,eAAe,GAAGJ,OAAO,CAACK,kBAAkB,GAAG,KAAK,CAAC;AACjH,MAAMC,MAAM,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC9B,MAAMC,MAAM,GAAGb,eAAe,CAACY,OAAO,CAAC,oBAAoB,CAAC,CAAC;AAC7D,MAAME,WAAW,GAAGF,OAAO,CAAC,2BAA2B,CAAC;AACxD,MAAMG,SAAS,GAAGH,OAAO,CAAC,yBAAyB,CAAC;AACpD,MAAMI,SAAS,GAAGJ,OAAO,CAAC,uBAAuB,CAAC;AAClD,MAAMK,SAAS,GAAGL,OAAO,CAAC,mBAAmB,CAAC;AAC9C,MAAMM,aAAa,GAAGN,OAAO,CAAC,uBAAuB,CAAC;AACtD,MAAMO,sBAAsB,GAAGP,OAAO,CAAC,gCAAgC,CAAC;AACxE,MAAMQ,6BAA6B,GAAGR,OAAO,CAAC,uCAAuC,CAAC;AACtF,MAAMS,SAAS,GAAGT,OAAO,CAAC,mBAAmB,CAAC;AAC9C,MAAMU,MAAM,GAAGV,OAAO,CAAC,gBAAgB,CAAC;AACxC,MAAMW,YAAY,GAAGX,OAAO,CAAC,sBAAsB,CAAC;AACpD,MAAMY,YAAY,GAAGZ,OAAO,CAAC,sBAAsB,CAAC;AACpD,MAAMa,qBAAqB,GAAGb,OAAO,CAAC,+BAA+B,CAAC;AACtE,MAAMc,KAAK,GAAGd,OAAO,CAAC,eAAe,CAAC;AACtC,MAAMe,SAAS,GAAGf,OAAO,CAAC,mBAAmB,CAAC;AAC9C,MAAMgB,QAAQ,GAAGhB,OAAO,CAAC,kBAAkB,CAAC;AAC5C,MAAMiB,eAAe,GAAGjB,OAAO,CAAC,yBAAyB,CAAC;AAC1D,MAAMkB,cAAc,GAAGlB,OAAO,CAAC,wBAAwB,CAAC;AACxD,MAAMmB,kBAAkB,GAAGnB,OAAO,CAAC,4BAA4B,CAAC;AAChE,MAAMoB,OAAO,GAAGpB,OAAO,CAAC,iBAAiB,CAAC;AAC1C,MAAMqB,WAAW,GAAGrB,OAAO,CAAC,qBAAqB,CAAC;AAClD,MAAMsB,WAAW,GAAGtB,OAAO,CAAC,qBAAqB,CAAC;AAClD,MAAMuB,YAAY,GAAGvB,OAAO,CAAC,sBAAsB,CAAC;AACpD,MAAMwB,KAAK,GAAGxB,OAAO,CAAC,eAAe,CAAC;AACtC,MAAMyB,OAAO,GAAGzB,OAAO,CAAC,iBAAiB,CAAC;AAC1C,MAAM0B,eAAe,GAAG1B,OAAO,CAAC,yBAAyB,CAAC;AAC1D,MAAM2B,OAAO,GAAG3B,OAAO,CAAC,iBAAiB,CAAC;AAC1C,MAAM4B,mBAAmB,GAAG5B,OAAO,CAAC,6BAA6B,CAAC;AAClE,MAAMF,kBAAkB,CAAC;EACrB+B,WAAWA,CAACC,QAAQ,EAAEC,GAAG,EAAE;IACvB,IAAI,CAACD,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAAC,CAAC,CAAC,EAAE1B,SAAS,CAAC4B,gBAAgB,EAAED,GAAG,CAAC,EAAE;MACvC,MAAM,IAAIE,KAAK,CAAC,+BAA+B,CAAC;IACpD;IACA,IAAI,CAACC,SAAS,GAAG;MAAEH;IAAI,CAAC;IACxB,IAAI,CAACI,IAAI,GAAI,aAAYJ,GAAI,OAAM;EACvC;EACA,IAAIK,SAASA,CAAA,EAAG;IACZ,IAAI,CAACC,UAAU,GACX,IAAI,CAACA,UAAU,IAAI,CAAC,CAAC,EAAEhC,SAAS,CAACiC,mBAAmB,EAAE,IAAI,CAACR,QAAQ,EAAE,IAAI,CAACI,SAAS,CAACH,GAAG,CAAC;IAC5F,OAAO,IAAI,CAACM,UAAU;EAC1B;EACA,IAAIE,YAAYA,CAAA,EAAG;IACf,IAAI,CAACC,aAAa,GACd,IAAI,CAACA,aAAa,IACd,CAAC,CAAC,EAAElC,aAAa,CAACmC,uBAAuB,EAAE,IAAI,CAACX,QAAQ,EAAE,IAAI,CAACI,SAAS,CAACH,GAAG,CAAC;IACrF,OAAO,IAAI,CAACS,aAAa;EAC7B;EACA,IAAIE,qBAAqBA,CAAA,EAAG;IACxB,IAAI,CAACC,sBAAsB,GACvB,IAAI,CAACA,sBAAsB,IACvB,CAAC,CAAC,EAAEpC,sBAAsB,CAACqC,gCAAgC,EAAE,IAAI,CAACd,QAAQ,EAAE,IAAI,CAACI,SAAS,CAACH,GAAG,CAAC;IACvG,OAAO,IAAI,CAACY,sBAAsB;EACtC;EACA,IAAIE,qBAAqBA,CAAA,EAAG;IACxB,IAAI,CAACC,sBAAsB,GACvB,IAAI,CAACA,sBAAsB,IACvB,CAAC,CAAC,EAAEtC,6BAA6B,CAACuC,uCAAuC,EAAE,IAAI,CAACjB,QAAQ,EAAE,IAAI,CAACI,SAAS,CAACH,GAAG,CAAC;IACrH,OAAO,IAAI,CAACe,sBAAsB;EACtC;EACA,IAAIE,OAAOA,CAAA,EAAG;IACV,IAAI,CAACC,QAAQ,GACT,IAAI,CAACA,QAAQ,IAAI,CAAC,CAAC,EAAExC,SAAS,CAACyC,mBAAmB,EAAE,IAAI,CAACpB,QAAQ,EAAE,IAAI,CAACI,SAAS,CAACH,GAAG,CAAC;IAC1F,OAAO,IAAI,CAACkB,QAAQ;EACxB;EACA,IAAIE,KAAKA,CAAA,EAAG;IACR,IAAI,CAACC,MAAM,GACP,IAAI,CAACA,MAAM,IAAI,CAAC,CAAC,EAAE1C,MAAM,CAAC2C,gBAAgB,EAAE,IAAI,CAACvB,QAAQ,EAAE,IAAI,CAACI,SAAS,CAACH,GAAG,CAAC;IAClF,OAAO,IAAI,CAACqB,MAAM;EACtB;EACA,IAAIE,WAAWA,CAAA,EAAG;IACd,IAAI,CAACC,YAAY,GACb,IAAI,CAACA,YAAY,IACb,CAAC,CAAC,EAAE5C,YAAY,CAAC6C,sBAAsB,EAAE,IAAI,CAAC1B,QAAQ,EAAE,IAAI,CAACI,SAAS,CAACH,GAAG,CAAC;IACnF,OAAO,IAAI,CAACwB,YAAY;EAC5B;EACA,IAAIE,WAAWA,CAAA,EAAG;IACd,IAAI,CAACC,YAAY,GACb,IAAI,CAACA,YAAY,IACb,CAAC,CAAC,EAAE9C,YAAY,CAAC+C,sBAAsB,EAAE,IAAI,CAAC7B,QAAQ,EAAE,IAAI,CAACI,SAAS,CAACH,GAAG,CAAC;IACnF,OAAO,IAAI,CAAC2B,YAAY;EAC5B;EACA,IAAIE,oBAAoBA,CAAA,EAAG;IACvB,IAAI,CAACC,qBAAqB,GACtB,IAAI,CAACA,qBAAqB,IACtB,CAAC,CAAC,EAAEhD,qBAAqB,CAACiD,+BAA+B,EAAE,IAAI,CAAChC,QAAQ,EAAE,IAAI,CAACI,SAAS,CAACH,GAAG,CAAC;IACrG,OAAO,IAAI,CAAC8B,qBAAqB;EACrC;EACA,IAAIE,IAAIA,CAAA,EAAG;IACP,IAAI,CAACC,KAAK,GACN,IAAI,CAACA,KAAK,IAAI,CAAC,CAAC,EAAElD,KAAK,CAACmD,eAAe,EAAE,IAAI,CAACnC,QAAQ,EAAE,IAAI,CAACI,SAAS,CAACH,GAAG,CAAC;IAC/E,OAAO,IAAI,CAACiC,KAAK;EACrB;EACA,IAAIE,QAAQA,CAAA,EAAG;IACX,IAAI,CAACC,SAAS,GACV,IAAI,CAACA,SAAS,IAAI,CAAC,CAAC,EAAEpD,SAAS,CAACqD,mBAAmB,EAAE,IAAI,CAACtC,QAAQ,EAAE,IAAI,CAACI,SAAS,CAACH,GAAG,CAAC;IAC3F,OAAO,IAAI,CAACoC,SAAS;EACzB;EACA,IAAIE,OAAOA,CAAA,EAAG;IACV,IAAI,CAACC,QAAQ,GACT,IAAI,CAACA,QAAQ,IAAI,CAAC,CAAC,EAAEtD,QAAQ,CAACuD,kBAAkB,EAAE,IAAI,CAACzC,QAAQ,EAAE,IAAI,CAACI,SAAS,CAACH,GAAG,CAAC;IACxF,OAAO,IAAI,CAACuC,QAAQ;EACxB;EACA,IAAIE,cAAcA,CAAA,EAAG;IACjB,IAAI,CAACC,eAAe,GAChB,IAAI,CAACA,eAAe,IAChB,CAAC,CAAC,EAAExD,eAAe,CAACyD,yBAAyB,EAAE,IAAI,CAAC5C,QAAQ,EAAE,IAAI,CAACI,SAAS,CAACH,GAAG,CAAC;IACzF,OAAO,IAAI,CAAC0C,eAAe;EAC/B;EACA,IAAIE,aAAaA,CAAA,EAAG;IAChB,IAAI,CAACC,cAAc,GACf,IAAI,CAACA,cAAc,IACf,CAAC,CAAC,EAAE1D,cAAc,CAAC2D,wBAAwB,EAAE,IAAI,CAAC/C,QAAQ,EAAE,IAAI,CAACI,SAAS,CAACH,GAAG,CAAC;IACvF,OAAO,IAAI,CAAC6C,cAAc;EAC9B;EACA,IAAIE,iBAAiBA,CAAA,EAAG;IACpB,IAAI,CAACC,kBAAkB,GACnB,IAAI,CAACA,kBAAkB,IACnB,CAAC,CAAC,EAAE5D,kBAAkB,CAAC6D,4BAA4B,EAAE,IAAI,CAAClD,QAAQ,EAAE,IAAI,CAACI,SAAS,CAACH,GAAG,CAAC;IAC/F,OAAO,IAAI,CAACgD,kBAAkB;EAClC;EACA,IAAIE,MAAMA,CAAA,EAAG;IACT,IAAI,CAACC,OAAO,GACR,IAAI,CAACA,OAAO,IAAI,CAAC,CAAC,EAAE9D,OAAO,CAAC+D,iBAAiB,EAAE,IAAI,CAACrD,QAAQ,EAAE,IAAI,CAACI,SAAS,CAACH,GAAG,CAAC;IACrF,OAAO,IAAI,CAACmD,OAAO;EACvB;EACA,IAAIE,UAAUA,CAAA,EAAG;IACb,IAAI,CAACC,WAAW,GACZ,IAAI,CAACA,WAAW,IACZ,CAAC,CAAC,EAAEhE,WAAW,CAACiE,qBAAqB,EAAE,IAAI,CAACxD,QAAQ,EAAE,IAAI,CAACI,SAAS,CAACH,GAAG,CAAC;IACjF,OAAO,IAAI,CAACsD,WAAW;EAC3B;EACA,IAAIE,UAAUA,CAAA,EAAG;IACb,IAAI,CAACC,WAAW,GACZ,IAAI,CAACA,WAAW,IACZ,CAAC,CAAC,EAAElE,WAAW,CAACmE,qBAAqB,EAAE,IAAI,CAAC3D,QAAQ,EAAE,IAAI,CAACI,SAAS,CAACH,GAAG,CAAC;IACjF,OAAO,IAAI,CAACyD,WAAW;EAC3B;EACA,IAAIE,WAAWA,CAAA,EAAG;IACd,IAAI,CAACC,YAAY,GACb,IAAI,CAACA,YAAY,IACb,CAAC,CAAC,EAAEpE,YAAY,CAACqE,sBAAsB,EAAE,IAAI,CAAC9D,QAAQ,EAAE,IAAI,CAACI,SAAS,CAACH,GAAG,CAAC;IACnF,OAAO,IAAI,CAAC4D,YAAY;EAC5B;EACA,IAAIE,GAAGA,CAAA,EAAG;IACN,IAAI,CAACC,IAAI,GAAG,IAAI,CAACA,IAAI,IAAI,CAAC,CAAC,EAAEtE,KAAK,CAACuE,eAAe,EAAE,IAAI,CAACjE,QAAQ,EAAE,IAAI,CAACI,SAAS,CAACH,GAAG,CAAC;IACtF,OAAO,IAAI,CAAC+D,IAAI;EACpB;EACA,IAAIE,MAAMA,CAAA,EAAG;IACT,IAAI,CAACC,OAAO,GACR,IAAI,CAACA,OAAO,IAAI,CAAC,CAAC,EAAExE,OAAO,CAACyE,iBAAiB,EAAE,IAAI,CAACpE,QAAQ,EAAE,IAAI,CAACI,SAAS,CAACH,GAAG,CAAC;IACrF,OAAO,IAAI,CAACkE,OAAO;EACvB;EACA,IAAIE,cAAcA,CAAA,EAAG;IACjB,IAAI,CAACC,eAAe,GAChB,IAAI,CAACA,eAAe,IAChB,CAAC,CAAC,EAAE1E,eAAe,CAAC2E,yBAAyB,EAAE,IAAI,CAACvE,QAAQ,EAAE,IAAI,CAACI,SAAS,CAACH,GAAG,CAAC;IACzF,OAAO,IAAI,CAACqE,eAAe;EAC/B;EACA,IAAIE,KAAKA,CAAA,EAAG;IACR,IAAI,CAACC,MAAM,GACP,IAAI,CAACA,MAAM,IAAI,CAAC,CAAC,EAAE5E,OAAO,CAAC6E,iBAAiB,EAAE,IAAI,CAAC1E,QAAQ,EAAE,IAAI,CAACI,SAAS,CAACH,GAAG,CAAC;IACpF,OAAO,IAAI,CAACwE,MAAM;EACtB;EACA,IAAIE,kBAAkBA,CAAA,EAAG;IACrB,IAAI,CAACC,mBAAmB,GACpB,IAAI,CAACA,mBAAmB,IACpB,CAAC,CAAC,EAAE9E,mBAAmB,CAAC+E,6BAA6B,EAAE,IAAI,CAAC7E,QAAQ,EAAE,IAAI,CAACI,SAAS,CAACH,GAAG,CAAC;IACjG,OAAO,IAAI,CAAC2E,mBAAmB;EACnC;EACAE,KAAKA,CAACC,QAAQ,EAAE;IACZ,MAAMC,QAAQ,GAAG,IAAI;IACrB,IAAIC,gBAAgB,GAAGD,QAAQ,CAAChF,QAAQ;MAAEkF,gBAAgB,GAAGD,gBAAgB,CAACH,KAAK,CAAC;QAChFK,GAAG,EAAEH,QAAQ,CAAC3E,IAAI;QAClB+E,MAAM,EAAE;MACZ,CAAC,CAAC;IACFF,gBAAgB,GAAGA,gBAAgB,CAACG,IAAI,CAAEC,OAAO,IAAK,IAAIvH,eAAe,CAACkH,gBAAgB,EAAEK,OAAO,EAAEN,QAAQ,CAAC5E,SAAS,CAACH,GAAG,CAAC,CAAC;IAC7HiF,gBAAgB,GAAGF,QAAQ,CAAChF,QAAQ,CAACuF,kBAAkB,CAACL,gBAAgB,EAAEH,QAAQ,CAAC;IACnF,OAAOG,gBAAgB;EAC3B;EACAM,MAAMA,CAACC,MAAM,EAAEV,QAAQ,EAAE;IACrB,IAAIU,MAAM,YAAYC,QAAQ,EAAE;MAC5BX,QAAQ,GAAGU,MAAM;MACjBA,MAAM,GAAG,CAAC,CAAC;IACf,CAAC,MACI;MACDA,MAAM,GAAGA,MAAM,IAAI,CAAC,CAAC;IACzB;IACA,IAAIE,IAAI,GAAG,CAAC,CAAC;IACb,IAAIF,MAAM,CAAC,cAAc,CAAC,KAAKG,SAAS,EACpCD,IAAI,CAAC,cAAc,CAAC,GAAGF,MAAM,CAAC,cAAc,CAAC;IACjD,IAAIA,MAAM,CAAC,QAAQ,CAAC,KAAKG,SAAS,EAC9BD,IAAI,CAAC,QAAQ,CAAC,GAAGF,MAAM,CAAC,QAAQ,CAAC;IACrC,MAAMI,OAAO,GAAG,CAAC,CAAC;IAClBA,OAAO,CAAC,cAAc,CAAC,GAAG,mCAAmC;IAC7D,MAAMb,QAAQ,GAAG,IAAI;IACrB,IAAIC,gBAAgB,GAAGD,QAAQ,CAAChF,QAAQ;MAAEkF,gBAAgB,GAAGD,gBAAgB,CAACO,MAAM,CAAC;QACjFL,GAAG,EAAEH,QAAQ,CAAC3E,IAAI;QAClB+E,MAAM,EAAE,MAAM;QACdO,IAAI;QACJE;MACJ,CAAC,CAAC;IACFX,gBAAgB,GAAGA,gBAAgB,CAACG,IAAI,CAAEC,OAAO,IAAK,IAAIvH,eAAe,CAACkH,gBAAgB,EAAEK,OAAO,EAAEN,QAAQ,CAAC5E,SAAS,CAACH,GAAG,CAAC,CAAC;IAC7HiF,gBAAgB,GAAGF,QAAQ,CAAChF,QAAQ,CAACuF,kBAAkB,CAACL,gBAAgB,EAAEH,QAAQ,CAAC;IACnF,OAAOG,gBAAgB;EAC3B;EACA;AACJ;AACA;AACA;AACA;EACIY,MAAMA,CAAA,EAAG;IACL,OAAO,IAAI,CAAC1F,SAAS;EACzB;EACA,CAACnC,MAAM,CAAC8H,OAAO,CAACC,MAAM,EAAEC,MAAM,EAAEC,OAAO,EAAE;IACrC,OAAO,CAAC,CAAC,EAAEjI,MAAM,CAAC8H,OAAO,EAAE,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;EACtD;AACJ;AACAvI,OAAO,CAACK,kBAAkB,GAAGA,kBAAkB;AAC/C,MAAMD,eAAe,CAAC;EAClBgC,WAAWA,CAACC,QAAQ,EAAEsF,OAAO,EAAErF,GAAG,EAAE;IAChC,IAAI,CAACD,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACmG,SAAS,GAAGb,OAAO,CAACc,UAAU;IACnC,IAAI,CAACC,WAAW,GAAGjI,WAAW,CAACkI,eAAe,CAAChB,OAAO,CAACiB,YAAY,CAAC;IACpE,IAAI,CAACC,WAAW,GAAGpI,WAAW,CAACkI,eAAe,CAAChB,OAAO,CAACmB,YAAY,CAAC;IACpE,IAAI,CAACC,YAAY,GAAGpB,OAAO,CAACqB,aAAa;IACzC,IAAI,CAACC,eAAe,GAAGtB,OAAO,CAACuB,iBAAiB;IAChD,IAAI,CAAC5G,GAAG,GAAGqF,OAAO,CAACrF,GAAG;IACtB,IAAI,CAAC6G,MAAM,GAAGxB,OAAO,CAACwB,MAAM;IAC5B,IAAI,CAACC,eAAe,GAAGzB,OAAO,CAAC0B,gBAAgB;IAC/C,IAAI,CAACC,IAAI,GAAG3B,OAAO,CAAC2B,IAAI;IACxB,IAAI,CAAC9B,GAAG,GAAGG,OAAO,CAACH,GAAG;IACtB,IAAI,CAAC/E,SAAS,GAAG;MAAEH,GAAG,EAAEA,GAAG,IAAI,IAAI,CAACA;IAAI,CAAC;EAC7C;EACA,IAAIiH,MAAMA,CAAA,EAAG;IACT,IAAI,CAACC,QAAQ,GACT,IAAI,CAACA,QAAQ,IACT,IAAInJ,kBAAkB,CAAC,IAAI,CAACgC,QAAQ,EAAE,IAAI,CAACI,SAAS,CAACH,GAAG,CAAC;IACjE,OAAO,IAAI,CAACkH,QAAQ;EACxB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIrC,KAAKA,CAACC,QAAQ,EAAE;IACZ,OAAO,IAAI,CAACmC,MAAM,CAACpC,KAAK,CAACC,QAAQ,CAAC;EACtC;EACAS,MAAMA,CAACC,MAAM,EAAEV,QAAQ,EAAE;IACrB,OAAO,IAAI,CAACmC,MAAM,CAAC1B,MAAM,CAACC,MAAM,EAAEV,QAAQ,CAAC;EAC/C;EACA;AACJ;AACA;EACIzE,SAASA,CAAA,EAAG;IACR,OAAO,IAAI,CAAC4G,MAAM,CAAC5G,SAAS;EAChC;EACA;AACJ;AACA;EACIG,YAAYA,CAAA,EAAG;IACX,OAAO,IAAI,CAACyG,MAAM,CAACzG,YAAY;EACnC;EACA;AACJ;AACA;EACIG,qBAAqBA,CAAA,EAAG;IACpB,OAAO,IAAI,CAACsG,MAAM,CAACtG,qBAAqB;EAC5C;EACA;AACJ;AACA;EACIG,qBAAqBA,CAAA,EAAG;IACpB,OAAO,IAAI,CAACmG,MAAM,CAACnG,qBAAqB;EAC5C;EACA;AACJ;AACA;EACIG,OAAOA,CAAA,EAAG;IACN,OAAO,IAAI,CAACgG,MAAM,CAAChG,OAAO;EAC9B;EACA;AACJ;AACA;EACIG,KAAKA,CAAA,EAAG;IACJ,OAAO,IAAI,CAAC6F,MAAM,CAAC7F,KAAK;EAC5B;EACA;AACJ;AACA;EACIG,WAAWA,CAAA,EAAG;IACV,OAAO,IAAI,CAAC0F,MAAM,CAAC1F,WAAW;EAClC;EACA;AACJ;AACA;EACIG,WAAWA,CAAA,EAAG;IACV,OAAO,IAAI,CAACuF,MAAM,CAACvF,WAAW;EAClC;EACA;AACJ;AACA;EACIG,oBAAoBA,CAAA,EAAG;IACnB,OAAO,IAAI,CAACoF,MAAM,CAACpF,oBAAoB;EAC3C;EACA;AACJ;AACA;EACIG,IAAIA,CAAA,EAAG;IACH,OAAO,IAAI,CAACiF,MAAM,CAACjF,IAAI;EAC3B;EACA;AACJ;AACA;EACIG,QAAQA,CAAA,EAAG;IACP,OAAO,IAAI,CAAC8E,MAAM,CAAC9E,QAAQ;EAC/B;EACA;AACJ;AACA;EACIG,OAAOA,CAAA,EAAG;IACN,OAAO,IAAI,CAAC2E,MAAM,CAAC3E,OAAO;EAC9B;EACA;AACJ;AACA;EACIG,cAAcA,CAAA,EAAG;IACb,OAAO,IAAI,CAACwE,MAAM,CAACxE,cAAc;EACrC;EACA;AACJ;AACA;EACIG,aAAaA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACqE,MAAM,CAACrE,aAAa;EACpC;EACA;AACJ;AACA;EACIG,iBAAiBA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACkE,MAAM,CAAClE,iBAAiB;EACxC;EACA;AACJ;AACA;EACIG,MAAMA,CAAA,EAAG;IACL,OAAO,IAAI,CAAC+D,MAAM,CAAC/D,MAAM;EAC7B;EACA;AACJ;AACA;EACIG,UAAUA,CAAA,EAAG;IACT,OAAO,IAAI,CAAC4D,MAAM,CAAC5D,UAAU;EACjC;EACA;AACJ;AACA;EACIG,UAAUA,CAAA,EAAG;IACT,OAAO,IAAI,CAACyD,MAAM,CAACzD,UAAU;EACjC;EACA;AACJ;AACA;EACIG,WAAWA,CAAA,EAAG;IACV,OAAO,IAAI,CAACsD,MAAM,CAACtD,WAAW;EAClC;EACA;AACJ;AACA;EACIG,GAAGA,CAAA,EAAG;IACF,OAAO,IAAI,CAACmD,MAAM,CAACnD,GAAG;EAC1B;EACA;AACJ;AACA;EACIG,MAAMA,CAAA,EAAG;IACL,OAAO,IAAI,CAACgD,MAAM,CAAChD,MAAM;EAC7B;EACA;AACJ;AACA;EACIG,cAAcA,CAAA,EAAG;IACb,OAAO,IAAI,CAAC6C,MAAM,CAAC7C,cAAc;EACrC;EACA;AACJ;AACA;EACIG,KAAKA,CAAA,EAAG;IACJ,OAAO,IAAI,CAAC0C,MAAM,CAAC1C,KAAK;EAC5B;EACA;AACJ;AACA;EACIG,kBAAkBA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACuC,MAAM,CAACvC,kBAAkB;EACzC;EACA;AACJ;AACA;AACA;AACA;EACImB,MAAMA,CAAA,EAAG;IACL,OAAO;MACHK,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBE,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BG,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BE,YAAY,EAAE,IAAI,CAACA,YAAY;MAC/BE,eAAe,EAAE,IAAI,CAACA,eAAe;MACrC3G,GAAG,EAAE,IAAI,CAACA,GAAG;MACb6G,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBC,eAAe,EAAE,IAAI,CAACA,eAAe;MACrCE,IAAI,EAAE,IAAI,CAACA,IAAI;MACf9B,GAAG,EAAE,IAAI,CAACA;IACd,CAAC;EACL;EACA,CAAClH,MAAM,CAAC8H,OAAO,CAACC,MAAM,EAAEC,MAAM,EAAEC,OAAO,EAAE;IACrC,OAAO,CAAC,CAAC,EAAEjI,MAAM,CAAC8H,OAAO,EAAE,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;EACtD;AACJ;AACAvI,OAAO,CAACI,eAAe,GAAGA,eAAe;AACzC,SAASD,mBAAmBA,CAACsJ,OAAO,EAAE;EAClC,MAAMpC,QAAQ,GAAK/E,GAAG,IAAK+E,QAAQ,CAACqC,GAAG,CAACpH,GAAG,CAAE;EAC7C+E,QAAQ,CAACqC,GAAG,GAAG,SAASA,GAAGA,CAACpH,GAAG,EAAE;IAC7B,OAAO,IAAIjC,kBAAkB,CAACoJ,OAAO,EAAEnH,GAAG,CAAC;EAC/C,CAAC;EACD+E,QAAQ,CAAChF,QAAQ,GAAGoH,OAAO;EAC3BpC,QAAQ,CAAC5E,SAAS,GAAG,CAAC,CAAC;EACvB4E,QAAQ,CAAC3E,IAAI,GAAI,gBAAe;EAChC2E,QAAQ,CAACsC,MAAM,GAAG,SAASA,MAAMA,CAAC7B,MAAM,EAAEV,QAAQ,EAAE;IAChD,IAAIU,MAAM,YAAYC,QAAQ,EAAE;MAC5BX,QAAQ,GAAGU,MAAM;MACjBA,MAAM,GAAG,CAAC,CAAC;IACf,CAAC,MACI;MACDA,MAAM,GAAGA,MAAM,IAAI,CAAC,CAAC;IACzB;IACA,IAAIE,IAAI,GAAG,CAAC,CAAC;IACb,IAAIF,MAAM,CAAC,cAAc,CAAC,KAAKG,SAAS,EACpCD,IAAI,CAAC,cAAc,CAAC,GAAGF,MAAM,CAAC,cAAc,CAAC;IACjD,MAAMI,OAAO,GAAG,CAAC,CAAC;IAClBA,OAAO,CAAC,cAAc,CAAC,GAAG,mCAAmC;IAC7D,IAAIZ,gBAAgB,GAAGmC,OAAO;MAAElC,gBAAgB,GAAGD,gBAAgB,CAACqC,MAAM,CAAC;QACvEnC,GAAG,EAAEH,QAAQ,CAAC3E,IAAI;QAClB+E,MAAM,EAAE,MAAM;QACdO,IAAI;QACJE;MACJ,CAAC,CAAC;IACFX,gBAAgB,GAAGA,gBAAgB,CAACG,IAAI,CAAEC,OAAO,IAAK,IAAIvH,eAAe,CAACkH,gBAAgB,EAAEK,OAAO,CAAC,CAAC;IACrGJ,gBAAgB,GAAGF,QAAQ,CAAChF,QAAQ,CAACuF,kBAAkB,CAACL,gBAAgB,EAAEH,QAAQ,CAAC;IACnF,OAAOG,gBAAgB;EAC3B,CAAC;EACDF,QAAQ,CAACuC,IAAI,GAAG,SAASA,IAAIA,CAAC9B,MAAM,EAAEV,QAAQ,EAAE;IAC5C,IAAIU,MAAM,YAAYC,QAAQ,EAAE;MAC5BX,QAAQ,GAAGU,MAAM;MACjBA,MAAM,GAAG,CAAC,CAAC;IACf,CAAC,MACI;MACDA,MAAM,GAAGA,MAAM,IAAI,CAAC,CAAC;IACzB;IACA,IAAIE,IAAI,GAAG,CAAC,CAAC;IACb,IAAIF,MAAM,CAAC,cAAc,CAAC,KAAKG,SAAS,EACpCD,IAAI,CAAC,cAAc,CAAC,GAAGF,MAAM,CAAC,cAAc,CAAC;IACjD,IAAIA,MAAM,CAAC,QAAQ,CAAC,KAAKG,SAAS,EAC9BD,IAAI,CAAC,QAAQ,CAAC,GAAGF,MAAM,CAAC,QAAQ,CAAC;IACrC,IAAIA,MAAM,CAAC,UAAU,CAAC,KAAKG,SAAS,EAChCD,IAAI,CAAC,UAAU,CAAC,GAAGF,MAAM,CAAC,UAAU,CAAC;IACzC,IAAIA,MAAM,CAAC+B,UAAU,KAAK5B,SAAS,EAC/BD,IAAI,CAAC,MAAM,CAAC,GAAGF,MAAM,CAAC+B,UAAU;IACpC,IAAI/B,MAAM,CAACgC,SAAS,KAAK7B,SAAS,EAC9BD,IAAI,CAAC,WAAW,CAAC,GAAGF,MAAM,CAACgC,SAAS;IACxC,MAAM5B,OAAO,GAAG,CAAC,CAAC;IAClB,IAAIZ,gBAAgB,GAAGmC,OAAO;MAAElC,gBAAgB,GAAGD,gBAAgB,CAACsC,IAAI,CAAC;QACrEpC,GAAG,EAAEH,QAAQ,CAAC3E,IAAI;QAClB+E,MAAM,EAAE,KAAK;QACbK,MAAM,EAAEE,IAAI;QACZE;MACJ,CAAC,CAAC;IACFX,gBAAgB,GAAGA,gBAAgB,CAACG,IAAI,CAAEC,OAAO,IAAK,IAAIzH,WAAW,CAACoH,gBAAgB,EAAEK,OAAO,EAAEN,QAAQ,CAAC5E,SAAS,CAAC,CAAC;IACrH8E,gBAAgB,GAAGF,QAAQ,CAAChF,QAAQ,CAACuF,kBAAkB,CAACL,gBAAgB,EAAEH,QAAQ,CAAC;IACnF,OAAOG,gBAAgB;EAC3B,CAAC;EACDF,QAAQ,CAAC0C,IAAI,GAAG1C,QAAQ,CAAChF,QAAQ,CAAC0H,IAAI;EACtC1C,QAAQ,CAAC2C,IAAI,GAAG3C,QAAQ,CAAChF,QAAQ,CAAC2H,IAAI;EACtC3C,QAAQ,CAAC4C,OAAO,GAAG,SAASA,OAAOA,CAACC,SAAS,EAAE9C,QAAQ,EAAE;IACrD,MAAMG,gBAAgB,GAAGF,QAAQ,CAAChF,QAAQ,CAAC8H,OAAO,CAACC,MAAM,CAACC,OAAO,CAAC;MAC9D5C,MAAM,EAAE,KAAK;MACbD,GAAG,EAAE0C;IACT,CAAC,CAAC;IACF,IAAII,WAAW,GAAG/C,gBAAgB,CAACG,IAAI,CAAEC,OAAO,IAAK,IAAIzH,WAAW,CAACmH,QAAQ,CAAChF,QAAQ,EAAEsF,OAAO,EAAEN,QAAQ,CAAC5E,SAAS,CAAC,CAAC;IACrH6H,WAAW,GAAGjD,QAAQ,CAAChF,QAAQ,CAACuF,kBAAkB,CAAC0C,WAAW,EAAElD,QAAQ,CAAC;IACzE,OAAOkD,WAAW;EACtB,CAAC;EACDjD,QAAQ,CAACc,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;IAChC,OAAOd,QAAQ,CAAC5E,SAAS;EAC7B,CAAC;EACD4E,QAAQ,CAAC/G,MAAM,CAAC8H,OAAO,CAACC,MAAM,CAAC,GAAG,SAASkC,WAAWA,CAACjC,MAAM,EAAEC,OAAO,EAAE;IACpE,OAAO,CAAC,CAAC,EAAEjI,MAAM,CAAC8H,OAAO,EAAEf,QAAQ,CAACc,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;EAC1D,CAAC;EACD,OAAOlB,QAAQ;AACnB;AACArH,OAAO,CAACG,mBAAmB,GAAGA,mBAAmB;AACjD,MAAMD,WAAW,SAASM,MAAM,CAACgK,OAAO,CAAC;EACrC;AACJ;AACA;AACA;AACA;AACA;AACA;EACIpI,WAAWA,CAACqH,OAAO,EAAEgB,QAAQ,EAAEC,QAAQ,EAAE;IACrC,KAAK,CAACjB,OAAO,EAAEgB,QAAQ,EAAEC,QAAQ,CAAC;EACtC;EACA;AACJ;AACA;AACA;AACA;EACIC,WAAWA,CAAChD,OAAO,EAAE;IACjB,OAAO,IAAIvH,eAAe,CAAC,IAAI,CAACiC,QAAQ,EAAEsF,OAAO,CAAC;EACtD;EACA,CAACrH,MAAM,CAAC8H,OAAO,CAACC,MAAM,EAAEuC,KAAK,EAAErC,OAAO,EAAE;IACpC,OAAO,CAAC,CAAC,EAAEjI,MAAM,CAAC8H,OAAO,EAAE,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;EACtD;AACJ;AACAvI,OAAO,CAACE,WAAW,GAAGA,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}