{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../../../base/values'); /* jshint ignore:line */\n\nvar WebhookList;\nvar WebhookPage;\nvar WebhookInstance;\nvar WebhookContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the WebhookList\n *\n * @constructor Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookList\n *\n * @param {Twilio.IpMessaging.V2} version - Version of the resource\n * @param {string} serviceSid - The service_sid\n * @param {string} channelSid - The channel_sid\n */\n/* jshint ignore:end */\nWebhookList = function WebhookList(version, serviceSid, channelSid) {\n  /* jshint ignore:start */\n  /**\n   * @function webhooks\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookContext}\n   */\n  /* jshint ignore:end */\n  function WebhookListInstance(sid) {\n    return WebhookListInstance.get(sid);\n  }\n  WebhookListInstance._version = version;\n  // Path Solution\n  WebhookListInstance._solution = {\n    serviceSid: serviceSid,\n    channelSid: channelSid\n  };\n  WebhookListInstance._uri = `/Services/${serviceSid}/Channels/${channelSid}/Webhooks`;\n  /* jshint ignore:start */\n  /**\n   * Streams WebhookInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  WebhookListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists WebhookInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  WebhookListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of WebhookInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  WebhookListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new WebhookPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of WebhookInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  WebhookListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new WebhookPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a WebhookInstance\n   *\n   * @function create\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookList#\n   *\n   * @param {object} opts - Options for request\n   * @param {webhook.type} opts.type - The type\n   * @param {string} [opts.configuration.url] - The configuration.url\n   * @param {webhook.method} [opts.configuration.method] - The configuration.method\n   * @param {string|list} [opts.configuration.filters] - The configuration.filters\n   * @param {string|list} [opts.configuration.triggers] - The configuration.triggers\n   * @param {string} [opts.configuration.flowSid] - The configuration.flow_sid\n   * @param {number} [opts.configuration.retryCount] - The configuration.retry_count\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed WebhookInstance\n   */\n  /* jshint ignore:end */\n  WebhookListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.type)) {\n      throw new Error('Required parameter \"opts.type\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'Type': _.get(opts, 'type'),\n      'Configuration.Url': _.get(opts, 'configuration.url'),\n      'Configuration.Method': _.get(opts, 'configuration.method'),\n      'Configuration.Filters': serialize.map(_.get(opts, 'configuration.filters'), function (e) {\n        return e;\n      }),\n      'Configuration.Triggers': serialize.map(_.get(opts, 'configuration.triggers'), function (e) {\n        return e;\n      }),\n      'Configuration.FlowSid': _.get(opts, 'configuration.flowSid'),\n      'Configuration.RetryCount': _.get(opts, 'configuration.retryCount')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new WebhookInstance(this._version, payload, this._solution.serviceSid, this._solution.channelSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a webhook\n   *\n   * @function get\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookList#\n   *\n   * @param {string} sid - The sid\n   *\n   * @returns {Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookContext}\n   */\n  /* jshint ignore:end */\n  WebhookListInstance.get = function get(sid) {\n    return new WebhookContext(this._version, this._solution.serviceSid, this._solution.channelSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  WebhookListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  WebhookListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return WebhookListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the WebhookPage\n *\n * @constructor Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {WebhookSolution} solution - Path solution\n *\n * @returns WebhookPage\n */\n/* jshint ignore:end */\nWebhookPage = function WebhookPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(WebhookPage.prototype, Page.prototype);\nWebhookPage.prototype.constructor = WebhookPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of WebhookInstance\n *\n * @function getInstance\n * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookPage#\n *\n * @param {WebhookPayload} payload - Payload response from the API\n *\n * @returns WebhookInstance\n */\n/* jshint ignore:end */\nWebhookPage.prototype.getInstance = function getInstance(payload) {\n  return new WebhookInstance(this._version, payload, this._solution.serviceSid, this._solution.channelSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nWebhookPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nWebhookPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the WebhookContext\n *\n * @constructor Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookInstance\n *\n * @property {string} sid - The sid\n * @property {string} accountSid - The account_sid\n * @property {string} serviceSid - The service_sid\n * @property {string} channelSid - The channel_sid\n * @property {string} type - The type\n * @property {string} url - The url\n * @property {object} configuration - The configuration\n * @property {Date} dateCreated - The date_created\n * @property {Date} dateUpdated - The date_updated\n *\n * @param {V2} version - Version of the resource\n * @param {WebhookPayload} payload - The instance payload\n * @param {sid} serviceSid - The service_sid\n * @param {sid} channelSid - The channel_sid\n * @param {sid} sid - The sid\n */\n/* jshint ignore:end */\nWebhookInstance = function WebhookInstance(version, payload, serviceSid, channelSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.channelSid = payload.channel_sid; // jshint ignore:line\n  this.type = payload.type; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.configuration = payload.configuration; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    channelSid: channelSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(WebhookInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new WebhookContext(this._version, this._solution.serviceSid, this._solution.channelSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a WebhookInstance\n *\n * @function fetch\n * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WebhookInstance\n */\n/* jshint ignore:end */\nWebhookInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a WebhookInstance\n *\n * @function update\n * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.configuration.url] - The configuration.url\n * @param {webhook.method} [opts.configuration.method] - The configuration.method\n * @param {string|list} [opts.configuration.filters] - The configuration.filters\n * @param {string|list} [opts.configuration.triggers] - The configuration.triggers\n * @param {string} [opts.configuration.flowSid] - The configuration.flow_sid\n * @param {number} [opts.configuration.retryCount] - The configuration.retry_count\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WebhookInstance\n */\n/* jshint ignore:end */\nWebhookInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a WebhookInstance\n *\n * @function remove\n * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WebhookInstance\n */\n/* jshint ignore:end */\nWebhookInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nWebhookInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nWebhookInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the WebhookContext\n *\n * @constructor Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid - The service_sid\n * @param {sid_like} channelSid - The channel_sid\n * @param {sid} sid - The sid\n */\n/* jshint ignore:end */\nWebhookContext = function WebhookContext(version, serviceSid, channelSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    serviceSid: serviceSid,\n    channelSid: channelSid,\n    sid: sid\n  };\n  this._uri = `/Services/${serviceSid}/Channels/${channelSid}/Webhooks/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a WebhookInstance\n *\n * @function fetch\n * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WebhookInstance\n */\n/* jshint ignore:end */\nWebhookContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new WebhookInstance(this._version, payload, this._solution.serviceSid, this._solution.channelSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a WebhookInstance\n *\n * @function update\n * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.configuration.url] - The configuration.url\n * @param {webhook.method} [opts.configuration.method] - The configuration.method\n * @param {string|list} [opts.configuration.filters] - The configuration.filters\n * @param {string|list} [opts.configuration.triggers] - The configuration.triggers\n * @param {string} [opts.configuration.flowSid] - The configuration.flow_sid\n * @param {number} [opts.configuration.retryCount] - The configuration.retry_count\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WebhookInstance\n */\n/* jshint ignore:end */\nWebhookContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Configuration.Url': _.get(opts, 'configuration.url'),\n    'Configuration.Method': _.get(opts, 'configuration.method'),\n    'Configuration.Filters': serialize.map(_.get(opts, 'configuration.filters'), function (e) {\n      return e;\n    }),\n    'Configuration.Triggers': serialize.map(_.get(opts, 'configuration.triggers'), function (e) {\n      return e;\n    }),\n    'Configuration.FlowSid': _.get(opts, 'configuration.flowSid'),\n    'Configuration.RetryCount': _.get(opts, 'configuration.retryCount')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new WebhookInstance(this._version, payload, this._solution.serviceSid, this._solution.channelSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a WebhookInstance\n *\n * @function remove\n * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WebhookInstance\n */\n/* jshint ignore:end */\nWebhookContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nWebhookContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nWebhookContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  WebhookList: WebhookList,\n  WebhookPage: WebhookPage,\n  WebhookInstance: WebhookInstance,\n  WebhookContext: WebhookContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","serialize","values","WebhookList","WebhookPage","WebhookInstance","WebhookContext","version","serviceSid","channelSid","WebhookListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","type","map","e","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","service_sid","channel_sid","url","configuration","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/ipMessaging/v2/service/channel/webhook.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar WebhookList;\nvar WebhookPage;\nvar WebhookInstance;\nvar WebhookContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the WebhookList\n *\n * @constructor Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookList\n *\n * @param {Twilio.IpMessaging.V2} version - Version of the resource\n * @param {string} serviceSid - The service_sid\n * @param {string} channelSid - The channel_sid\n */\n/* jshint ignore:end */\nWebhookList = function WebhookList(version, serviceSid, channelSid) {\n  /* jshint ignore:start */\n  /**\n   * @function webhooks\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookContext}\n   */\n  /* jshint ignore:end */\n  function WebhookListInstance(sid) {\n    return WebhookListInstance.get(sid);\n  }\n\n  WebhookListInstance._version = version;\n  // Path Solution\n  WebhookListInstance._solution = {serviceSid: serviceSid, channelSid: channelSid};\n  WebhookListInstance._uri = `/Services/${serviceSid}/Channels/${channelSid}/Webhooks`;\n  /* jshint ignore:start */\n  /**\n   * Streams WebhookInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  WebhookListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists WebhookInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  WebhookListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of WebhookInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  WebhookListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new WebhookPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of WebhookInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  WebhookListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new WebhookPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a WebhookInstance\n   *\n   * @function create\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookList#\n   *\n   * @param {object} opts - Options for request\n   * @param {webhook.type} opts.type - The type\n   * @param {string} [opts.configuration.url] - The configuration.url\n   * @param {webhook.method} [opts.configuration.method] - The configuration.method\n   * @param {string|list} [opts.configuration.filters] - The configuration.filters\n   * @param {string|list} [opts.configuration.triggers] - The configuration.triggers\n   * @param {string} [opts.configuration.flowSid] - The configuration.flow_sid\n   * @param {number} [opts.configuration.retryCount] - The configuration.retry_count\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed WebhookInstance\n   */\n  /* jshint ignore:end */\n  WebhookListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.type)) {\n      throw new Error('Required parameter \"opts.type\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Type': _.get(opts, 'type'),\n      'Configuration.Url': _.get(opts, 'configuration.url'),\n      'Configuration.Method': _.get(opts, 'configuration.method'),\n      'Configuration.Filters': serialize.map(_.get(opts, 'configuration.filters'), function(e) { return e; }),\n      'Configuration.Triggers': serialize.map(_.get(opts, 'configuration.triggers'), function(e) { return e; }),\n      'Configuration.FlowSid': _.get(opts, 'configuration.flowSid'),\n      'Configuration.RetryCount': _.get(opts, 'configuration.retryCount')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new WebhookInstance(\n        this._version,\n        payload,\n        this._solution.serviceSid,\n        this._solution.channelSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a webhook\n   *\n   * @function get\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookList#\n   *\n   * @param {string} sid - The sid\n   *\n   * @returns {Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookContext}\n   */\n  /* jshint ignore:end */\n  WebhookListInstance.get = function get(sid) {\n    return new WebhookContext(this._version, this._solution.serviceSid, this._solution.channelSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  WebhookListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  WebhookListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return WebhookListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the WebhookPage\n *\n * @constructor Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {WebhookSolution} solution - Path solution\n *\n * @returns WebhookPage\n */\n/* jshint ignore:end */\nWebhookPage = function WebhookPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(WebhookPage.prototype, Page.prototype);\nWebhookPage.prototype.constructor = WebhookPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of WebhookInstance\n *\n * @function getInstance\n * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookPage#\n *\n * @param {WebhookPayload} payload - Payload response from the API\n *\n * @returns WebhookInstance\n */\n/* jshint ignore:end */\nWebhookPage.prototype.getInstance = function getInstance(payload) {\n  return new WebhookInstance(\n    this._version,\n    payload,\n    this._solution.serviceSid,\n    this._solution.channelSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nWebhookPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nWebhookPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the WebhookContext\n *\n * @constructor Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookInstance\n *\n * @property {string} sid - The sid\n * @property {string} accountSid - The account_sid\n * @property {string} serviceSid - The service_sid\n * @property {string} channelSid - The channel_sid\n * @property {string} type - The type\n * @property {string} url - The url\n * @property {object} configuration - The configuration\n * @property {Date} dateCreated - The date_created\n * @property {Date} dateUpdated - The date_updated\n *\n * @param {V2} version - Version of the resource\n * @param {WebhookPayload} payload - The instance payload\n * @param {sid} serviceSid - The service_sid\n * @param {sid} channelSid - The channel_sid\n * @param {sid} sid - The sid\n */\n/* jshint ignore:end */\nWebhookInstance = function WebhookInstance(version, payload, serviceSid,\n                                            channelSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.channelSid = payload.channel_sid; // jshint ignore:line\n  this.type = payload.type; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.configuration = payload.configuration; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, channelSid: channelSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(WebhookInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new WebhookContext(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.channelSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a WebhookInstance\n *\n * @function fetch\n * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WebhookInstance\n */\n/* jshint ignore:end */\nWebhookInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a WebhookInstance\n *\n * @function update\n * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.configuration.url] - The configuration.url\n * @param {webhook.method} [opts.configuration.method] - The configuration.method\n * @param {string|list} [opts.configuration.filters] - The configuration.filters\n * @param {string|list} [opts.configuration.triggers] - The configuration.triggers\n * @param {string} [opts.configuration.flowSid] - The configuration.flow_sid\n * @param {number} [opts.configuration.retryCount] - The configuration.retry_count\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WebhookInstance\n */\n/* jshint ignore:end */\nWebhookInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a WebhookInstance\n *\n * @function remove\n * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WebhookInstance\n */\n/* jshint ignore:end */\nWebhookInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nWebhookInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nWebhookInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the WebhookContext\n *\n * @constructor Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid - The service_sid\n * @param {sid_like} channelSid - The channel_sid\n * @param {sid} sid - The sid\n */\n/* jshint ignore:end */\nWebhookContext = function WebhookContext(version, serviceSid, channelSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, channelSid: channelSid, sid: sid, };\n  this._uri = `/Services/${serviceSid}/Channels/${channelSid}/Webhooks/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a WebhookInstance\n *\n * @function fetch\n * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WebhookInstance\n */\n/* jshint ignore:end */\nWebhookContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new WebhookInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.channelSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a WebhookInstance\n *\n * @function update\n * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.configuration.url] - The configuration.url\n * @param {webhook.method} [opts.configuration.method] - The configuration.method\n * @param {string|list} [opts.configuration.filters] - The configuration.filters\n * @param {string|list} [opts.configuration.triggers] - The configuration.triggers\n * @param {string} [opts.configuration.flowSid] - The configuration.flow_sid\n * @param {number} [opts.configuration.retryCount] - The configuration.retry_count\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WebhookInstance\n */\n/* jshint ignore:end */\nWebhookContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Configuration.Url': _.get(opts, 'configuration.url'),\n    'Configuration.Method': _.get(opts, 'configuration.method'),\n    'Configuration.Filters': serialize.map(_.get(opts, 'configuration.filters'), function(e) { return e; }),\n    'Configuration.Triggers': serialize.map(_.get(opts, 'configuration.triggers'), function(e) { return e; }),\n    'Configuration.FlowSid': _.get(opts, 'configuration.flowSid'),\n    'Configuration.RetryCount': _.get(opts, 'configuration.retryCount')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new WebhookInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.channelSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a WebhookInstance\n *\n * @function remove\n * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WebhookInstance\n */\n/* jshint ignore:end */\nWebhookContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.IpMessaging.V2.ServiceContext.ChannelContext.WebhookContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nWebhookContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nWebhookContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  WebhookList: WebhookList,\n  WebhookPage: WebhookPage,\n  WebhookInstance: WebhookInstance,\n  WebhookContext: WebhookContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}