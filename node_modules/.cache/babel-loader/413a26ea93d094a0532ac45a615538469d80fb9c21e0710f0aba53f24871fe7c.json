{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar AccessTokenList = require('./service/accessToken').AccessTokenList;\nvar EntityList = require('./service/entity').EntityList;\nvar MessagingConfigurationList = require('./service/messagingConfiguration').MessagingConfigurationList;\nvar Page = require('../../../base/Page'); /* jshint ignore:line */\nvar RateLimitList = require('./service/rateLimit').RateLimitList;\nvar VerificationCheckList = require('./service/verificationCheck').VerificationCheckList;\nvar VerificationList = require('./service/verification').VerificationList;\nvar WebhookList = require('./service/webhook').WebhookList;\nvar deserialize = require('../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../base/values'); /* jshint ignore:line */\n\nvar ServiceList;\nvar ServicePage;\nvar ServiceInstance;\nvar ServiceContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceList\n *\n * @constructor Twilio.Verify.V2.ServiceList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n */\n/* jshint ignore:end */\nServiceList = function ServiceList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function services\n   * @memberof Twilio.Verify.V2#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext}\n   */\n  /* jshint ignore:end */\n  function ServiceListInstance(sid) {\n    return ServiceListInstance.get(sid);\n  }\n  ServiceListInstance._version = version;\n  // Path Solution\n  ServiceListInstance._solution = {};\n  ServiceListInstance._uri = `/Services`;\n  /* jshint ignore:start */\n  /**\n   * create a ServiceInstance\n   *\n   * @function create\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName -\n   *          A string to describe the verification service\n   * @param {number} [opts.codeLength] -\n   *          The length of the verification code to generate\n   * @param {boolean} [opts.lookupEnabled] -\n   *          Whether to perform a lookup with each verification\n   * @param {boolean} [opts.skipSmsToLandlines] -\n   *          Whether to skip sending SMS verifications to landlines\n   * @param {boolean} [opts.dtmfInputRequired] -\n   *          Whether to ask the user to press a number before delivering the verify code in a phone call\n   * @param {string} [opts.ttsName] -\n   *          The name of an alternative text-to-speech service to use in phone calls\n   * @param {boolean} [opts.psd2Enabled] -\n   *          Whether to pass PSD2 transaction parameters when starting a verification\n   * @param {boolean} [opts.doNotShareWarningEnabled] -\n   *          Whether to add a security warning at the end of an SMS.\n   * @param {boolean} [opts.customCodeEnabled] -\n   *          Whether to allow sending verifications with a custom code.\n   * @param {boolean} [opts.push.includeDate] -\n   *          Optional. Include the date in the Challenge's reponse. Default: true\n   * @param {string} [opts.push.apnCredentialSid] -\n   *          Optional. Set APN Credential for this service.\n   * @param {string} [opts.push.fcmCredentialSid] -\n   *          Optional. Set FCM Credential for this service.\n   * @param {string} [opts.totp.issuer] - Optional. Set TOTP Issuer for this service.\n   * @param {number} [opts.totp.timeStep] -\n   *          Optional. How often, in seconds, are TOTP codes generated\n   * @param {number} [opts.totp.codeLength] -\n   *          Optional. Number of digits for generated TOTP codes\n   * @param {number} [opts.totp.skew] -\n   *          Optional. The number of past and future time-steps valid at a given time\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ServiceInstance\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'CodeLength': _.get(opts, 'codeLength'),\n      'LookupEnabled': serialize.bool(_.get(opts, 'lookupEnabled')),\n      'SkipSmsToLandlines': serialize.bool(_.get(opts, 'skipSmsToLandlines')),\n      'DtmfInputRequired': serialize.bool(_.get(opts, 'dtmfInputRequired')),\n      'TtsName': _.get(opts, 'ttsName'),\n      'Psd2Enabled': serialize.bool(_.get(opts, 'psd2Enabled')),\n      'DoNotShareWarningEnabled': serialize.bool(_.get(opts, 'doNotShareWarningEnabled')),\n      'CustomCodeEnabled': serialize.bool(_.get(opts, 'customCodeEnabled')),\n      'Push.IncludeDate': serialize.bool(_.get(opts, 'push.includeDate')),\n      'Push.ApnCredentialSid': _.get(opts, 'push.apnCredentialSid'),\n      'Push.FcmCredentialSid': _.get(opts, 'push.fcmCredentialSid'),\n      'Totp.Issuer': _.get(opts, 'totp.issuer'),\n      'Totp.TimeStep': _.get(opts, 'totp.timeStep'),\n      'Totp.CodeLength': _.get(opts, 'totp.codeLength'),\n      'Totp.Skew': _.get(opts, 'totp.skew')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ServiceInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ServiceInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a service\n   *\n   * @function get\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext}\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.get = function get(sid) {\n    return new ServiceContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  ServiceListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return ServiceListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ServicePage\n *\n * @constructor Twilio.Verify.V2.ServicePage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ServiceSolution} solution - Path solution\n *\n * @returns ServicePage\n */\n/* jshint ignore:end */\nServicePage = function ServicePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(ServicePage.prototype, Page.prototype);\nServicePage.prototype.constructor = ServicePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ServiceInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.ServicePage#\n *\n * @param {ServicePayload} payload - Payload response from the API\n *\n * @returns ServiceInstance\n */\n/* jshint ignore:end */\nServicePage.prototype.getInstance = function getInstance(payload) {\n  return new ServiceInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServicePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServicePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nServicePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceContext\n *\n * @constructor Twilio.Verify.V2.ServiceInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the verification service\n * @property {number} codeLength - The length of the verification code\n * @property {boolean} lookupEnabled -\n *          Whether to perform a lookup with each verification\n * @property {boolean} psd2Enabled -\n *          Whether to pass PSD2 transaction parameters when starting a verification\n * @property {boolean} skipSmsToLandlines -\n *          Whether to skip sending SMS verifications to landlines\n * @property {boolean} dtmfInputRequired -\n *          Whether to ask the user to press a number before delivering the verify code in a phone call\n * @property {string} ttsName -\n *          The name of an alternative text-to-speech service to use in phone calls\n * @property {boolean} doNotShareWarningEnabled -\n *          Whether to add a security warning at the end of an SMS.\n * @property {boolean} customCodeEnabled -\n *          Whether to allow sending verifications with a custom code.\n * @property {object} push - The service level configuration of factor push type.\n * @property {object} totp - The service level configuration of factor TOTP type.\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V2} version - Version of the resource\n * @param {ServicePayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nServiceInstance = function ServiceInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.codeLength = deserialize.integer(payload.code_length); // jshint ignore:line\n  this.lookupEnabled = payload.lookup_enabled; // jshint ignore:line\n  this.psd2Enabled = payload.psd2_enabled; // jshint ignore:line\n  this.skipSmsToLandlines = payload.skip_sms_to_landlines; // jshint ignore:line\n  this.dtmfInputRequired = payload.dtmf_input_required; // jshint ignore:line\n  this.ttsName = payload.tts_name; // jshint ignore:line\n  this.doNotShareWarningEnabled = payload.do_not_share_warning_enabled; // jshint ignore:line\n  this.customCodeEnabled = payload.custom_code_enabled; // jshint ignore:line\n  this.push = payload.push; // jshint ignore:line\n  this.totp = payload.totp; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(ServiceInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ServiceContext(this._version, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A string to describe the verification service\n * @param {number} [opts.codeLength] -\n *          The length of the verification code to generate\n * @param {boolean} [opts.lookupEnabled] -\n *          Whether to perform a lookup with each verification\n * @param {boolean} [opts.skipSmsToLandlines] -\n *          Whether to skip sending SMS verifications to landlines\n * @param {boolean} [opts.dtmfInputRequired] -\n *          Whether to ask the user to press a number before delivering the verify code in a phone call\n * @param {string} [opts.ttsName] -\n *          The name of an alternative text-to-speech service to use in phone calls\n * @param {boolean} [opts.psd2Enabled] -\n *          Whether to pass PSD2 transaction parameters when starting a verification\n * @param {boolean} [opts.doNotShareWarningEnabled] -\n *          Whether to add a privacy warning at the end of an SMS.\n * @param {boolean} [opts.customCodeEnabled] -\n *          Whether to allow sending verifications with a custom code.\n * @param {boolean} [opts.push.includeDate] -\n *          Optional. Include the date in the Challenge's reponse. Default: true\n * @param {string} [opts.push.apnCredentialSid] -\n *          Optional. Set APN Credential for this service.\n * @param {string} [opts.push.fcmCredentialSid] -\n *          Optional. Set FCM Credential for this service.\n * @param {string} [opts.totp.issuer] - Optional. Set TOTP Issuer for this service.\n * @param {number} [opts.totp.timeStep] -\n *          Optional. How often, in seconds, are TOTP codes generated\n * @param {number} [opts.totp.codeLength] -\n *          Optional. Number of digits for generated TOTP codes\n * @param {number} [opts.totp.skew] -\n *          Optional. The number of past and future time-steps valid at a given time\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the verifications\n *\n * @function verifications\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.VerificationList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.verifications = function verifications() {\n  return this._proxy.verifications;\n};\n\n/* jshint ignore:start */\n/**\n * Access the verificationChecks\n *\n * @function verificationChecks\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.VerificationCheckList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.verificationChecks = function verificationChecks() {\n  return this._proxy.verificationChecks;\n};\n\n/* jshint ignore:start */\n/**\n * Access the rateLimits\n *\n * @function rateLimits\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.RateLimitList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.rateLimits = function rateLimits() {\n  return this._proxy.rateLimits;\n};\n\n/* jshint ignore:start */\n/**\n * Access the messagingConfigurations\n *\n * @function messagingConfigurations\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.MessagingConfigurationList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.messagingConfigurations = function messagingConfigurations() {\n  return this._proxy.messagingConfigurations;\n};\n\n/* jshint ignore:start */\n/**\n * Access the entities\n *\n * @function entities\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.EntityList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.entities = function entities() {\n  return this._proxy.entities;\n};\n\n/* jshint ignore:start */\n/**\n * Access the webhooks\n *\n * @function webhooks\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.WebhookList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.webhooks = function webhooks() {\n  return this._proxy.webhooks;\n};\n\n/* jshint ignore:start */\n/**\n * Access the accessTokens\n *\n * @function accessTokens\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.AccessTokenList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.accessTokens = function accessTokens() {\n  return this._proxy.accessTokens;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServiceInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nServiceInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceContext\n *\n * @constructor Twilio.Verify.V2.ServiceContext\n *\n * @property {Twilio.Verify.V2.ServiceContext.VerificationList} verifications -\n *          verifications resource\n * @property {Twilio.Verify.V2.ServiceContext.VerificationCheckList} verificationChecks -\n *          verificationChecks resource\n * @property {Twilio.Verify.V2.ServiceContext.RateLimitList} rateLimits -\n *          rateLimits resource\n * @property {Twilio.Verify.V2.ServiceContext.MessagingConfigurationList} messagingConfigurations -\n *          messagingConfigurations resource\n * @property {Twilio.Verify.V2.ServiceContext.EntityList} entities -\n *          entities resource\n * @property {Twilio.Verify.V2.ServiceContext.WebhookList} webhooks -\n *          webhooks resource\n * @property {Twilio.Verify.V2.ServiceContext.AccessTokenList} accessTokens -\n *          accessTokens resource\n *\n * @param {V2} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nServiceContext = function ServiceContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/Services/${sid}`;\n\n  // Dependents\n  this._verifications = undefined;\n  this._verificationChecks = undefined;\n  this._rateLimits = undefined;\n  this._messagingConfigurations = undefined;\n  this._entities = undefined;\n  this._webhooks = undefined;\n  this._accessTokens = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Verify.V2.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A string to describe the verification service\n * @param {number} [opts.codeLength] -\n *          The length of the verification code to generate\n * @param {boolean} [opts.lookupEnabled] -\n *          Whether to perform a lookup with each verification\n * @param {boolean} [opts.skipSmsToLandlines] -\n *          Whether to skip sending SMS verifications to landlines\n * @param {boolean} [opts.dtmfInputRequired] -\n *          Whether to ask the user to press a number before delivering the verify code in a phone call\n * @param {string} [opts.ttsName] -\n *          The name of an alternative text-to-speech service to use in phone calls\n * @param {boolean} [opts.psd2Enabled] -\n *          Whether to pass PSD2 transaction parameters when starting a verification\n * @param {boolean} [opts.doNotShareWarningEnabled] -\n *          Whether to add a privacy warning at the end of an SMS.\n * @param {boolean} [opts.customCodeEnabled] -\n *          Whether to allow sending verifications with a custom code.\n * @param {boolean} [opts.push.includeDate] -\n *          Optional. Include the date in the Challenge's reponse. Default: true\n * @param {string} [opts.push.apnCredentialSid] -\n *          Optional. Set APN Credential for this service.\n * @param {string} [opts.push.fcmCredentialSid] -\n *          Optional. Set FCM Credential for this service.\n * @param {string} [opts.totp.issuer] - Optional. Set TOTP Issuer for this service.\n * @param {number} [opts.totp.timeStep] -\n *          Optional. How often, in seconds, are TOTP codes generated\n * @param {number} [opts.totp.codeLength] -\n *          Optional. Number of digits for generated TOTP codes\n * @param {number} [opts.totp.skew] -\n *          Optional. The number of past and future time-steps valid at a given time\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'CodeLength': _.get(opts, 'codeLength'),\n    'LookupEnabled': serialize.bool(_.get(opts, 'lookupEnabled')),\n    'SkipSmsToLandlines': serialize.bool(_.get(opts, 'skipSmsToLandlines')),\n    'DtmfInputRequired': serialize.bool(_.get(opts, 'dtmfInputRequired')),\n    'TtsName': _.get(opts, 'ttsName'),\n    'Psd2Enabled': serialize.bool(_.get(opts, 'psd2Enabled')),\n    'DoNotShareWarningEnabled': serialize.bool(_.get(opts, 'doNotShareWarningEnabled')),\n    'CustomCodeEnabled': serialize.bool(_.get(opts, 'customCodeEnabled')),\n    'Push.IncludeDate': serialize.bool(_.get(opts, 'push.includeDate')),\n    'Push.ApnCredentialSid': _.get(opts, 'push.apnCredentialSid'),\n    'Push.FcmCredentialSid': _.get(opts, 'push.fcmCredentialSid'),\n    'Totp.Issuer': _.get(opts, 'totp.issuer'),\n    'Totp.TimeStep': _.get(opts, 'totp.timeStep'),\n    'Totp.CodeLength': _.get(opts, 'totp.codeLength'),\n    'Totp.Skew': _.get(opts, 'totp.skew')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(ServiceContext.prototype, 'verifications', {\n  get: function () {\n    if (!this._verifications) {\n      this._verifications = new VerificationList(this._version, this._solution.sid);\n    }\n    return this._verifications;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'verificationChecks', {\n  get: function () {\n    if (!this._verificationChecks) {\n      this._verificationChecks = new VerificationCheckList(this._version, this._solution.sid);\n    }\n    return this._verificationChecks;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'rateLimits', {\n  get: function () {\n    if (!this._rateLimits) {\n      this._rateLimits = new RateLimitList(this._version, this._solution.sid);\n    }\n    return this._rateLimits;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'messagingConfigurations', {\n  get: function () {\n    if (!this._messagingConfigurations) {\n      this._messagingConfigurations = new MessagingConfigurationList(this._version, this._solution.sid);\n    }\n    return this._messagingConfigurations;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'entities', {\n  get: function () {\n    if (!this._entities) {\n      this._entities = new EntityList(this._version, this._solution.sid);\n    }\n    return this._entities;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'webhooks', {\n  get: function () {\n    if (!this._webhooks) {\n      this._webhooks = new WebhookList(this._version, this._solution.sid);\n    }\n    return this._webhooks;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'accessTokens', {\n  get: function () {\n    if (!this._accessTokens) {\n      this._accessTokens = new AccessTokenList(this._version, this._solution.sid);\n    }\n    return this._accessTokens;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServiceContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nServiceContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  ServiceList: ServiceList,\n  ServicePage: ServicePage,\n  ServiceInstance: ServiceInstance,\n  ServiceContext: ServiceContext\n};","map":{"version":3,"names":["Q","require","_","util","AccessTokenList","EntityList","MessagingConfigurationList","Page","RateLimitList","VerificationCheckList","VerificationList","WebhookList","deserialize","serialize","values","ServiceList","ServicePage","ServiceInstance","ServiceContext","version","ServiceListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","friendlyName","deferred","defer","data","of","bool","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","friendly_name","codeLength","integer","code_length","lookupEnabled","lookup_enabled","psd2Enabled","psd2_enabled","skipSmsToLandlines","skip_sms_to_landlines","dtmfInputRequired","dtmf_input_required","ttsName","tts_name","doNotShareWarningEnabled","do_not_share_warning_enabled","customCodeEnabled","custom_code_enabled","totp","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","remove","update","verifications","verificationChecks","rateLimits","messagingConfigurations","entities","webhooks","accessTokens","_verifications","_verificationChecks","_rateLimits","_messagingConfigurations","_entities","_webhooks","_accessTokens","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/verify/v2/service.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar AccessTokenList = require('./service/accessToken').AccessTokenList;\nvar EntityList = require('./service/entity').EntityList;\nvar MessagingConfigurationList = require(\n    './service/messagingConfiguration').MessagingConfigurationList;\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar RateLimitList = require('./service/rateLimit').RateLimitList;\nvar VerificationCheckList = require(\n    './service/verificationCheck').VerificationCheckList;\nvar VerificationList = require('./service/verification').VerificationList;\nvar WebhookList = require('./service/webhook').WebhookList;\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar ServiceList;\nvar ServicePage;\nvar ServiceInstance;\nvar ServiceContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceList\n *\n * @constructor Twilio.Verify.V2.ServiceList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n */\n/* jshint ignore:end */\nServiceList = function ServiceList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function services\n   * @memberof Twilio.Verify.V2#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext}\n   */\n  /* jshint ignore:end */\n  function ServiceListInstance(sid) {\n    return ServiceListInstance.get(sid);\n  }\n\n  ServiceListInstance._version = version;\n  // Path Solution\n  ServiceListInstance._solution = {};\n  ServiceListInstance._uri = `/Services`;\n  /* jshint ignore:start */\n  /**\n   * create a ServiceInstance\n   *\n   * @function create\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName -\n   *          A string to describe the verification service\n   * @param {number} [opts.codeLength] -\n   *          The length of the verification code to generate\n   * @param {boolean} [opts.lookupEnabled] -\n   *          Whether to perform a lookup with each verification\n   * @param {boolean} [opts.skipSmsToLandlines] -\n   *          Whether to skip sending SMS verifications to landlines\n   * @param {boolean} [opts.dtmfInputRequired] -\n   *          Whether to ask the user to press a number before delivering the verify code in a phone call\n   * @param {string} [opts.ttsName] -\n   *          The name of an alternative text-to-speech service to use in phone calls\n   * @param {boolean} [opts.psd2Enabled] -\n   *          Whether to pass PSD2 transaction parameters when starting a verification\n   * @param {boolean} [opts.doNotShareWarningEnabled] -\n   *          Whether to add a security warning at the end of an SMS.\n   * @param {boolean} [opts.customCodeEnabled] -\n   *          Whether to allow sending verifications with a custom code.\n   * @param {boolean} [opts.push.includeDate] -\n   *          Optional. Include the date in the Challenge's reponse. Default: true\n   * @param {string} [opts.push.apnCredentialSid] -\n   *          Optional. Set APN Credential for this service.\n   * @param {string} [opts.push.fcmCredentialSid] -\n   *          Optional. Set FCM Credential for this service.\n   * @param {string} [opts.totp.issuer] - Optional. Set TOTP Issuer for this service.\n   * @param {number} [opts.totp.timeStep] -\n   *          Optional. How often, in seconds, are TOTP codes generated\n   * @param {number} [opts.totp.codeLength] -\n   *          Optional. Number of digits for generated TOTP codes\n   * @param {number} [opts.totp.skew] -\n   *          Optional. The number of past and future time-steps valid at a given time\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ServiceInstance\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'CodeLength': _.get(opts, 'codeLength'),\n      'LookupEnabled': serialize.bool(_.get(opts, 'lookupEnabled')),\n      'SkipSmsToLandlines': serialize.bool(_.get(opts, 'skipSmsToLandlines')),\n      'DtmfInputRequired': serialize.bool(_.get(opts, 'dtmfInputRequired')),\n      'TtsName': _.get(opts, 'ttsName'),\n      'Psd2Enabled': serialize.bool(_.get(opts, 'psd2Enabled')),\n      'DoNotShareWarningEnabled': serialize.bool(_.get(opts, 'doNotShareWarningEnabled')),\n      'CustomCodeEnabled': serialize.bool(_.get(opts, 'customCodeEnabled')),\n      'Push.IncludeDate': serialize.bool(_.get(opts, 'push.includeDate')),\n      'Push.ApnCredentialSid': _.get(opts, 'push.apnCredentialSid'),\n      'Push.FcmCredentialSid': _.get(opts, 'push.fcmCredentialSid'),\n      'Totp.Issuer': _.get(opts, 'totp.issuer'),\n      'Totp.TimeStep': _.get(opts, 'totp.timeStep'),\n      'Totp.CodeLength': _.get(opts, 'totp.codeLength'),\n      'Totp.Skew': _.get(opts, 'totp.skew')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ServiceInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ServiceInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a service\n   *\n   * @function get\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext}\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.get = function get(sid) {\n    return new ServiceContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ServiceListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ServiceListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ServicePage\n *\n * @constructor Twilio.Verify.V2.ServicePage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ServiceSolution} solution - Path solution\n *\n * @returns ServicePage\n */\n/* jshint ignore:end */\nServicePage = function ServicePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ServicePage.prototype, Page.prototype);\nServicePage.prototype.constructor = ServicePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ServiceInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.ServicePage#\n *\n * @param {ServicePayload} payload - Payload response from the API\n *\n * @returns ServiceInstance\n */\n/* jshint ignore:end */\nServicePage.prototype.getInstance = function getInstance(payload) {\n  return new ServiceInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServicePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServicePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nServicePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceContext\n *\n * @constructor Twilio.Verify.V2.ServiceInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the verification service\n * @property {number} codeLength - The length of the verification code\n * @property {boolean} lookupEnabled -\n *          Whether to perform a lookup with each verification\n * @property {boolean} psd2Enabled -\n *          Whether to pass PSD2 transaction parameters when starting a verification\n * @property {boolean} skipSmsToLandlines -\n *          Whether to skip sending SMS verifications to landlines\n * @property {boolean} dtmfInputRequired -\n *          Whether to ask the user to press a number before delivering the verify code in a phone call\n * @property {string} ttsName -\n *          The name of an alternative text-to-speech service to use in phone calls\n * @property {boolean} doNotShareWarningEnabled -\n *          Whether to add a security warning at the end of an SMS.\n * @property {boolean} customCodeEnabled -\n *          Whether to allow sending verifications with a custom code.\n * @property {object} push - The service level configuration of factor push type.\n * @property {object} totp - The service level configuration of factor TOTP type.\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V2} version - Version of the resource\n * @param {ServicePayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nServiceInstance = function ServiceInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.codeLength = deserialize.integer(payload.code_length); // jshint ignore:line\n  this.lookupEnabled = payload.lookup_enabled; // jshint ignore:line\n  this.psd2Enabled = payload.psd2_enabled; // jshint ignore:line\n  this.skipSmsToLandlines = payload.skip_sms_to_landlines; // jshint ignore:line\n  this.dtmfInputRequired = payload.dtmf_input_required; // jshint ignore:line\n  this.ttsName = payload.tts_name; // jshint ignore:line\n  this.doNotShareWarningEnabled = payload.do_not_share_warning_enabled; // jshint ignore:line\n  this.customCodeEnabled = payload.custom_code_enabled; // jshint ignore:line\n  this.push = payload.push; // jshint ignore:line\n  this.totp = payload.totp; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(ServiceInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new ServiceContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A string to describe the verification service\n * @param {number} [opts.codeLength] -\n *          The length of the verification code to generate\n * @param {boolean} [opts.lookupEnabled] -\n *          Whether to perform a lookup with each verification\n * @param {boolean} [opts.skipSmsToLandlines] -\n *          Whether to skip sending SMS verifications to landlines\n * @param {boolean} [opts.dtmfInputRequired] -\n *          Whether to ask the user to press a number before delivering the verify code in a phone call\n * @param {string} [opts.ttsName] -\n *          The name of an alternative text-to-speech service to use in phone calls\n * @param {boolean} [opts.psd2Enabled] -\n *          Whether to pass PSD2 transaction parameters when starting a verification\n * @param {boolean} [opts.doNotShareWarningEnabled] -\n *          Whether to add a privacy warning at the end of an SMS.\n * @param {boolean} [opts.customCodeEnabled] -\n *          Whether to allow sending verifications with a custom code.\n * @param {boolean} [opts.push.includeDate] -\n *          Optional. Include the date in the Challenge's reponse. Default: true\n * @param {string} [opts.push.apnCredentialSid] -\n *          Optional. Set APN Credential for this service.\n * @param {string} [opts.push.fcmCredentialSid] -\n *          Optional. Set FCM Credential for this service.\n * @param {string} [opts.totp.issuer] - Optional. Set TOTP Issuer for this service.\n * @param {number} [opts.totp.timeStep] -\n *          Optional. How often, in seconds, are TOTP codes generated\n * @param {number} [opts.totp.codeLength] -\n *          Optional. Number of digits for generated TOTP codes\n * @param {number} [opts.totp.skew] -\n *          Optional. The number of past and future time-steps valid at a given time\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the verifications\n *\n * @function verifications\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.VerificationList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.verifications = function verifications() {\n  return this._proxy.verifications;\n};\n\n/* jshint ignore:start */\n/**\n * Access the verificationChecks\n *\n * @function verificationChecks\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.VerificationCheckList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.verificationChecks = function verificationChecks() {\n  return this._proxy.verificationChecks;\n};\n\n/* jshint ignore:start */\n/**\n * Access the rateLimits\n *\n * @function rateLimits\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.RateLimitList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.rateLimits = function rateLimits() {\n  return this._proxy.rateLimits;\n};\n\n/* jshint ignore:start */\n/**\n * Access the messagingConfigurations\n *\n * @function messagingConfigurations\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.MessagingConfigurationList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.messagingConfigurations = function\n    messagingConfigurations() {\n  return this._proxy.messagingConfigurations;\n};\n\n/* jshint ignore:start */\n/**\n * Access the entities\n *\n * @function entities\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.EntityList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.entities = function entities() {\n  return this._proxy.entities;\n};\n\n/* jshint ignore:start */\n/**\n * Access the webhooks\n *\n * @function webhooks\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.WebhookList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.webhooks = function webhooks() {\n  return this._proxy.webhooks;\n};\n\n/* jshint ignore:start */\n/**\n * Access the accessTokens\n *\n * @function accessTokens\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.AccessTokenList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.accessTokens = function accessTokens() {\n  return this._proxy.accessTokens;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServiceInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nServiceInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceContext\n *\n * @constructor Twilio.Verify.V2.ServiceContext\n *\n * @property {Twilio.Verify.V2.ServiceContext.VerificationList} verifications -\n *          verifications resource\n * @property {Twilio.Verify.V2.ServiceContext.VerificationCheckList} verificationChecks -\n *          verificationChecks resource\n * @property {Twilio.Verify.V2.ServiceContext.RateLimitList} rateLimits -\n *          rateLimits resource\n * @property {Twilio.Verify.V2.ServiceContext.MessagingConfigurationList} messagingConfigurations -\n *          messagingConfigurations resource\n * @property {Twilio.Verify.V2.ServiceContext.EntityList} entities -\n *          entities resource\n * @property {Twilio.Verify.V2.ServiceContext.WebhookList} webhooks -\n *          webhooks resource\n * @property {Twilio.Verify.V2.ServiceContext.AccessTokenList} accessTokens -\n *          accessTokens resource\n *\n * @param {V2} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nServiceContext = function ServiceContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/Services/${sid}`;\n\n  // Dependents\n  this._verifications = undefined;\n  this._verificationChecks = undefined;\n  this._rateLimits = undefined;\n  this._messagingConfigurations = undefined;\n  this._entities = undefined;\n  this._webhooks = undefined;\n  this._accessTokens = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Verify.V2.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A string to describe the verification service\n * @param {number} [opts.codeLength] -\n *          The length of the verification code to generate\n * @param {boolean} [opts.lookupEnabled] -\n *          Whether to perform a lookup with each verification\n * @param {boolean} [opts.skipSmsToLandlines] -\n *          Whether to skip sending SMS verifications to landlines\n * @param {boolean} [opts.dtmfInputRequired] -\n *          Whether to ask the user to press a number before delivering the verify code in a phone call\n * @param {string} [opts.ttsName] -\n *          The name of an alternative text-to-speech service to use in phone calls\n * @param {boolean} [opts.psd2Enabled] -\n *          Whether to pass PSD2 transaction parameters when starting a verification\n * @param {boolean} [opts.doNotShareWarningEnabled] -\n *          Whether to add a privacy warning at the end of an SMS.\n * @param {boolean} [opts.customCodeEnabled] -\n *          Whether to allow sending verifications with a custom code.\n * @param {boolean} [opts.push.includeDate] -\n *          Optional. Include the date in the Challenge's reponse. Default: true\n * @param {string} [opts.push.apnCredentialSid] -\n *          Optional. Set APN Credential for this service.\n * @param {string} [opts.push.fcmCredentialSid] -\n *          Optional. Set FCM Credential for this service.\n * @param {string} [opts.totp.issuer] - Optional. Set TOTP Issuer for this service.\n * @param {number} [opts.totp.timeStep] -\n *          Optional. How often, in seconds, are TOTP codes generated\n * @param {number} [opts.totp.codeLength] -\n *          Optional. Number of digits for generated TOTP codes\n * @param {number} [opts.totp.skew] -\n *          Optional. The number of past and future time-steps valid at a given time\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'CodeLength': _.get(opts, 'codeLength'),\n    'LookupEnabled': serialize.bool(_.get(opts, 'lookupEnabled')),\n    'SkipSmsToLandlines': serialize.bool(_.get(opts, 'skipSmsToLandlines')),\n    'DtmfInputRequired': serialize.bool(_.get(opts, 'dtmfInputRequired')),\n    'TtsName': _.get(opts, 'ttsName'),\n    'Psd2Enabled': serialize.bool(_.get(opts, 'psd2Enabled')),\n    'DoNotShareWarningEnabled': serialize.bool(_.get(opts, 'doNotShareWarningEnabled')),\n    'CustomCodeEnabled': serialize.bool(_.get(opts, 'customCodeEnabled')),\n    'Push.IncludeDate': serialize.bool(_.get(opts, 'push.includeDate')),\n    'Push.ApnCredentialSid': _.get(opts, 'push.apnCredentialSid'),\n    'Push.FcmCredentialSid': _.get(opts, 'push.fcmCredentialSid'),\n    'Totp.Issuer': _.get(opts, 'totp.issuer'),\n    'Totp.TimeStep': _.get(opts, 'totp.timeStep'),\n    'Totp.CodeLength': _.get(opts, 'totp.codeLength'),\n    'Totp.Skew': _.get(opts, 'totp.skew')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ServiceContext.prototype,\n  'verifications', {\n    get: function() {\n      if (!this._verifications) {\n        this._verifications = new VerificationList(this._version, this._solution.sid);\n      }\n      return this._verifications;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'verificationChecks', {\n    get: function() {\n      if (!this._verificationChecks) {\n        this._verificationChecks = new VerificationCheckList(this._version, this._solution.sid);\n      }\n      return this._verificationChecks;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'rateLimits', {\n    get: function() {\n      if (!this._rateLimits) {\n        this._rateLimits = new RateLimitList(this._version, this._solution.sid);\n      }\n      return this._rateLimits;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'messagingConfigurations', {\n    get: function() {\n      if (!this._messagingConfigurations) {\n        this._messagingConfigurations = new MessagingConfigurationList(this._version, this._solution.sid);\n      }\n      return this._messagingConfigurations;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'entities', {\n    get: function() {\n      if (!this._entities) {\n        this._entities = new EntityList(this._version, this._solution.sid);\n      }\n      return this._entities;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'webhooks', {\n    get: function() {\n      if (!this._webhooks) {\n        this._webhooks = new WebhookList(this._version, this._solution.sid);\n      }\n      return this._webhooks;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'accessTokens', {\n    get: function() {\n      if (!this._accessTokens) {\n        this._accessTokens = new AccessTokenList(this._version, this._solution.sid);\n      }\n      return this._accessTokens;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServiceContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nServiceContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ServiceList: ServiceList,\n  ServicePage: ServicePage,\n  ServiceInstance: ServiceInstance,\n  ServiceContext: ServiceContext\n};\n"],"mappings":"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ACA;AACA;AACA1G,eAAe,CAACoE,SAAS,CAAC0C,KAAK,GAAG,SAASA,KAAKA,CAACnG,QAAQ,EAAE;EACzD,OAAO,IAAI,CAACoG,MAAM,CAACD,KAAK,CAACnG,QAAQ,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,eAAe,CAACoE,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAMA,CAACrG,QAAQ,EAAE;EAC3D,OAAO,IAAI,CAACoG,MAAM,CAACC,MAAM,CAACrG,QAAQ,CAAC;AACrC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,eAAe,CAACoE,SAAS,CAAC6C,MAAM,GAAG,SAASA,MAAMA,CAACvG,IAAI,EAAEC,QAAQ,EAAE;EACjE,OAAO,IAAI,CAACoG,MAAM,CAACE,MAAM,CAACvG,IAAI,EAAEC,QAAQ,CAAC;AAC3C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,eAAe,CAACoE,SAAS,CAAC8C,aAAa,GAAG,SAASA,aAAaA,CAAA,EAAG;EACjE,OAAO,IAAI,CAACH,MAAM,CAACG,aAAa;AAClC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAlH,eAAe,CAACoE,SAAS,CAAC+C,kBAAkB,GAAG,SAASA,kBAAkBA,CAAA,EAAG;EAC3E,OAAO,IAAI,CAACJ,MAAM,CAACI,kBAAkB;AACvC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAnH,eAAe,CAACoE,SAAS,CAACgD,UAAU,GAAG,SAASA,UAAUA,CAAA,EAAG;EAC3D,OAAO,IAAI,CAACL,MAAM,CAACK,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"},"metadata":{},"sourceType":"script","externalDependencies":[]}