{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reservationsUrl = exports.workersUrl = exports.activitiesUrl = exports.tasksUrl = exports.taskQueuesUrl = exports.workspacesUrl = exports.defaultEventBridgePolicies = exports.defaultWorkerPolicies = void 0;\nconst TaskRouterCapability_1 = require(\"./TaskRouterCapability\");\nconst EVENT_URL_BASE = \"https://event-bridge.twilio.com/v1/wschannels\";\nconst TASKROUTER_BASE_URL = \"https://taskrouter.twilio.com\";\nconst TASKROUTER_VERSION = \"v1\";\n/**\n * Build the default Policies for a worker\n *\n * @param version - TaskRouter version\n * @param workspaceSid - workspace sid\n * @param workerSid - worker sid\n * @returns list of Policies\n */\nfunction defaultWorkerPolicies(version, workspaceSid, workerSid) {\n  var activities = new TaskRouterCapability_1.Policy({\n    url: [TASKROUTER_BASE_URL, version, \"Workspaces\", workspaceSid, \"Activities\"].join(\"/\"),\n    method: \"GET\",\n    allow: true\n  });\n  var tasks = new TaskRouterCapability_1.Policy({\n    url: [TASKROUTER_BASE_URL, version, \"Workspaces\", workspaceSid, \"Tasks\", \"**\"].join(\"/\"),\n    method: \"GET\",\n    allow: true\n  });\n  var reservations = new TaskRouterCapability_1.Policy({\n    url: [TASKROUTER_BASE_URL, version, \"Workspaces\", workspaceSid, \"Workers\", workerSid, \"Reservations\", \"**\"].join(\"/\"),\n    method: \"GET\",\n    allow: true\n  });\n  var workerFetch = new TaskRouterCapability_1.Policy({\n    url: [TASKROUTER_BASE_URL, version, \"Workspaces\", workspaceSid, \"Workers\", workerSid].join(\"/\"),\n    method: \"GET\",\n    allow: true\n  });\n  return [activities, tasks, reservations, workerFetch];\n}\nexports.defaultWorkerPolicies = defaultWorkerPolicies;\n/**\n * Build the default Event Bridge Policies\n *\n * @param accountSid - account sid\n * @param channelId - channel id\n * @returns list of Policies\n */\nfunction defaultEventBridgePolicies(accountSid, channelId) {\n  var url = [EVENT_URL_BASE, accountSid, channelId].join(\"/\");\n  return [new TaskRouterCapability_1.Policy({\n    url: url,\n    method: \"GET\",\n    allow: true\n  }), new TaskRouterCapability_1.Policy({\n    url: url,\n    method: \"POST\",\n    allow: true\n  })];\n}\nexports.defaultEventBridgePolicies = defaultEventBridgePolicies;\n/**\n * Generate TaskRouter workspace url\n *\n * @param workspaceSid - workspace sid or '**' for all workspaces\n * @returns generated url\n */\nfunction workspacesUrl(workspaceSid) {\n  return [TASKROUTER_BASE_URL, TASKROUTER_VERSION, \"Workspaces\", workspaceSid].filter(item => typeof item === \"string\").join(\"/\");\n}\nexports.workspacesUrl = workspacesUrl;\n/**\n * Generate TaskRouter task queue url\n *\n * @param workspaceSid - workspace sid\n * @param taskQueueSid - task queue sid or '**' for all task queues\n * @returns generated url\n */\nfunction taskQueuesUrl(workspaceSid, taskQueueSid) {\n  return [workspacesUrl(workspaceSid), \"TaskQueues\", taskQueueSid].filter(item => typeof item === \"string\").join(\"/\");\n}\nexports.taskQueuesUrl = taskQueuesUrl;\n/**\n * Generate TaskRouter task url\n *\n * @param workspaceSid - workspace sid\n * @param taskSid - task sid or '**' for all tasks\n * @returns generated url\n */\nfunction tasksUrl(workspaceSid, taskSid) {\n  return [workspacesUrl(workspaceSid), \"Tasks\", taskSid].filter(item => typeof item === \"string\").join(\"/\");\n}\nexports.tasksUrl = tasksUrl;\n/**\n * Generate TaskRouter activity url\n *\n * @param workspaceSid - workspace sid\n * @param activitySid - activity sid or '**' for all activities\n * @returns generated url\n */\nfunction activitiesUrl(workspaceSid, activitySid) {\n  return [workspacesUrl(workspaceSid), \"Activities\", activitySid].filter(item => typeof item === \"string\").join(\"/\");\n}\nexports.activitiesUrl = activitiesUrl;\n/**\n * Generate TaskRouter worker url\n *\n * @param workspaceSid - workspace sid\n * @param workerSid - worker sid or '**' for all workers\n * @returns generated url\n */\nfunction workersUrl(workspaceSid, workerSid) {\n  return [workspacesUrl(workspaceSid), \"Workers\", workerSid].filter(item => typeof item === \"string\").join(\"/\");\n}\nexports.workersUrl = workersUrl;\n/**\n * Generate TaskRouter worker reservation url\n *\n * @param workspaceSid - workspace sid\n * @param workerSid - worker sid\n * @param reservationSid - reservation sid or '**' for all reservations\n * @returns generated url\n */\nfunction reservationsUrl(workspaceSid, workerSid, reservationSid) {\n  return [workersUrl(workspaceSid, workerSid), \"Reservations\", reservationSid].filter(item => typeof item === \"string\").join(\"/\");\n}\nexports.reservationsUrl = reservationsUrl;","map":{"version":3,"names":["Object","defineProperty","exports","value","reservationsUrl","workersUrl","activitiesUrl","tasksUrl","taskQueuesUrl","workspacesUrl","defaultEventBridgePolicies","defaultWorkerPolicies","TaskRouterCapability_1","require","EVENT_URL_BASE","TASKROUTER_BASE_URL","TASKROUTER_VERSION","version","workspaceSid","workerSid","activities","Policy","url","join","method","allow","tasks","reservations","workerFetch","accountSid","channelId","filter","item","taskQueueSid","taskSid","activitySid","reservationSid"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/jwt/taskrouter/util.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.reservationsUrl = exports.workersUrl = exports.activitiesUrl = exports.tasksUrl = exports.taskQueuesUrl = exports.workspacesUrl = exports.defaultEventBridgePolicies = exports.defaultWorkerPolicies = void 0;\nconst TaskRouterCapability_1 = require(\"./TaskRouterCapability\");\nconst EVENT_URL_BASE = \"https://event-bridge.twilio.com/v1/wschannels\";\nconst TASKROUTER_BASE_URL = \"https://taskrouter.twilio.com\";\nconst TASKROUTER_VERSION = \"v1\";\n/**\n * Build the default Policies for a worker\n *\n * @param version - TaskRouter version\n * @param workspaceSid - workspace sid\n * @param workerSid - worker sid\n * @returns list of Policies\n */\nfunction defaultWorkerPolicies(version, workspaceSid, workerSid) {\n    var activities = new TaskRouterCapability_1.Policy({\n        url: [\n            TASKROUTER_BASE_URL,\n            version,\n            \"Workspaces\",\n            workspaceSid,\n            \"Activities\",\n        ].join(\"/\"),\n        method: \"GET\",\n        allow: true,\n    });\n    var tasks = new TaskRouterCapability_1.Policy({\n        url: [\n            TASKROUTER_BASE_URL,\n            version,\n            \"Workspaces\",\n            workspaceSid,\n            \"Tasks\",\n            \"**\",\n        ].join(\"/\"),\n        method: \"GET\",\n        allow: true,\n    });\n    var reservations = new TaskRouterCapability_1.Policy({\n        url: [\n            TASKROUTER_BASE_URL,\n            version,\n            \"Workspaces\",\n            workspaceSid,\n            \"Workers\",\n            workerSid,\n            \"Reservations\",\n            \"**\",\n        ].join(\"/\"),\n        method: \"GET\",\n        allow: true,\n    });\n    var workerFetch = new TaskRouterCapability_1.Policy({\n        url: [\n            TASKROUTER_BASE_URL,\n            version,\n            \"Workspaces\",\n            workspaceSid,\n            \"Workers\",\n            workerSid,\n        ].join(\"/\"),\n        method: \"GET\",\n        allow: true,\n    });\n    return [activities, tasks, reservations, workerFetch];\n}\nexports.defaultWorkerPolicies = defaultWorkerPolicies;\n/**\n * Build the default Event Bridge Policies\n *\n * @param accountSid - account sid\n * @param channelId - channel id\n * @returns list of Policies\n */\nfunction defaultEventBridgePolicies(accountSid, channelId) {\n    var url = [EVENT_URL_BASE, accountSid, channelId].join(\"/\");\n    return [\n        new TaskRouterCapability_1.Policy({\n            url: url,\n            method: \"GET\",\n            allow: true,\n        }),\n        new TaskRouterCapability_1.Policy({\n            url: url,\n            method: \"POST\",\n            allow: true,\n        }),\n    ];\n}\nexports.defaultEventBridgePolicies = defaultEventBridgePolicies;\n/**\n * Generate TaskRouter workspace url\n *\n * @param workspaceSid - workspace sid or '**' for all workspaces\n * @returns generated url\n */\nfunction workspacesUrl(workspaceSid) {\n    return [TASKROUTER_BASE_URL, TASKROUTER_VERSION, \"Workspaces\", workspaceSid]\n        .filter((item) => typeof item === \"string\")\n        .join(\"/\");\n}\nexports.workspacesUrl = workspacesUrl;\n/**\n * Generate TaskRouter task queue url\n *\n * @param workspaceSid - workspace sid\n * @param taskQueueSid - task queue sid or '**' for all task queues\n * @returns generated url\n */\nfunction taskQueuesUrl(workspaceSid, taskQueueSid) {\n    return [workspacesUrl(workspaceSid), \"TaskQueues\", taskQueueSid]\n        .filter((item) => typeof item === \"string\")\n        .join(\"/\");\n}\nexports.taskQueuesUrl = taskQueuesUrl;\n/**\n * Generate TaskRouter task url\n *\n * @param workspaceSid - workspace sid\n * @param taskSid - task sid or '**' for all tasks\n * @returns generated url\n */\nfunction tasksUrl(workspaceSid, taskSid) {\n    return [workspacesUrl(workspaceSid), \"Tasks\", taskSid]\n        .filter((item) => typeof item === \"string\")\n        .join(\"/\");\n}\nexports.tasksUrl = tasksUrl;\n/**\n * Generate TaskRouter activity url\n *\n * @param workspaceSid - workspace sid\n * @param activitySid - activity sid or '**' for all activities\n * @returns generated url\n */\nfunction activitiesUrl(workspaceSid, activitySid) {\n    return [workspacesUrl(workspaceSid), \"Activities\", activitySid]\n        .filter((item) => typeof item === \"string\")\n        .join(\"/\");\n}\nexports.activitiesUrl = activitiesUrl;\n/**\n * Generate TaskRouter worker url\n *\n * @param workspaceSid - workspace sid\n * @param workerSid - worker sid or '**' for all workers\n * @returns generated url\n */\nfunction workersUrl(workspaceSid, workerSid) {\n    return [workspacesUrl(workspaceSid), \"Workers\", workerSid]\n        .filter((item) => typeof item === \"string\")\n        .join(\"/\");\n}\nexports.workersUrl = workersUrl;\n/**\n * Generate TaskRouter worker reservation url\n *\n * @param workspaceSid - workspace sid\n * @param workerSid - worker sid\n * @param reservationSid - reservation sid or '**' for all reservations\n * @returns generated url\n */\nfunction reservationsUrl(workspaceSid, workerSid, reservationSid) {\n    return [workersUrl(workspaceSid, workerSid), \"Reservations\", reservationSid]\n        .filter((item) => typeof item === \"string\")\n        .join(\"/\");\n}\nexports.reservationsUrl = reservationsUrl;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}