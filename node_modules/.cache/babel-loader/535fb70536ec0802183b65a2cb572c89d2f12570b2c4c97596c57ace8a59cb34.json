{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../../../base/values'); /* jshint ignore:line */\n\nvar WorkerChannelList;\nvar WorkerChannelPage;\nvar WorkerChannelInstance;\nvar WorkerChannelContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the WorkerChannelList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid -\n *          The SID of the Workspace that contains the WorkerChannel\n * @param {string} workerSid -\n *          The SID of the Worker that contains the WorkerChannel\n */\n/* jshint ignore:end */\nWorkerChannelList = function WorkerChannelList(version, workspaceSid, workerSid) {\n  /* jshint ignore:start */\n  /**\n   * @function workerChannels\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelContext}\n   */\n  /* jshint ignore:end */\n  function WorkerChannelListInstance(sid) {\n    return WorkerChannelListInstance.get(sid);\n  }\n  WorkerChannelListInstance._version = version;\n  // Path Solution\n  WorkerChannelListInstance._solution = {\n    workspaceSid: workspaceSid,\n    workerSid: workerSid\n  };\n  WorkerChannelListInstance._uri = `/Workspaces/${workspaceSid}/Workers/${workerSid}/Channels`;\n  /* jshint ignore:start */\n  /**\n   * Streams WorkerChannelInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  WorkerChannelListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists WorkerChannelInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  WorkerChannelListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of WorkerChannelInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  WorkerChannelListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new WorkerChannelPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of WorkerChannelInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  WorkerChannelListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new WorkerChannelPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a worker_channel\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelList#\n   *\n   * @param {string} sid - The SID of the to fetch\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelContext}\n   */\n  /* jshint ignore:end */\n  WorkerChannelListInstance.get = function get(sid) {\n    return new WorkerChannelContext(this._version, this._solution.workspaceSid, this._solution.workerSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  WorkerChannelListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  WorkerChannelListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return WorkerChannelListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the WorkerChannelPage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {WorkerChannelSolution} solution - Path solution\n *\n * @returns WorkerChannelPage\n */\n/* jshint ignore:end */\nWorkerChannelPage = function WorkerChannelPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(WorkerChannelPage.prototype, Page.prototype);\nWorkerChannelPage.prototype.constructor = WorkerChannelPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of WorkerChannelInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelPage#\n *\n * @param {WorkerChannelPayload} payload - Payload response from the API\n *\n * @returns WorkerChannelInstance\n */\n/* jshint ignore:end */\nWorkerChannelPage.prototype.getInstance = function getInstance(payload) {\n  return new WorkerChannelInstance(this._version, payload, this._solution.workspaceSid, this._solution.workerSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nWorkerChannelPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nWorkerChannelPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the WorkerChannelContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {number} assignedTasks -\n *          The total number of Tasks assigned to Worker for the TaskChannel type\n * @property {boolean} available -\n *          Whether the Worker should receive Tasks of the TaskChannel type\n * @property {number} availableCapacityPercentage -\n *          The current available capacity between 0 to 100 for the TaskChannel\n * @property {number} configuredCapacity -\n *          The current configured capacity for the WorkerChannel\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} taskChannelSid - The SID of the TaskChannel\n * @property {string} taskChannelUniqueName -\n *          The unique name of the TaskChannel, such as 'voice' or 'sms'\n * @property {string} workerSid -\n *          The SID of the Worker that contains the WorkerChannel\n * @property {string} workspaceSid -\n *          The SID of the Workspace that contains the WorkerChannel\n * @property {string} url - The absolute URL of the WorkerChannel resource\n *\n * @param {V1} version - Version of the resource\n * @param {WorkerChannelPayload} payload - The instance payload\n * @param {sid} workspaceSid -\n *          The SID of the Workspace that contains the WorkerChannel\n * @param {sid} workerSid - The SID of the Worker that contains the WorkerChannel\n * @param {sid_like} sid - The SID of the to fetch\n */\n/* jshint ignore:end */\nWorkerChannelInstance = function WorkerChannelInstance(version, payload, workspaceSid, workerSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.assignedTasks = deserialize.integer(payload.assigned_tasks); // jshint ignore:line\n  this.available = payload.available; // jshint ignore:line\n  this.availableCapacityPercentage = deserialize.integer(payload.available_capacity_percentage); // jshint ignore:line\n  this.configuredCapacity = deserialize.integer(payload.configured_capacity); // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.taskChannelSid = payload.task_channel_sid; // jshint ignore:line\n  this.taskChannelUniqueName = payload.task_channel_unique_name; // jshint ignore:line\n  this.workerSid = payload.worker_sid; // jshint ignore:line\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    workspaceSid: workspaceSid,\n    workerSid: workerSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(WorkerChannelInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new WorkerChannelContext(this._version, this._solution.workspaceSid, this._solution.workerSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a WorkerChannelInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerChannelInstance\n */\n/* jshint ignore:end */\nWorkerChannelInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a WorkerChannelInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {number} [opts.capacity] -\n *          The total number of Tasks that the Worker should handle for the TaskChannel type\n * @param {boolean} [opts.available] - Whether the WorkerChannel is available\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerChannelInstance\n */\n/* jshint ignore:end */\nWorkerChannelInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nWorkerChannelInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nWorkerChannelInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the WorkerChannelContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid -\n *          The SID of the Workspace with the WorkerChannel to fetch\n * @param {sid} workerSid - The SID of the Worker with the WorkerChannel to fetch\n * @param {sid_like} sid - The SID of the to fetch\n */\n/* jshint ignore:end */\nWorkerChannelContext = function WorkerChannelContext(version, workspaceSid, workerSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    workspaceSid: workspaceSid,\n    workerSid: workerSid,\n    sid: sid\n  };\n  this._uri = `/Workspaces/${workspaceSid}/Workers/${workerSid}/Channels/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a WorkerChannelInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerChannelInstance\n */\n/* jshint ignore:end */\nWorkerChannelContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new WorkerChannelInstance(this._version, payload, this._solution.workspaceSid, this._solution.workerSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a WorkerChannelInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelContext#\n *\n * @param {object} [opts] - Options for request\n * @param {number} [opts.capacity] -\n *          The total number of Tasks that the Worker should handle for the TaskChannel type\n * @param {boolean} [opts.available] - Whether the WorkerChannel is available\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerChannelInstance\n */\n/* jshint ignore:end */\nWorkerChannelContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Capacity': _.get(opts, 'capacity'),\n    'Available': serialize.bool(_.get(opts, 'available'))\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new WorkerChannelInstance(this._version, payload, this._solution.workspaceSid, this._solution.workerSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nWorkerChannelContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nWorkerChannelContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  WorkerChannelList: WorkerChannelList,\n  WorkerChannelPage: WorkerChannelPage,\n  WorkerChannelInstance: WorkerChannelInstance,\n  WorkerChannelContext: WorkerChannelContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","serialize","values","WorkerChannelList","WorkerChannelPage","WorkerChannelInstance","WorkerChannelContext","version","workspaceSid","workerSid","WorkerChannelListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","assignedTasks","integer","assigned_tasks","available","availableCapacityPercentage","available_capacity_percentage","configuredCapacity","configured_capacity","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","taskChannelSid","task_channel_sid","taskChannelUniqueName","task_channel_unique_name","worker_sid","workspace_sid","url","_context","undefined","Object","defineProperty","fetch","_proxy","update","bool","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/taskrouter/v1/workspace/worker/workerChannel.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar WorkerChannelList;\nvar WorkerChannelPage;\nvar WorkerChannelInstance;\nvar WorkerChannelContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the WorkerChannelList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid -\n *          The SID of the Workspace that contains the WorkerChannel\n * @param {string} workerSid -\n *          The SID of the Worker that contains the WorkerChannel\n */\n/* jshint ignore:end */\nWorkerChannelList = function WorkerChannelList(version, workspaceSid, workerSid)\n                                                {\n  /* jshint ignore:start */\n  /**\n   * @function workerChannels\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelContext}\n   */\n  /* jshint ignore:end */\n  function WorkerChannelListInstance(sid) {\n    return WorkerChannelListInstance.get(sid);\n  }\n\n  WorkerChannelListInstance._version = version;\n  // Path Solution\n  WorkerChannelListInstance._solution = {workspaceSid: workspaceSid, workerSid: workerSid};\n  WorkerChannelListInstance._uri = `/Workspaces/${workspaceSid}/Workers/${workerSid}/Channels`;\n  /* jshint ignore:start */\n  /**\n   * Streams WorkerChannelInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  WorkerChannelListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists WorkerChannelInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  WorkerChannelListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of WorkerChannelInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  WorkerChannelListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new WorkerChannelPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of WorkerChannelInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  WorkerChannelListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new WorkerChannelPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a worker_channel\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelList#\n   *\n   * @param {string} sid - The SID of the to fetch\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelContext}\n   */\n  /* jshint ignore:end */\n  WorkerChannelListInstance.get = function get(sid) {\n    return new WorkerChannelContext(\n      this._version,\n      this._solution.workspaceSid,\n      this._solution.workerSid,\n      sid\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  WorkerChannelListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  WorkerChannelListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return WorkerChannelListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the WorkerChannelPage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {WorkerChannelSolution} solution - Path solution\n *\n * @returns WorkerChannelPage\n */\n/* jshint ignore:end */\nWorkerChannelPage = function WorkerChannelPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(WorkerChannelPage.prototype, Page.prototype);\nWorkerChannelPage.prototype.constructor = WorkerChannelPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of WorkerChannelInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelPage#\n *\n * @param {WorkerChannelPayload} payload - Payload response from the API\n *\n * @returns WorkerChannelInstance\n */\n/* jshint ignore:end */\nWorkerChannelPage.prototype.getInstance = function getInstance(payload) {\n  return new WorkerChannelInstance(\n    this._version,\n    payload,\n    this._solution.workspaceSid,\n    this._solution.workerSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nWorkerChannelPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nWorkerChannelPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the WorkerChannelContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {number} assignedTasks -\n *          The total number of Tasks assigned to Worker for the TaskChannel type\n * @property {boolean} available -\n *          Whether the Worker should receive Tasks of the TaskChannel type\n * @property {number} availableCapacityPercentage -\n *          The current available capacity between 0 to 100 for the TaskChannel\n * @property {number} configuredCapacity -\n *          The current configured capacity for the WorkerChannel\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} taskChannelSid - The SID of the TaskChannel\n * @property {string} taskChannelUniqueName -\n *          The unique name of the TaskChannel, such as 'voice' or 'sms'\n * @property {string} workerSid -\n *          The SID of the Worker that contains the WorkerChannel\n * @property {string} workspaceSid -\n *          The SID of the Workspace that contains the WorkerChannel\n * @property {string} url - The absolute URL of the WorkerChannel resource\n *\n * @param {V1} version - Version of the resource\n * @param {WorkerChannelPayload} payload - The instance payload\n * @param {sid} workspaceSid -\n *          The SID of the Workspace that contains the WorkerChannel\n * @param {sid} workerSid - The SID of the Worker that contains the WorkerChannel\n * @param {sid_like} sid - The SID of the to fetch\n */\n/* jshint ignore:end */\nWorkerChannelInstance = function WorkerChannelInstance(version, payload,\n                                                        workspaceSid, workerSid,\n                                                        sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.assignedTasks = deserialize.integer(payload.assigned_tasks); // jshint ignore:line\n  this.available = payload.available; // jshint ignore:line\n  this.availableCapacityPercentage = deserialize.integer(payload.available_capacity_percentage); // jshint ignore:line\n  this.configuredCapacity = deserialize.integer(payload.configured_capacity); // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.taskChannelSid = payload.task_channel_sid; // jshint ignore:line\n  this.taskChannelUniqueName = payload.task_channel_unique_name; // jshint ignore:line\n  this.workerSid = payload.worker_sid; // jshint ignore:line\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {workspaceSid: workspaceSid, workerSid: workerSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(WorkerChannelInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new WorkerChannelContext(\n          this._version,\n          this._solution.workspaceSid,\n          this._solution.workerSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a WorkerChannelInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerChannelInstance\n */\n/* jshint ignore:end */\nWorkerChannelInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a WorkerChannelInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {number} [opts.capacity] -\n *          The total number of Tasks that the Worker should handle for the TaskChannel type\n * @param {boolean} [opts.available] - Whether the WorkerChannel is available\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerChannelInstance\n */\n/* jshint ignore:end */\nWorkerChannelInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nWorkerChannelInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nWorkerChannelInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the WorkerChannelContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid -\n *          The SID of the Workspace with the WorkerChannel to fetch\n * @param {sid} workerSid - The SID of the Worker with the WorkerChannel to fetch\n * @param {sid_like} sid - The SID of the to fetch\n */\n/* jshint ignore:end */\nWorkerChannelContext = function WorkerChannelContext(version, workspaceSid,\n                                                      workerSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {workspaceSid: workspaceSid, workerSid: workerSid, sid: sid, };\n  this._uri = `/Workspaces/${workspaceSid}/Workers/${workerSid}/Channels/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a WorkerChannelInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerChannelInstance\n */\n/* jshint ignore:end */\nWorkerChannelContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new WorkerChannelInstance(\n      this._version,\n      payload,\n      this._solution.workspaceSid,\n      this._solution.workerSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a WorkerChannelInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelContext#\n *\n * @param {object} [opts] - Options for request\n * @param {number} [opts.capacity] -\n *          The total number of Tasks that the Worker should handle for the TaskChannel type\n * @param {boolean} [opts.available] - Whether the WorkerChannel is available\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerChannelInstance\n */\n/* jshint ignore:end */\nWorkerChannelContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Capacity': _.get(opts, 'capacity'),\n    'Available': serialize.bool(_.get(opts, 'available'))\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new WorkerChannelInstance(\n      this._version,\n      payload,\n      this._solution.workspaceSid,\n      this._solution.workerSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nWorkerChannelContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nWorkerChannelContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  WorkerChannelList: WorkerChannelList,\n  WorkerChannelPage: WorkerChannelPage,\n  WorkerChannelInstance: WorkerChannelInstance,\n  WorkerChannelContext: WorkerChannelContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}