{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar DocumentList = require('./service/document').DocumentList;\nvar Page = require('../../../base/Page'); /* jshint ignore:line */\nvar SyncListList = require('./service/syncList').SyncListList;\nvar SyncMapList = require('./service/syncMap').SyncMapList;\nvar deserialize = require('../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../base/values'); /* jshint ignore:line */\n\nvar ServiceList;\nvar ServicePage;\nvar ServiceInstance;\nvar ServiceContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Sync.ServiceList\n *\n * @param {Twilio.Preview.Sync} version - Version of the resource\n */\n/* jshint ignore:end */\nServiceList = function ServiceList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function services\n   * @memberof Twilio.Preview.Sync#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Preview.Sync.ServiceContext}\n   */\n  /* jshint ignore:end */\n  function ServiceListInstance(sid) {\n    return ServiceListInstance.get(sid);\n  }\n  ServiceListInstance._version = version;\n  // Path Solution\n  ServiceListInstance._solution = {};\n  ServiceListInstance._uri = `/Services`;\n  /* jshint ignore:start */\n  /**\n   * create a ServiceInstance\n   *\n   * @function create\n   * @memberof Twilio.Preview.Sync.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] - The friendly_name\n   * @param {string} [opts.webhookUrl] - The webhook_url\n   * @param {boolean} [opts.reachabilityWebhooksEnabled] -\n   *          The reachability_webhooks_enabled\n   * @param {boolean} [opts.aclEnabled] - The acl_enabled\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ServiceInstance\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'WebhookUrl': _.get(opts, 'webhookUrl'),\n      'ReachabilityWebhooksEnabled': serialize.bool(_.get(opts, 'reachabilityWebhooksEnabled')),\n      'AclEnabled': serialize.bool(_.get(opts, 'aclEnabled'))\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ServiceInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Preview.Sync.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ServiceInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Preview.Sync.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Preview.Sync.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Preview.Sync.ServiceList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a service\n   *\n   * @function get\n   * @memberof Twilio.Preview.Sync.ServiceList#\n   *\n   * @param {string} sid - The sid\n   *\n   * @returns {Twilio.Preview.Sync.ServiceContext}\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.get = function get(sid) {\n    return new ServiceContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Preview.Sync.ServiceList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  ServiceListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return ServiceListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ServicePage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Sync.ServicePage\n *\n * @param {Sync} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ServiceSolution} solution - Path solution\n *\n * @returns ServicePage\n */\n/* jshint ignore:end */\nServicePage = function ServicePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(ServicePage.prototype, Page.prototype);\nServicePage.prototype.constructor = ServicePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ServiceInstance\n *\n * @function getInstance\n * @memberof Twilio.Preview.Sync.ServicePage#\n *\n * @param {ServicePayload} payload - Payload response from the API\n *\n * @returns ServiceInstance\n */\n/* jshint ignore:end */\nServicePage.prototype.getInstance = function getInstance(payload) {\n  return new ServiceInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Sync.ServicePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServicePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nServicePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Sync.ServiceInstance\n *\n * @property {string} sid - The sid\n * @property {string} accountSid - The account_sid\n * @property {string} friendlyName - The friendly_name\n * @property {Date} dateCreated - The date_created\n * @property {Date} dateUpdated - The date_updated\n * @property {string} url - The url\n * @property {string} webhookUrl - The webhook_url\n * @property {boolean} reachabilityWebhooksEnabled -\n *          The reachability_webhooks_enabled\n * @property {boolean} aclEnabled - The acl_enabled\n * @property {string} links - The links\n *\n * @param {Sync} version - Version of the resource\n * @param {ServicePayload} payload - The instance payload\n * @param {sid} sid - The sid\n */\n/* jshint ignore:end */\nServiceInstance = function ServiceInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.webhookUrl = payload.webhook_url; // jshint ignore:line\n  this.reachabilityWebhooksEnabled = payload.reachability_webhooks_enabled; // jshint ignore:line\n  this.aclEnabled = payload.acl_enabled; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(ServiceInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ServiceContext(this._version, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Sync.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Preview.Sync.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.Preview.Sync.ServiceInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.webhookUrl] - The webhook_url\n * @param {string} [opts.friendlyName] - The friendly_name\n * @param {boolean} [opts.reachabilityWebhooksEnabled] -\n *          The reachability_webhooks_enabled\n * @param {boolean} [opts.aclEnabled] - The acl_enabled\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the documents\n *\n * @function documents\n * @memberof Twilio.Preview.Sync.ServiceInstance#\n *\n * @returns {Twilio.Preview.Sync.ServiceContext.DocumentList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.documents = function documents() {\n  return this._proxy.documents;\n};\n\n/* jshint ignore:start */\n/**\n * Access the syncLists\n *\n * @function syncLists\n * @memberof Twilio.Preview.Sync.ServiceInstance#\n *\n * @returns {Twilio.Preview.Sync.ServiceContext.SyncListList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.syncLists = function syncLists() {\n  return this._proxy.syncLists;\n};\n\n/* jshint ignore:start */\n/**\n * Access the syncMaps\n *\n * @function syncMaps\n * @memberof Twilio.Preview.Sync.ServiceInstance#\n *\n * @returns {Twilio.Preview.Sync.ServiceContext.SyncMapList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.syncMaps = function syncMaps() {\n  return this._proxy.syncMaps;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Sync.ServiceInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServiceInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nServiceInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Sync.ServiceContext\n *\n * @property {Twilio.Preview.Sync.ServiceContext.DocumentList} documents -\n *          documents resource\n * @property {Twilio.Preview.Sync.ServiceContext.SyncListList} syncLists -\n *          syncLists resource\n * @property {Twilio.Preview.Sync.ServiceContext.SyncMapList} syncMaps -\n *          syncMaps resource\n *\n * @param {Sync} version - Version of the resource\n * @param {sid} sid - The sid\n */\n/* jshint ignore:end */\nServiceContext = function ServiceContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/Services/${sid}`;\n\n  // Dependents\n  this._documents = undefined;\n  this._syncLists = undefined;\n  this._syncMaps = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Sync.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Preview.Sync.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.Preview.Sync.ServiceContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.webhookUrl] - The webhook_url\n * @param {string} [opts.friendlyName] - The friendly_name\n * @param {boolean} [opts.reachabilityWebhooksEnabled] -\n *          The reachability_webhooks_enabled\n * @param {boolean} [opts.aclEnabled] - The acl_enabled\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'WebhookUrl': _.get(opts, 'webhookUrl'),\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'ReachabilityWebhooksEnabled': serialize.bool(_.get(opts, 'reachabilityWebhooksEnabled')),\n    'AclEnabled': serialize.bool(_.get(opts, 'aclEnabled'))\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(ServiceContext.prototype, 'documents', {\n  get: function () {\n    if (!this._documents) {\n      this._documents = new DocumentList(this._version, this._solution.sid);\n    }\n    return this._documents;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'syncLists', {\n  get: function () {\n    if (!this._syncLists) {\n      this._syncLists = new SyncListList(this._version, this._solution.sid);\n    }\n    return this._syncLists;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'syncMaps', {\n  get: function () {\n    if (!this._syncMaps) {\n      this._syncMaps = new SyncMapList(this._version, this._solution.sid);\n    }\n    return this._syncMaps;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Sync.ServiceContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServiceContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nServiceContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  ServiceList: ServiceList,\n  ServicePage: ServicePage,\n  ServiceInstance: ServiceInstance,\n  ServiceContext: ServiceContext\n};","map":{"version":3,"names":["Q","require","_","util","DocumentList","Page","SyncListList","SyncMapList","deserialize","serialize","values","ServiceList","ServicePage","ServiceInstance","ServiceContext","version","ServiceListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isFunction","deferred","defer","data","of","bool","promise","uri","method","then","payload","resolve","bind","catch","error","reject","nodeify","each","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","friendlyName","friendly_name","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","webhookUrl","webhook_url","reachabilityWebhooksEnabled","reachability_webhooks_enabled","aclEnabled","acl_enabled","links","_context","undefined","Object","defineProperty","fetch","_proxy","remove","update","documents","syncLists","syncMaps","_documents","_syncLists","_syncMaps","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/preview/sync/service.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar DocumentList = require('./service/document').DocumentList;\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar SyncListList = require('./service/syncList').SyncListList;\nvar SyncMapList = require('./service/syncMap').SyncMapList;\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar ServiceList;\nvar ServicePage;\nvar ServiceInstance;\nvar ServiceContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Sync.ServiceList\n *\n * @param {Twilio.Preview.Sync} version - Version of the resource\n */\n/* jshint ignore:end */\nServiceList = function ServiceList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function services\n   * @memberof Twilio.Preview.Sync#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Preview.Sync.ServiceContext}\n   */\n  /* jshint ignore:end */\n  function ServiceListInstance(sid) {\n    return ServiceListInstance.get(sid);\n  }\n\n  ServiceListInstance._version = version;\n  // Path Solution\n  ServiceListInstance._solution = {};\n  ServiceListInstance._uri = `/Services`;\n  /* jshint ignore:start */\n  /**\n   * create a ServiceInstance\n   *\n   * @function create\n   * @memberof Twilio.Preview.Sync.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] - The friendly_name\n   * @param {string} [opts.webhookUrl] - The webhook_url\n   * @param {boolean} [opts.reachabilityWebhooksEnabled] -\n   *          The reachability_webhooks_enabled\n   * @param {boolean} [opts.aclEnabled] - The acl_enabled\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ServiceInstance\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'WebhookUrl': _.get(opts, 'webhookUrl'),\n      'ReachabilityWebhooksEnabled': serialize.bool(_.get(opts, 'reachabilityWebhooksEnabled')),\n      'AclEnabled': serialize.bool(_.get(opts, 'aclEnabled'))\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ServiceInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Preview.Sync.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ServiceInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Preview.Sync.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Preview.Sync.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Preview.Sync.ServiceList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a service\n   *\n   * @function get\n   * @memberof Twilio.Preview.Sync.ServiceList#\n   *\n   * @param {string} sid - The sid\n   *\n   * @returns {Twilio.Preview.Sync.ServiceContext}\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.get = function get(sid) {\n    return new ServiceContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Preview.Sync.ServiceList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ServiceListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ServiceListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ServicePage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Sync.ServicePage\n *\n * @param {Sync} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ServiceSolution} solution - Path solution\n *\n * @returns ServicePage\n */\n/* jshint ignore:end */\nServicePage = function ServicePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ServicePage.prototype, Page.prototype);\nServicePage.prototype.constructor = ServicePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ServiceInstance\n *\n * @function getInstance\n * @memberof Twilio.Preview.Sync.ServicePage#\n *\n * @param {ServicePayload} payload - Payload response from the API\n *\n * @returns ServiceInstance\n */\n/* jshint ignore:end */\nServicePage.prototype.getInstance = function getInstance(payload) {\n  return new ServiceInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Sync.ServicePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServicePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nServicePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Sync.ServiceInstance\n *\n * @property {string} sid - The sid\n * @property {string} accountSid - The account_sid\n * @property {string} friendlyName - The friendly_name\n * @property {Date} dateCreated - The date_created\n * @property {Date} dateUpdated - The date_updated\n * @property {string} url - The url\n * @property {string} webhookUrl - The webhook_url\n * @property {boolean} reachabilityWebhooksEnabled -\n *          The reachability_webhooks_enabled\n * @property {boolean} aclEnabled - The acl_enabled\n * @property {string} links - The links\n *\n * @param {Sync} version - Version of the resource\n * @param {ServicePayload} payload - The instance payload\n * @param {sid} sid - The sid\n */\n/* jshint ignore:end */\nServiceInstance = function ServiceInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.webhookUrl = payload.webhook_url; // jshint ignore:line\n  this.reachabilityWebhooksEnabled = payload.reachability_webhooks_enabled; // jshint ignore:line\n  this.aclEnabled = payload.acl_enabled; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(ServiceInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new ServiceContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Sync.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Preview.Sync.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.Preview.Sync.ServiceInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.webhookUrl] - The webhook_url\n * @param {string} [opts.friendlyName] - The friendly_name\n * @param {boolean} [opts.reachabilityWebhooksEnabled] -\n *          The reachability_webhooks_enabled\n * @param {boolean} [opts.aclEnabled] - The acl_enabled\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the documents\n *\n * @function documents\n * @memberof Twilio.Preview.Sync.ServiceInstance#\n *\n * @returns {Twilio.Preview.Sync.ServiceContext.DocumentList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.documents = function documents() {\n  return this._proxy.documents;\n};\n\n/* jshint ignore:start */\n/**\n * Access the syncLists\n *\n * @function syncLists\n * @memberof Twilio.Preview.Sync.ServiceInstance#\n *\n * @returns {Twilio.Preview.Sync.ServiceContext.SyncListList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.syncLists = function syncLists() {\n  return this._proxy.syncLists;\n};\n\n/* jshint ignore:start */\n/**\n * Access the syncMaps\n *\n * @function syncMaps\n * @memberof Twilio.Preview.Sync.ServiceInstance#\n *\n * @returns {Twilio.Preview.Sync.ServiceContext.SyncMapList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.syncMaps = function syncMaps() {\n  return this._proxy.syncMaps;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Sync.ServiceInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServiceInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nServiceInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Sync.ServiceContext\n *\n * @property {Twilio.Preview.Sync.ServiceContext.DocumentList} documents -\n *          documents resource\n * @property {Twilio.Preview.Sync.ServiceContext.SyncListList} syncLists -\n *          syncLists resource\n * @property {Twilio.Preview.Sync.ServiceContext.SyncMapList} syncMaps -\n *          syncMaps resource\n *\n * @param {Sync} version - Version of the resource\n * @param {sid} sid - The sid\n */\n/* jshint ignore:end */\nServiceContext = function ServiceContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/Services/${sid}`;\n\n  // Dependents\n  this._documents = undefined;\n  this._syncLists = undefined;\n  this._syncMaps = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Sync.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Preview.Sync.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.Preview.Sync.ServiceContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.webhookUrl] - The webhook_url\n * @param {string} [opts.friendlyName] - The friendly_name\n * @param {boolean} [opts.reachabilityWebhooksEnabled] -\n *          The reachability_webhooks_enabled\n * @param {boolean} [opts.aclEnabled] - The acl_enabled\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'WebhookUrl': _.get(opts, 'webhookUrl'),\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'ReachabilityWebhooksEnabled': serialize.bool(_.get(opts, 'reachabilityWebhooksEnabled')),\n    'AclEnabled': serialize.bool(_.get(opts, 'aclEnabled'))\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ServiceContext.prototype,\n  'documents', {\n    get: function() {\n      if (!this._documents) {\n        this._documents = new DocumentList(this._version, this._solution.sid);\n      }\n      return this._documents;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'syncLists', {\n    get: function() {\n      if (!this._syncLists) {\n        this._syncLists = new SyncListList(this._version, this._solution.sid);\n      }\n      return this._syncLists;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'syncMaps', {\n    get: function() {\n      if (!this._syncMaps) {\n        this._syncMaps = new SyncMapList(this._version, this._solution.sid);\n      }\n      return this._syncMaps;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Sync.ServiceContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServiceContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nServiceContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ServiceList: ServiceList,\n  ServicePage: ServicePage,\n  ServiceInstance: ServiceInstance,\n  ServiceContext: ServiceContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}