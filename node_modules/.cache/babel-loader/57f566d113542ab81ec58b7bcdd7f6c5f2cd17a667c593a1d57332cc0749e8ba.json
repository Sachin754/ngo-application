{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar CredentialListList = require('./trunk/credentialList').CredentialListList;\nvar IpAccessControlListList = require('./trunk/ipAccessControlList').IpAccessControlListList;\nvar OriginationUrlList = require('./trunk/originationUrl').OriginationUrlList;\nvar Page = require('../../../base/Page'); /* jshint ignore:line */\nvar PhoneNumberList = require('./trunk/phoneNumber').PhoneNumberList;\nvar RecordingList = require('./trunk/recording').RecordingList;\nvar deserialize = require('../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../base/values'); /* jshint ignore:line */\n\nvar TrunkList;\nvar TrunkPage;\nvar TrunkInstance;\nvar TrunkContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the TrunkList\n *\n * @constructor Twilio.Trunking.V1.TrunkList\n *\n * @param {Twilio.Trunking.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nTrunkList = function TrunkList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function trunks\n   * @memberof Twilio.Trunking.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Trunking.V1.TrunkContext}\n   */\n  /* jshint ignore:end */\n  function TrunkListInstance(sid) {\n    return TrunkListInstance.get(sid);\n  }\n  TrunkListInstance._version = version;\n  // Path Solution\n  TrunkListInstance._solution = {};\n  TrunkListInstance._uri = `/Trunks`;\n  /* jshint ignore:start */\n  /**\n   * create a TrunkInstance\n   *\n   * @function create\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] - A string to describe the resource\n   * @param {string} [opts.domainName] -\n   *          The unique address you reserve on Twilio to which you route your SIP traffic\n   * @param {string} [opts.disasterRecoveryUrl] -\n   *          The HTTP URL that we should call if an error occurs while sending SIP traffic towards your configured Origination URL\n   * @param {string} [opts.disasterRecoveryMethod] -\n   *          The HTTP method we should use to call the disaster_recovery_url\n   * @param {trunk.transfer_setting} [opts.transferMode] -\n   *          The call transfer settings for the trunk\n   * @param {boolean} [opts.secure] -\n   *          Whether Secure Trunking is enabled for the trunk\n   * @param {boolean} [opts.cnamLookupEnabled] -\n   *          Whether Caller ID Name (CNAM) lookup should be enabled for the trunk\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TrunkInstance\n   */\n  /* jshint ignore:end */\n  TrunkListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'DomainName': _.get(opts, 'domainName'),\n      'DisasterRecoveryUrl': _.get(opts, 'disasterRecoveryUrl'),\n      'DisasterRecoveryMethod': _.get(opts, 'disasterRecoveryMethod'),\n      'TransferMode': _.get(opts, 'transferMode'),\n      'Secure': serialize.bool(_.get(opts, 'secure')),\n      'CnamLookupEnabled': serialize.bool(_.get(opts, 'cnamLookupEnabled'))\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TrunkInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams TrunkInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  TrunkListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists TrunkInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TrunkListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of TrunkInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TrunkListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TrunkPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of TrunkInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TrunkListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TrunkPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a trunk\n   *\n   * @function get\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Trunking.V1.TrunkContext}\n   */\n  /* jshint ignore:end */\n  TrunkListInstance.get = function get(sid) {\n    return new TrunkContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  TrunkListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  TrunkListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return TrunkListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the TrunkPage\n *\n * @constructor Twilio.Trunking.V1.TrunkPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TrunkSolution} solution - Path solution\n *\n * @returns TrunkPage\n */\n/* jshint ignore:end */\nTrunkPage = function TrunkPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(TrunkPage.prototype, Page.prototype);\nTrunkPage.prototype.constructor = TrunkPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of TrunkInstance\n *\n * @function getInstance\n * @memberof Twilio.Trunking.V1.TrunkPage#\n *\n * @param {TrunkPayload} payload - Payload response from the API\n *\n * @returns TrunkInstance\n */\n/* jshint ignore:end */\nTrunkPage.prototype.getInstance = function getInstance(payload) {\n  return new TrunkInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trunking.V1.TrunkPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTrunkPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nTrunkPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the TrunkContext\n *\n * @constructor Twilio.Trunking.V1.TrunkInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} domainName -\n *          The unique address you reserve on Twilio to which you route your SIP traffic\n * @property {string} disasterRecoveryMethod -\n *          The HTTP method we use to call the disaster_recovery_url\n * @property {string} disasterRecoveryUrl -\n *          The HTTP URL that we call if an error occurs while sending SIP traffic towards your configured Origination URL\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {boolean} secure - Whether Secure Trunking is enabled for the trunk\n * @property {object} recording - The recording settings for the trunk\n * @property {trunk.transfer_setting} transferMode -\n *          The call transfer settings for the trunk\n * @property {boolean} cnamLookupEnabled -\n *          Whether Caller ID Name (CNAM) lookup is enabled for the trunk\n * @property {string} authType - The types of authentication mapped to the domain\n * @property {string} authTypeSet - Reserved\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {TrunkPayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nTrunkInstance = function TrunkInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.domainName = payload.domain_name; // jshint ignore:line\n  this.disasterRecoveryMethod = payload.disaster_recovery_method; // jshint ignore:line\n  this.disasterRecoveryUrl = payload.disaster_recovery_url; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.secure = payload.secure; // jshint ignore:line\n  this.recording = payload.recording; // jshint ignore:line\n  this.transferMode = payload.transfer_mode; // jshint ignore:line\n  this.cnamLookupEnabled = payload.cnam_lookup_enabled; // jshint ignore:line\n  this.authType = payload.auth_type; // jshint ignore:line\n  this.authTypeSet = payload.auth_type_set; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(TrunkInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new TrunkContext(this._version, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a TrunkInstance\n *\n * @function fetch\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrunkInstance\n */\n/* jshint ignore:end */\nTrunkInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a TrunkInstance\n *\n * @function remove\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrunkInstance\n */\n/* jshint ignore:end */\nTrunkInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a TrunkInstance\n *\n * @function update\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.domainName] -\n *          The unique address you reserve on Twilio to which you route your SIP traffic\n * @param {string} [opts.disasterRecoveryUrl] -\n *          The HTTP URL that we should call if an error occurs while sending SIP traffic towards your configured Origination URL\n * @param {string} [opts.disasterRecoveryMethod] -\n *          The HTTP method we should use to call the disaster_recovery_url\n * @param {trunk.transfer_setting} [opts.transferMode] -\n *          The call transfer settings for the trunk\n * @param {boolean} [opts.secure] -\n *          Whether Secure Trunking is enabled for the trunk\n * @param {boolean} [opts.cnamLookupEnabled] -\n *          Whether Caller ID Name (CNAM) lookup should be enabled for the trunk\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrunkInstance\n */\n/* jshint ignore:end */\nTrunkInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the originationUrls\n *\n * @function originationUrls\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @returns {Twilio.Trunking.V1.TrunkContext.OriginationUrlList}\n */\n/* jshint ignore:end */\nTrunkInstance.prototype.originationUrls = function originationUrls() {\n  return this._proxy.originationUrls;\n};\n\n/* jshint ignore:start */\n/**\n * Access the credentialsLists\n *\n * @function credentialsLists\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @returns {Twilio.Trunking.V1.TrunkContext.CredentialListList}\n */\n/* jshint ignore:end */\nTrunkInstance.prototype.credentialsLists = function credentialsLists() {\n  return this._proxy.credentialsLists;\n};\n\n/* jshint ignore:start */\n/**\n * Access the ipAccessControlLists\n *\n * @function ipAccessControlLists\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @returns {Twilio.Trunking.V1.TrunkContext.IpAccessControlListList}\n */\n/* jshint ignore:end */\nTrunkInstance.prototype.ipAccessControlLists = function ipAccessControlLists() {\n  return this._proxy.ipAccessControlLists;\n};\n\n/* jshint ignore:start */\n/**\n * Access the phoneNumbers\n *\n * @function phoneNumbers\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @returns {Twilio.Trunking.V1.TrunkContext.PhoneNumberList}\n */\n/* jshint ignore:end */\nTrunkInstance.prototype.phoneNumbers = function phoneNumbers() {\n  return this._proxy.phoneNumbers;\n};\n\n/* jshint ignore:start */\n/**\n * Access the recordings\n *\n * @function recordings\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @returns {Twilio.Trunking.V1.TrunkContext.RecordingList}\n */\n/* jshint ignore:end */\nTrunkInstance.prototype.recordings = function recordings() {\n  return this._proxy.recordings;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTrunkInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nTrunkInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the TrunkContext\n *\n * @constructor Twilio.Trunking.V1.TrunkContext\n *\n * @property {Twilio.Trunking.V1.TrunkContext.OriginationUrlList} originationUrls -\n *          originationUrls resource\n * @property {Twilio.Trunking.V1.TrunkContext.CredentialListList} credentialsLists -\n *          credentialsLists resource\n * @property {Twilio.Trunking.V1.TrunkContext.IpAccessControlListList} ipAccessControlLists -\n *          ipAccessControlLists resource\n * @property {Twilio.Trunking.V1.TrunkContext.PhoneNumberList} phoneNumbers -\n *          phoneNumbers resource\n * @property {Twilio.Trunking.V1.TrunkContext.RecordingList} recordings -\n *          recordings resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nTrunkContext = function TrunkContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/Trunks/${sid}`;\n\n  // Dependents\n  this._originationUrls = undefined;\n  this._credentialsLists = undefined;\n  this._ipAccessControlLists = undefined;\n  this._phoneNumbers = undefined;\n  this._recordings = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a TrunkInstance\n *\n * @function fetch\n * @memberof Twilio.Trunking.V1.TrunkContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrunkInstance\n */\n/* jshint ignore:end */\nTrunkContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TrunkInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a TrunkInstance\n *\n * @function remove\n * @memberof Twilio.Trunking.V1.TrunkContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrunkInstance\n */\n/* jshint ignore:end */\nTrunkContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a TrunkInstance\n *\n * @function update\n * @memberof Twilio.Trunking.V1.TrunkContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.domainName] -\n *          The unique address you reserve on Twilio to which you route your SIP traffic\n * @param {string} [opts.disasterRecoveryUrl] -\n *          The HTTP URL that we should call if an error occurs while sending SIP traffic towards your configured Origination URL\n * @param {string} [opts.disasterRecoveryMethod] -\n *          The HTTP method we should use to call the disaster_recovery_url\n * @param {trunk.transfer_setting} [opts.transferMode] -\n *          The call transfer settings for the trunk\n * @param {boolean} [opts.secure] -\n *          Whether Secure Trunking is enabled for the trunk\n * @param {boolean} [opts.cnamLookupEnabled] -\n *          Whether Caller ID Name (CNAM) lookup should be enabled for the trunk\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrunkInstance\n */\n/* jshint ignore:end */\nTrunkContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'DomainName': _.get(opts, 'domainName'),\n    'DisasterRecoveryUrl': _.get(opts, 'disasterRecoveryUrl'),\n    'DisasterRecoveryMethod': _.get(opts, 'disasterRecoveryMethod'),\n    'TransferMode': _.get(opts, 'transferMode'),\n    'Secure': serialize.bool(_.get(opts, 'secure')),\n    'CnamLookupEnabled': serialize.bool(_.get(opts, 'cnamLookupEnabled'))\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TrunkInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(TrunkContext.prototype, 'originationUrls', {\n  get: function () {\n    if (!this._originationUrls) {\n      this._originationUrls = new OriginationUrlList(this._version, this._solution.sid);\n    }\n    return this._originationUrls;\n  }\n});\nObject.defineProperty(TrunkContext.prototype, 'credentialsLists', {\n  get: function () {\n    if (!this._credentialsLists) {\n      this._credentialsLists = new CredentialListList(this._version, this._solution.sid);\n    }\n    return this._credentialsLists;\n  }\n});\nObject.defineProperty(TrunkContext.prototype, 'ipAccessControlLists', {\n  get: function () {\n    if (!this._ipAccessControlLists) {\n      this._ipAccessControlLists = new IpAccessControlListList(this._version, this._solution.sid);\n    }\n    return this._ipAccessControlLists;\n  }\n});\nObject.defineProperty(TrunkContext.prototype, 'phoneNumbers', {\n  get: function () {\n    if (!this._phoneNumbers) {\n      this._phoneNumbers = new PhoneNumberList(this._version, this._solution.sid);\n    }\n    return this._phoneNumbers;\n  }\n});\nObject.defineProperty(TrunkContext.prototype, 'recordings', {\n  get: function () {\n    if (!this._recordings) {\n      this._recordings = new RecordingList(this._version, this._solution.sid);\n    }\n    return this._recordings;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trunking.V1.TrunkContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTrunkContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nTrunkContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  TrunkList: TrunkList,\n  TrunkPage: TrunkPage,\n  TrunkInstance: TrunkInstance,\n  TrunkContext: TrunkContext\n};","map":{"version":3,"names":["Q","require","_","util","CredentialListList","IpAccessControlListList","OriginationUrlList","Page","PhoneNumberList","RecordingList","deserialize","serialize","values","TrunkList","TrunkPage","TrunkInstance","TrunkContext","version","TrunkListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isFunction","deferred","defer","data","of","bool","promise","uri","method","then","payload","resolve","bind","catch","error","reject","nodeify","each","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","domainName","domain_name","disasterRecoveryMethod","disaster_recovery_method","disasterRecoveryUrl","disaster_recovery_url","friendlyName","friendly_name","secure","recording","transferMode","transfer_mode","cnamLookupEnabled","cnam_lookup_enabled","authType","auth_type","authTypeSet","auth_type_set","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","remove","update","originationUrls","credentialsLists","ipAccessControlLists","phoneNumbers","recordings","_originationUrls","_credentialsLists","_ipAccessControlLists","_phoneNumbers","_recordings","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/trunking/v1/trunk.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar CredentialListList = require('./trunk/credentialList').CredentialListList;\nvar IpAccessControlListList = require(\n    './trunk/ipAccessControlList').IpAccessControlListList;\nvar OriginationUrlList = require('./trunk/originationUrl').OriginationUrlList;\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar PhoneNumberList = require('./trunk/phoneNumber').PhoneNumberList;\nvar RecordingList = require('./trunk/recording').RecordingList;\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar TrunkList;\nvar TrunkPage;\nvar TrunkInstance;\nvar TrunkContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the TrunkList\n *\n * @constructor Twilio.Trunking.V1.TrunkList\n *\n * @param {Twilio.Trunking.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nTrunkList = function TrunkList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function trunks\n   * @memberof Twilio.Trunking.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Trunking.V1.TrunkContext}\n   */\n  /* jshint ignore:end */\n  function TrunkListInstance(sid) {\n    return TrunkListInstance.get(sid);\n  }\n\n  TrunkListInstance._version = version;\n  // Path Solution\n  TrunkListInstance._solution = {};\n  TrunkListInstance._uri = `/Trunks`;\n  /* jshint ignore:start */\n  /**\n   * create a TrunkInstance\n   *\n   * @function create\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] - A string to describe the resource\n   * @param {string} [opts.domainName] -\n   *          The unique address you reserve on Twilio to which you route your SIP traffic\n   * @param {string} [opts.disasterRecoveryUrl] -\n   *          The HTTP URL that we should call if an error occurs while sending SIP traffic towards your configured Origination URL\n   * @param {string} [opts.disasterRecoveryMethod] -\n   *          The HTTP method we should use to call the disaster_recovery_url\n   * @param {trunk.transfer_setting} [opts.transferMode] -\n   *          The call transfer settings for the trunk\n   * @param {boolean} [opts.secure] -\n   *          Whether Secure Trunking is enabled for the trunk\n   * @param {boolean} [opts.cnamLookupEnabled] -\n   *          Whether Caller ID Name (CNAM) lookup should be enabled for the trunk\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TrunkInstance\n   */\n  /* jshint ignore:end */\n  TrunkListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'DomainName': _.get(opts, 'domainName'),\n      'DisasterRecoveryUrl': _.get(opts, 'disasterRecoveryUrl'),\n      'DisasterRecoveryMethod': _.get(opts, 'disasterRecoveryMethod'),\n      'TransferMode': _.get(opts, 'transferMode'),\n      'Secure': serialize.bool(_.get(opts, 'secure')),\n      'CnamLookupEnabled': serialize.bool(_.get(opts, 'cnamLookupEnabled'))\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TrunkInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams TrunkInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  TrunkListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists TrunkInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TrunkListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of TrunkInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TrunkListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TrunkPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of TrunkInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TrunkListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TrunkPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a trunk\n   *\n   * @function get\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Trunking.V1.TrunkContext}\n   */\n  /* jshint ignore:end */\n  TrunkListInstance.get = function get(sid) {\n    return new TrunkContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  TrunkListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TrunkListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TrunkListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TrunkPage\n *\n * @constructor Twilio.Trunking.V1.TrunkPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TrunkSolution} solution - Path solution\n *\n * @returns TrunkPage\n */\n/* jshint ignore:end */\nTrunkPage = function TrunkPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TrunkPage.prototype, Page.prototype);\nTrunkPage.prototype.constructor = TrunkPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of TrunkInstance\n *\n * @function getInstance\n * @memberof Twilio.Trunking.V1.TrunkPage#\n *\n * @param {TrunkPayload} payload - Payload response from the API\n *\n * @returns TrunkInstance\n */\n/* jshint ignore:end */\nTrunkPage.prototype.getInstance = function getInstance(payload) {\n  return new TrunkInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trunking.V1.TrunkPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTrunkPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTrunkPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TrunkContext\n *\n * @constructor Twilio.Trunking.V1.TrunkInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} domainName -\n *          The unique address you reserve on Twilio to which you route your SIP traffic\n * @property {string} disasterRecoveryMethod -\n *          The HTTP method we use to call the disaster_recovery_url\n * @property {string} disasterRecoveryUrl -\n *          The HTTP URL that we call if an error occurs while sending SIP traffic towards your configured Origination URL\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {boolean} secure - Whether Secure Trunking is enabled for the trunk\n * @property {object} recording - The recording settings for the trunk\n * @property {trunk.transfer_setting} transferMode -\n *          The call transfer settings for the trunk\n * @property {boolean} cnamLookupEnabled -\n *          Whether Caller ID Name (CNAM) lookup is enabled for the trunk\n * @property {string} authType - The types of authentication mapped to the domain\n * @property {string} authTypeSet - Reserved\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {TrunkPayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nTrunkInstance = function TrunkInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.domainName = payload.domain_name; // jshint ignore:line\n  this.disasterRecoveryMethod = payload.disaster_recovery_method; // jshint ignore:line\n  this.disasterRecoveryUrl = payload.disaster_recovery_url; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.secure = payload.secure; // jshint ignore:line\n  this.recording = payload.recording; // jshint ignore:line\n  this.transferMode = payload.transfer_mode; // jshint ignore:line\n  this.cnamLookupEnabled = payload.cnam_lookup_enabled; // jshint ignore:line\n  this.authType = payload.auth_type; // jshint ignore:line\n  this.authTypeSet = payload.auth_type_set; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(TrunkInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new TrunkContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a TrunkInstance\n *\n * @function fetch\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrunkInstance\n */\n/* jshint ignore:end */\nTrunkInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a TrunkInstance\n *\n * @function remove\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrunkInstance\n */\n/* jshint ignore:end */\nTrunkInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a TrunkInstance\n *\n * @function update\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.domainName] -\n *          The unique address you reserve on Twilio to which you route your SIP traffic\n * @param {string} [opts.disasterRecoveryUrl] -\n *          The HTTP URL that we should call if an error occurs while sending SIP traffic towards your configured Origination URL\n * @param {string} [opts.disasterRecoveryMethod] -\n *          The HTTP method we should use to call the disaster_recovery_url\n * @param {trunk.transfer_setting} [opts.transferMode] -\n *          The call transfer settings for the trunk\n * @param {boolean} [opts.secure] -\n *          Whether Secure Trunking is enabled for the trunk\n * @param {boolean} [opts.cnamLookupEnabled] -\n *          Whether Caller ID Name (CNAM) lookup should be enabled for the trunk\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrunkInstance\n */\n/* jshint ignore:end */\nTrunkInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the originationUrls\n *\n * @function originationUrls\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @returns {Twilio.Trunking.V1.TrunkContext.OriginationUrlList}\n */\n/* jshint ignore:end */\nTrunkInstance.prototype.originationUrls = function originationUrls() {\n  return this._proxy.originationUrls;\n};\n\n/* jshint ignore:start */\n/**\n * Access the credentialsLists\n *\n * @function credentialsLists\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @returns {Twilio.Trunking.V1.TrunkContext.CredentialListList}\n */\n/* jshint ignore:end */\nTrunkInstance.prototype.credentialsLists = function credentialsLists() {\n  return this._proxy.credentialsLists;\n};\n\n/* jshint ignore:start */\n/**\n * Access the ipAccessControlLists\n *\n * @function ipAccessControlLists\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @returns {Twilio.Trunking.V1.TrunkContext.IpAccessControlListList}\n */\n/* jshint ignore:end */\nTrunkInstance.prototype.ipAccessControlLists = function ipAccessControlLists() {\n  return this._proxy.ipAccessControlLists;\n};\n\n/* jshint ignore:start */\n/**\n * Access the phoneNumbers\n *\n * @function phoneNumbers\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @returns {Twilio.Trunking.V1.TrunkContext.PhoneNumberList}\n */\n/* jshint ignore:end */\nTrunkInstance.prototype.phoneNumbers = function phoneNumbers() {\n  return this._proxy.phoneNumbers;\n};\n\n/* jshint ignore:start */\n/**\n * Access the recordings\n *\n * @function recordings\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @returns {Twilio.Trunking.V1.TrunkContext.RecordingList}\n */\n/* jshint ignore:end */\nTrunkInstance.prototype.recordings = function recordings() {\n  return this._proxy.recordings;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTrunkInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTrunkInstance.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TrunkContext\n *\n * @constructor Twilio.Trunking.V1.TrunkContext\n *\n * @property {Twilio.Trunking.V1.TrunkContext.OriginationUrlList} originationUrls -\n *          originationUrls resource\n * @property {Twilio.Trunking.V1.TrunkContext.CredentialListList} credentialsLists -\n *          credentialsLists resource\n * @property {Twilio.Trunking.V1.TrunkContext.IpAccessControlListList} ipAccessControlLists -\n *          ipAccessControlLists resource\n * @property {Twilio.Trunking.V1.TrunkContext.PhoneNumberList} phoneNumbers -\n *          phoneNumbers resource\n * @property {Twilio.Trunking.V1.TrunkContext.RecordingList} recordings -\n *          recordings resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nTrunkContext = function TrunkContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/Trunks/${sid}`;\n\n  // Dependents\n  this._originationUrls = undefined;\n  this._credentialsLists = undefined;\n  this._ipAccessControlLists = undefined;\n  this._phoneNumbers = undefined;\n  this._recordings = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a TrunkInstance\n *\n * @function fetch\n * @memberof Twilio.Trunking.V1.TrunkContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrunkInstance\n */\n/* jshint ignore:end */\nTrunkContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TrunkInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a TrunkInstance\n *\n * @function remove\n * @memberof Twilio.Trunking.V1.TrunkContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrunkInstance\n */\n/* jshint ignore:end */\nTrunkContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a TrunkInstance\n *\n * @function update\n * @memberof Twilio.Trunking.V1.TrunkContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.domainName] -\n *          The unique address you reserve on Twilio to which you route your SIP traffic\n * @param {string} [opts.disasterRecoveryUrl] -\n *          The HTTP URL that we should call if an error occurs while sending SIP traffic towards your configured Origination URL\n * @param {string} [opts.disasterRecoveryMethod] -\n *          The HTTP method we should use to call the disaster_recovery_url\n * @param {trunk.transfer_setting} [opts.transferMode] -\n *          The call transfer settings for the trunk\n * @param {boolean} [opts.secure] -\n *          Whether Secure Trunking is enabled for the trunk\n * @param {boolean} [opts.cnamLookupEnabled] -\n *          Whether Caller ID Name (CNAM) lookup should be enabled for the trunk\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrunkInstance\n */\n/* jshint ignore:end */\nTrunkContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'DomainName': _.get(opts, 'domainName'),\n    'DisasterRecoveryUrl': _.get(opts, 'disasterRecoveryUrl'),\n    'DisasterRecoveryMethod': _.get(opts, 'disasterRecoveryMethod'),\n    'TransferMode': _.get(opts, 'transferMode'),\n    'Secure': serialize.bool(_.get(opts, 'secure')),\n    'CnamLookupEnabled': serialize.bool(_.get(opts, 'cnamLookupEnabled'))\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TrunkInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(TrunkContext.prototype,\n  'originationUrls', {\n    get: function() {\n      if (!this._originationUrls) {\n        this._originationUrls = new OriginationUrlList(this._version, this._solution.sid);\n      }\n      return this._originationUrls;\n    }\n});\n\nObject.defineProperty(TrunkContext.prototype,\n  'credentialsLists', {\n    get: function() {\n      if (!this._credentialsLists) {\n        this._credentialsLists = new CredentialListList(this._version, this._solution.sid);\n      }\n      return this._credentialsLists;\n    }\n});\n\nObject.defineProperty(TrunkContext.prototype,\n  'ipAccessControlLists', {\n    get: function() {\n      if (!this._ipAccessControlLists) {\n        this._ipAccessControlLists = new IpAccessControlListList(this._version, this._solution.sid);\n      }\n      return this._ipAccessControlLists;\n    }\n});\n\nObject.defineProperty(TrunkContext.prototype,\n  'phoneNumbers', {\n    get: function() {\n      if (!this._phoneNumbers) {\n        this._phoneNumbers = new PhoneNumberList(this._version, this._solution.sid);\n      }\n      return this._phoneNumbers;\n    }\n});\n\nObject.defineProperty(TrunkContext.prototype,\n  'recordings', {\n    get: function() {\n      if (!this._recordings) {\n        this._recordings = new RecordingList(this._version, this._solution.sid);\n      }\n      return this._recordings;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trunking.V1.TrunkContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTrunkContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nTrunkContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TrunkList: TrunkList,\n  TrunkPage: TrunkPage,\n  TrunkInstance: TrunkInstance,\n  TrunkContext: TrunkContext\n};\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAE;AACvB,IAAIC,CAAC,GAAGD,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAE;AAC5B,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC,CAAC,CAAE;AAC7B,IAAIG,kBAAkB,GAAGH,OAAO,CAAC,wBAAwB,CAAC,CAACG,kBAAkB;AAC7E,IAAIC,uBAAuB,GAAGJ,OAAO,CACjC,6BAA6B,CAAC,CAACI,uBAAuB;AAC1D,IAAIC,kBAAkB,GAAGL,OAAO,CAAC,wBAAwB,CAAC,CAACK,kBAAkB;AAC7E,IAAIC,IAAI,GAAGN,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAE;AAC3C,IAAIO,eAAe,GAAGP,OAAO,CAAC,qBAAqB,CAAC,CAACO,eAAe;AACpE,IAAIC,aAAa,GAAGR,OAAO,CAAC,mBAAmB,CAAC,CAACQ,aAAa;AAC9D,IAAIC,WAAW,GAAGT,OAAO,CACrB,2BAA2B,CAAC,CAAC,CAAE;AACnC,IAAIU,SAAS,GAAGV,OAAO,CAAC,yBAAyB,CAAC,CAAC,CAAE;AACrD,IAAIW,MAAM,GAAGX,OAAO,CAAC,sBAAsB,CAAC,CAAC,CAAE;;AAE/C,IAAIY,SAAS;AACb,IAAIC,SAAS;AACb,IAAIC,aAAa;AACjB,IAAIC,YAAY;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,SAAS,GAAG,SAASA,SAASA,CAACI,OAAO,EAAE;EACtC;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACA,SAASC,iBAAiBA,CAACC,GAAG,EAAE;IAC9B,OAAOD,iBAAiB,CAACE,GAAG,CAACD,GAAG,CAAC;EACnC;EAEAD,iBAAiB,CAACG,QAAQ,GAAGJ,OAAO;EACpC;EACAC,iBAAiB,CAACI,SAAS,GAAG,CAAC,CAAC;EAChCJ,iBAAiB,CAACK,IAAI,GAAI,SAAQ;EAClC;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAL,iBAAiB,CAACM,MAAM,GAAG,SAASA,MAAMA,CAACC,IAAI,EAAEC,QAAQ,EAAE;IACzD,IAAIxB,CAAC,CAACyB,UAAU,CAACF,IAAI,CAAC,EAAE;MACtBC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IAEjB,IAAIG,QAAQ,GAAG5B,CAAC,CAAC6B,KAAK,CAAC,CAAC;IACxB,IAAIC,IAAI,GAAGlB,MAAM,CAACmB,EAAE,CAAC;MACnB,cAAc,EAAE7B,CAAC,CAACkB,GAAG,CAACK,IAAI,EAAE,cAAc,CAAC;MAC3C,YAAY,EAAEvB,CAAC,CAACkB,GAAG,CAACK,IAAI,EAAE,YAAY,CAAC;MACvC,qBAAqB,EAAEvB,CAAC,CAACkB,GAAG,CAACK,IAAI,EAAE,qBAAqB,CAAC;MACzD,wBAAwB,EAAEvB,CAAC,CAACkB,GAAG,CAACK,IAAI,EAAE,wBAAwB,CAAC;MAC/D,cAAc,EAAEvB,CAAC,CAACkB,GAAG,CAACK,IAAI,EAAE,cAAc,CAAC;MAC3C,QAAQ,EAAEd,SAAS,CAACqB,IAAI,CAAC9B,CAAC,CAACkB,GAAG,CAACK,IAAI,EAAE,QAAQ,CAAC,CAAC;MAC/C,mBAAmB,EAAEd,SAAS,CAACqB,IAAI,CAAC9B,CAAC,CAACkB,GAAG,CAACK,IAAI,EAAE,mBAAmB,CAAC;IACtE,CAAC,CAAC;IAEF,IAAIQ,OAAO,GAAG,IAAI,CAACZ,QAAQ,CAACG,MAAM,CAAC;MAACU,GAAG,EAAE,IAAI,CAACX,IAAI;MAAEY,MAAM,EAAE,MAAM;MAAEL,IAAI,EAAEA;IAAI,CAAC,CAAC;IAEhFG,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;MACvCT,QAAQ,CAACU,OAAO,CAAC,IAAIvB,aAAa,CAAC,IAAI,CAACM,QAAQ,EAAEgB,OAAO,EAAE,IAAI,CAACf,SAAS,CAACH,GAAG,CAAC,CAAC;IACjF,CAAC,CAACoB,IAAI,CAAC,IAAI,CAAC,CAAC;IAEbN,OAAO,CAACO,KAAK,CAAC,UAASC,KAAK,EAAE;MAC5Bb,QAAQ,CAACc,MAAM,CAACD,KAAK,CAAC;IACxB,CAAC,CAAC;IAEF,IAAIvC,CAAC,CAACyB,UAAU,CAACD,QAAQ,CAAC,EAAE;MAC1BE,QAAQ,CAACK,OAAO,CAACU,OAAO,CAACjB,QAAQ,CAAC;IACpC;IAEA,OAAOE,QAAQ,CAACK,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAf,iBAAiB,CAAC0B,IAAI,GAAG,SAASA,IAAIA,CAACnB,IAAI,EAAEC,QAAQ,EAAE;IACrD,IAAIxB,CAAC,CAACyB,UAAU,CAACF,IAAI,CAAC,EAAE;MACtBC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IACjB,IAAIA,IAAI,CAACC,QAAQ,EAAE;MACjBA,QAAQ,GAAGD,IAAI,CAACC,QAAQ;IAC1B;IACA,IAAIxB,CAAC,CAAC2C,WAAW,CAACnB,QAAQ,CAAC,EAAE;MAC3B,MAAM,IAAIoB,KAAK,CAAC,oCAAoC,CAAC;IACvD;IAEA,IAAIC,IAAI,GAAG,KAAK;IAChB,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAIC,eAAe,GAAG,CAAC;IACvB,IAAIC,MAAM,GAAG,IAAI,CAAC7B,QAAQ,CAAC8B,UAAU,CAAC;MACpCC,KAAK,EAAE3B,IAAI,CAAC2B,KAAK;MACjBC,QAAQ,EAAE5B,IAAI,CAAC4B;IACjB,CAAC,CAAC;IAEF,SAASC,UAAUA,CAACb,KAAK,EAAE;MACzBM,IAAI,GAAG,IAAI;MACX,IAAI7C,CAAC,CAACyB,UAAU,CAACF,IAAI,CAACsB,IAAI,CAAC,EAAE;QAC3BtB,IAAI,CAACsB,IAAI,CAACN,KAAK,CAAC;MAClB;IACF;IAEA,SAASc,aAAaA,CAACC,EAAE,EAAE;MACzB,IAAIvB,OAAO,GAAGuB,EAAE,CAAC,CAAC;MAClB,IAAItD,CAAC,CAAC2C,WAAW,CAACZ,OAAO,CAAC,EAAE;QAC1BqB,UAAU,CAAC,CAAC;QACZ;MACF;MAEArB,OAAO,CAACG,IAAI,CAAC,UAASqB,IAAI,EAAE;QAC1BvD,CAAC,CAAC0C,IAAI,CAACa,IAAI,CAACC,SAAS,EAAE,UAASC,QAAQ,EAAE;UACxC,IAAIZ,IAAI,IAAK,CAAC7C,CAAC,CAAC2C,WAAW,CAACpB,IAAI,CAAC2B,KAAK,CAAC,IAAIH,eAAe,IAAIxB,IAAI,CAAC2B,KAAM,EAAE;YACzEL,IAAI,GAAG,IAAI;YACX,OAAO,KAAK;UACd;UAEAE,eAAe,EAAE;UACjBvB,QAAQ,CAACiC,QAAQ,EAAEL,UAAU,CAAC;QAChC,CAAC,CAAC;QAEF,IAAI,CAACP,IAAI,EAAE;UACTC,WAAW,EAAE;UACbO,aAAa,CAACrD,CAAC,CAACqC,IAAI,CAACkB,IAAI,CAACG,QAAQ,EAAEH,IAAI,CAAC,CAAC;QAC5C;MACF,CAAC,CAAC;MAEFxB,OAAO,CAACO,KAAK,CAACc,UAAU,CAAC;IAC3B;IAEAC,aAAa,CAACrD,CAAC,CAACqC,IAAI,CAAC,IAAI,CAACkB,IAAI,EAAE,IAAI,EAAEvD,CAAC,CAAC2D,KAAK,CAACpC,IAAI,EAAEyB,MAAM,CAAC,CAAC,CAAC;EAC/D,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAhC,iBAAiB,CAAC4C,IAAI,GAAG,SAASA,IAAIA,CAACrC,IAAI,EAAEC,QAAQ,EAAE;IACrD,IAAIxB,CAAC,CAACyB,UAAU,CAACF,IAAI,CAAC,EAAE;MACtBC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IACjB,IAAIG,QAAQ,GAAG5B,CAAC,CAAC6B,KAAK,CAAC,CAAC;IACxB,IAAIkC,YAAY,GAAG,EAAE;IACrBtC,IAAI,CAACC,QAAQ,GAAG,UAASsC,QAAQ,EAAEjB,IAAI,EAAE;MACvCgB,YAAY,CAACE,IAAI,CAACD,QAAQ,CAAC;MAE3B,IAAI,CAAC9D,CAAC,CAAC2C,WAAW,CAACpB,IAAI,CAAC2B,KAAK,CAAC,IAAIW,YAAY,CAACG,MAAM,KAAKzC,IAAI,CAAC2B,KAAK,EAAE;QACpEL,IAAI,CAAC,CAAC;MACR;IACF,CAAC;IAEDtB,IAAI,CAACsB,IAAI,GAAG,UAASN,KAAK,EAAE;MAC1B,IAAIvC,CAAC,CAAC2C,WAAW,CAACJ,KAAK,CAAC,EAAE;QACxBb,QAAQ,CAACU,OAAO,CAACyB,YAAY,CAAC;MAChC,CAAC,MAAM;QACLnC,QAAQ,CAACc,MAAM,CAACD,KAAK,CAAC;MACxB;IACF,CAAC;IAED,IAAIvC,CAAC,CAACyB,UAAU,CAACD,QAAQ,CAAC,EAAE;MAC1BE,QAAQ,CAACK,OAAO,CAACU,OAAO,CAACjB,QAAQ,CAAC;IACpC;IAEA,IAAI,CAACkB,IAAI,CAACnB,IAAI,CAAC;IACf,OAAOG,QAAQ,CAACK,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAf,iBAAiB,CAACuC,IAAI,GAAG,SAASA,IAAIA,CAAChC,IAAI,EAAEC,QAAQ,EAAE;IACrD,IAAIxB,CAAC,CAACyB,UAAU,CAACF,IAAI,CAAC,EAAE;MACtBC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IAEjB,IAAIG,QAAQ,GAAG5B,CAAC,CAAC6B,KAAK,CAAC,CAAC;IACxB,IAAIC,IAAI,GAAGlB,MAAM,CAACmB,EAAE,CAAC;MACnB,WAAW,EAAEN,IAAI,CAAC0C,SAAS;MAC3B,MAAM,EAAE1C,IAAI,CAAC2C,UAAU;MACvB,UAAU,EAAE3C,IAAI,CAAC4B;IACnB,CAAC,CAAC;IAEF,IAAIpB,OAAO,GAAG,IAAI,CAACZ,QAAQ,CAACoC,IAAI,CAAC;MAACvB,GAAG,EAAE,IAAI,CAACX,IAAI;MAAEY,MAAM,EAAE,KAAK;MAAEkC,MAAM,EAAEvC;IAAI,CAAC,CAAC;IAE/EG,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;MACvCT,QAAQ,CAACU,OAAO,CAAC,IAAIxB,SAAS,CAAC,IAAI,CAACO,QAAQ,EAAEgB,OAAO,EAAE,IAAI,CAACf,SAAS,CAAC,CAAC;IACzE,CAAC,CAACiB,IAAI,CAAC,IAAI,CAAC,CAAC;IAEbN,OAAO,CAACO,KAAK,CAAC,UAASC,KAAK,EAAE;MAC5Bb,QAAQ,CAACc,MAAM,CAACD,KAAK,CAAC;IACxB,CAAC,CAAC;IAEF,IAAIvC,CAAC,CAACyB,UAAU,CAACD,QAAQ,CAAC,EAAE;MAC1BE,QAAQ,CAACK,OAAO,CAACU,OAAO,CAACjB,QAAQ,CAAC;IACpC;IAEA,OAAOE,QAAQ,CAACK,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAf,iBAAiB,CAACoD,OAAO,GAAG,SAASA,OAAOA,CAACC,SAAS,EAAE7C,QAAQ,EAAE;IAChE,IAAIE,QAAQ,GAAG5B,CAAC,CAAC6B,KAAK,CAAC,CAAC;IAExB,IAAII,OAAO,GAAG,IAAI,CAACZ,QAAQ,CAACmD,OAAO,CAACC,MAAM,CAACC,OAAO,CAAC;MAACvC,MAAM,EAAE,KAAK;MAAED,GAAG,EAAEqC;IAAS,CAAC,CAAC;IAEnFtC,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;MACvCT,QAAQ,CAACU,OAAO,CAAC,IAAIxB,SAAS,CAAC,IAAI,CAACO,QAAQ,EAAEgB,OAAO,EAAE,IAAI,CAACf,SAAS,CAAC,CAAC;IACzE,CAAC,CAACiB,IAAI,CAAC,IAAI,CAAC,CAAC;IAEbN,OAAO,CAACO,KAAK,CAAC,UAASC,KAAK,EAAE;MAC5Bb,QAAQ,CAACc,MAAM,CAACD,KAAK,CAAC;IACxB,CAAC,CAAC;IAEF,IAAIvC,CAAC,CAACyB,UAAU,CAACD,QAAQ,CAAC,EAAE;MAC1BE,QAAQ,CAACK,OAAO,CAACU,OAAO,CAACjB,QAAQ,CAAC;IACpC;IAEA,OAAOE,QAAQ,CAACK,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAf,iBAAiB,CAACE,GAAG,GAAG,SAASA,GAAGA,CAACD,GAAG,EAAE;IACxC,OAAO,IAAIH,YAAY,CAAC,IAAI,CAACK,QAAQ,EAAEF,GAAG,CAAC;EAC7C,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAD,iBAAiB,CAACyD,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;IAC3C,OAAO,IAAI,CAACrD,SAAS;EACvB,CAAC;EAEDJ,iBAAiB,CAACf,IAAI,CAACyE,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EAAEC,OAAO,EAAE;IACxE,OAAO5E,IAAI,CAACyE,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;EAC7C,CAAC;EAED,OAAO7D,iBAAiB;AAC1B,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,SAAS,GAAG,SAASA,SAASA,CAACG,OAAO,EAAE+D,QAAQ,EAAEC,QAAQ,EAAE;EAC1D;EACA,IAAI,CAAC3D,SAAS,GAAG2D,QAAQ;EAEzB1E,IAAI,CAAC2E,SAAS,CAACC,WAAW,CAACC,IAAI,CAAC,IAAI,EAAEnE,OAAO,EAAE+D,QAAQ,EAAE,IAAI,CAAC1D,SAAS,CAAC;AAC1E,CAAC;AAEDpB,CAAC,CAACmF,MAAM,CAACvE,SAAS,CAACoE,SAAS,EAAE3E,IAAI,CAAC2E,SAAS,CAAC;AAC7CpE,SAAS,CAACoE,SAAS,CAACC,WAAW,GAAGrE,SAAS;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,SAAS,CAACoE,SAAS,CAACI,WAAW,GAAG,SAASA,WAAWA,CAACjD,OAAO,EAAE;EAC9D,OAAO,IAAItB,aAAa,CAAC,IAAI,CAACM,QAAQ,EAAEgB,OAAO,CAAC;AAClD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAvB,SAAS,CAACoE,SAAS,CAACP,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EAC7C,IAAIY,KAAK,GAAG,CAAC,CAAC;EACdrF,CAAC,CAACsF,MAAM,CAAC,IAAI,EAAE,UAASC,KAAK,EAAEC,GAAG,EAAE;IAClC,IAAI,CAACxF,CAAC,CAACyF,UAAU,CAACD,GAAG,EAAE,GAAG,CAAC,IAAI,CAAExF,CAAC,CAACyB,UAAU,CAAC8D,KAAK,CAAC,EAAE;MACpDF,KAAK,CAACG,GAAG,CAAC,GAAGD,KAAK;IACpB;EACF,CAAC,CAAC;EACF,OAAOF,KAAK;AACd,CAAC;AAEDzE,SAAS,CAACoE,SAAS,CAAC/E,IAAI,CAACyE,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EAAEC,OAAO,EAAE;EAC1E,OAAO5E,IAAI,CAACyE,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;AAC7C,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAhE,aAAa,GAAG,SAASA,aAAaA,CAACE,OAAO,EAAEoB,OAAO,EAAElB,GAAG,EAAE;EAC5D,IAAI,CAACE,QAAQ,GAAGJ,OAAO;;EAEvB;EACA,IAAI,CAAC2E,UAAU,GAAGvD,OAAO,CAACwD,WAAW,CAAC,CAAC;EACvC,IAAI,CAACC,UAAU,GAAGzD,OAAO,CAAC0D,WAAW,CAAC,CAAC;EACvC,IAAI,CAACC,sBAAsB,GAAG3D,OAAO,CAAC4D,wBAAwB,CAAC,CAAC;EAChE,IAAI,CAACC,mBAAmB,GAAG7D,OAAO,CAAC8D,qBAAqB,CAAC,CAAC;EAC1D,IAAI,CAACC,YAAY,GAAG/D,OAAO,CAACgE,aAAa,CAAC,CAAC;EAC3C,IAAI,CAACC,MAAM,GAAGjE,OAAO,CAACiE,MAAM,CAAC,CAAC;EAC9B,IAAI,CAACC,SAAS,GAAGlE,OAAO,CAACkE,SAAS,CAAC,CAAC;EACpC,IAAI,CAACC,YAAY,GAAGnE,OAAO,CAACoE,aAAa,CAAC,CAAC;EAC3C,IAAI,CAACC,iBAAiB,GAAGrE,OAAO,CAACsE,mBAAmB,CAAC,CAAC;EACtD,IAAI,CAACC,QAAQ,GAAGvE,OAAO,CAACwE,SAAS,CAAC,CAAC;EACnC,IAAI,CAACC,WAAW,GAAGzE,OAAO,CAAC0E,aAAa,CAAC,CAAC;EAC1C,IAAI,CAACC,WAAW,GAAGtG,WAAW,CAACuG,eAAe,CAAC5E,OAAO,CAAC6E,YAAY,CAAC,CAAC,CAAC;EACtE,IAAI,CAACC,WAAW,GAAGzG,WAAW,CAACuG,eAAe,CAAC5E,OAAO,CAAC+E,YAAY,CAAC,CAAC,CAAC;EACtE,IAAI,CAACjG,GAAG,GAAGkB,OAAO,CAAClB,GAAG,CAAC,CAAC;EACxB,IAAI,CAACkG,GAAG,GAAGhF,OAAO,CAACgF,GAAG,CAAC,CAAC;EACxB,IAAI,CAACC,KAAK,GAAGjF,OAAO,CAACiF,KAAK,CAAC,CAAC;;EAE5B;EACA,IAAI,CAACC,QAAQ,GAAGC,SAAS;EACzB,IAAI,CAAClG,SAAS,GAAG;IAACH,GAAG,EAAEA,GAAG,IAAI,IAAI,CAACA;EAAK,CAAC;AAC3C,CAAC;AAEDsG,MAAM,CAACC,cAAc,CAAC3G,aAAa,CAACmE,SAAS,EAC3C,QAAQ,EAAE;EACR9D,GAAG,EAAE,SAAAA,CAAA,EAAW;IACd,IAAI,CAAC,IAAI,CAACmG,QAAQ,EAAE;MAClB,IAAI,CAACA,QAAQ,GAAG,IAAIvG,YAAY,CAAC,IAAI,CAACK,QAAQ,EAAE,IAAI,CAACC,SAAS,CAACH,GAAG,CAAC;IACrE;IAEA,OAAO,IAAI,CAACoG,QAAQ;EACtB;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAxG,aAAa,CAACmE,SAAS,CAACyC,KAAK,GAAG,SAASA,KAAKA,CAACjG,QAAQ,EAAE;EACvD,OAAO,IAAI,CAACkG,MAAM,CAACD,KAAK,CAACjG,QAAQ,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,aAAa,CAACmE,SAAS,CAAC2C,MAAM,GAAG,SAASA,MAAMA,CAACnG,QAAQ,EAAE;EACzD,OAAO,IAAI,CAACkG,MAAM,CAACC,MAAM,CAACnG,QAAQ,CAAC;AACrC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,aAAa,CAACmE,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAMA,CAACrG,IAAI,EAAEC,QAAQ,EAAE;EAC/D,OAAO,IAAI,CAACkG,MAAM,CAACE,MAAM,CAACrG,IAAI,EAAEC,QAAQ,CAAC;AAC3C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,aAAa,CAACmE,SAAS,CAAC6C,eAAe,GAAG,SAASA,eAAeA,CAAA,EAAG;EACnE,OAAO,IAAI,CAACH,MAAM,CAACG,eAAe;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAhH,aAAa,CAACmE,SAAS,CAAC8C,gBAAgB,GAAG,SAASA,gBAAgBA,CAAA,EAAG;EACrE,OAAO,IAAI,CAACJ,MAAM,CAACI,gBAAgB;AACrC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjH,aAAa,CAACmE,SAAS,CAAC+C,oBAAoB,GAAG,SAASA,oBAAoBA,CAAA,EAAG;EAC7E,OA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"},"metadata":{},"sourceType":"script","externalDependencies":[]}