{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../base/Page'); /* jshint ignore:line */\nvar SubscribedEventList = require('./subscription/subscribedEvent').SubscribedEventList;\nvar deserialize = require('../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../base/values'); /* jshint ignore:line */\n\nvar SubscriptionList;\nvar SubscriptionPage;\nvar SubscriptionInstance;\nvar SubscriptionContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the SubscriptionList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SubscriptionList\n *\n * @param {Twilio.Events.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nSubscriptionList = function SubscriptionList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function subscriptions\n   * @memberof Twilio.Events.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Events.V1.SubscriptionContext}\n   */\n  /* jshint ignore:end */\n  function SubscriptionListInstance(sid) {\n    return SubscriptionListInstance.get(sid);\n  }\n  SubscriptionListInstance._version = version;\n  // Path Solution\n  SubscriptionListInstance._solution = {};\n  SubscriptionListInstance._uri = `/Subscriptions`;\n  /* jshint ignore:start */\n  /**\n   * Streams SubscriptionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Events.V1.SubscriptionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sinkSid] - Sink SID.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  SubscriptionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists SubscriptionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Events.V1.SubscriptionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sinkSid] - Sink SID.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SubscriptionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of SubscriptionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Events.V1.SubscriptionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sinkSid] - Sink SID.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SubscriptionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'SinkSid': _.get(opts, 'sinkSid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SubscriptionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of SubscriptionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Events.V1.SubscriptionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SubscriptionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SubscriptionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a SubscriptionInstance\n   *\n   * @function create\n   * @memberof Twilio.Events.V1.SubscriptionList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.description - Subscription description\n   * @param {string} opts.sinkSid - Sink SID.\n   * @param {object|list} opts.types - Subscribed Event Types\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SubscriptionInstance\n   */\n  /* jshint ignore:end */\n  SubscriptionListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.description)) {\n      throw new Error('Required parameter \"opts.description\" missing.');\n    }\n    if (_.isUndefined(opts.sinkSid)) {\n      throw new Error('Required parameter \"opts.sinkSid\" missing.');\n    }\n    if (_.isUndefined(opts.types)) {\n      throw new Error('Required parameter \"opts.types\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'Description': _.get(opts, 'description'),\n      'SinkSid': _.get(opts, 'sinkSid'),\n      'Types': serialize.map(_.get(opts, 'types'), function (e) {\n        return serialize.object(e);\n      })\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SubscriptionInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a subscription\n   *\n   * @function get\n   * @memberof Twilio.Events.V1.SubscriptionList#\n   *\n   * @param {string} sid - A string that uniquely identifies this Subscription.\n   *\n   * @returns {Twilio.Events.V1.SubscriptionContext}\n   */\n  /* jshint ignore:end */\n  SubscriptionListInstance.get = function get(sid) {\n    return new SubscriptionContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Events.V1.SubscriptionList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  SubscriptionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  SubscriptionListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return SubscriptionListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the SubscriptionPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SubscriptionPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SubscriptionSolution} solution - Path solution\n *\n * @returns SubscriptionPage\n */\n/* jshint ignore:end */\nSubscriptionPage = function SubscriptionPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(SubscriptionPage.prototype, Page.prototype);\nSubscriptionPage.prototype.constructor = SubscriptionPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of SubscriptionInstance\n *\n * @function getInstance\n * @memberof Twilio.Events.V1.SubscriptionPage#\n *\n * @param {SubscriptionPayload} payload - Payload response from the API\n *\n * @returns SubscriptionInstance\n */\n/* jshint ignore:end */\nSubscriptionPage.prototype.getInstance = function getInstance(payload) {\n  return new SubscriptionInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SubscriptionPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSubscriptionPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nSubscriptionPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the SubscriptionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SubscriptionInstance\n *\n * @property {string} accountSid - Account SID.\n * @property {string} sid - A string that uniquely identifies this Subscription.\n * @property {Date} dateCreated - The date this Subscription was created\n * @property {Date} dateUpdated - The date this Subscription was updated\n * @property {string} description - Subscription description\n * @property {string} sinkSid - Sink SID.\n * @property {string} url - The URL of this resource.\n * @property {string} links - Nested resource URLs.\n *\n * @param {V1} version - Version of the resource\n * @param {SubscriptionPayload} payload - The instance payload\n * @param {sid} sid - A string that uniquely identifies this Subscription.\n */\n/* jshint ignore:end */\nSubscriptionInstance = function SubscriptionInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.description = payload.description; // jshint ignore:line\n  this.sinkSid = payload.sink_sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(SubscriptionInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new SubscriptionContext(this._version, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a SubscriptionInstance\n *\n * @function fetch\n * @memberof Twilio.Events.V1.SubscriptionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscriptionInstance\n */\n/* jshint ignore:end */\nSubscriptionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a SubscriptionInstance\n *\n * @function update\n * @memberof Twilio.Events.V1.SubscriptionInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.description] - Subscription description.\n * @param {string} [opts.sinkSid] - Sink SID.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscriptionInstance\n */\n/* jshint ignore:end */\nSubscriptionInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a SubscriptionInstance\n *\n * @function remove\n * @memberof Twilio.Events.V1.SubscriptionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscriptionInstance\n */\n/* jshint ignore:end */\nSubscriptionInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the subscribedEvents\n *\n * @function subscribedEvents\n * @memberof Twilio.Events.V1.SubscriptionInstance#\n *\n * @returns {Twilio.Events.V1.SubscriptionContext.SubscribedEventList}\n */\n/* jshint ignore:end */\nSubscriptionInstance.prototype.subscribedEvents = function subscribedEvents() {\n  return this._proxy.subscribedEvents;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SubscriptionInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSubscriptionInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nSubscriptionInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the SubscriptionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SubscriptionContext\n *\n * @property {Twilio.Events.V1.SubscriptionContext.SubscribedEventList} subscribedEvents -\n *          subscribedEvents resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - A string that uniquely identifies this Subscription.\n */\n/* jshint ignore:end */\nSubscriptionContext = function SubscriptionContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/Subscriptions/${sid}`;\n\n  // Dependents\n  this._subscribedEvents = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a SubscriptionInstance\n *\n * @function fetch\n * @memberof Twilio.Events.V1.SubscriptionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscriptionInstance\n */\n/* jshint ignore:end */\nSubscriptionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SubscriptionInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a SubscriptionInstance\n *\n * @function update\n * @memberof Twilio.Events.V1.SubscriptionContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.description] - Subscription description.\n * @param {string} [opts.sinkSid] - Sink SID.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscriptionInstance\n */\n/* jshint ignore:end */\nSubscriptionContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Description': _.get(opts, 'description'),\n    'SinkSid': _.get(opts, 'sinkSid')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SubscriptionInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a SubscriptionInstance\n *\n * @function remove\n * @memberof Twilio.Events.V1.SubscriptionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscriptionInstance\n */\n/* jshint ignore:end */\nSubscriptionContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(SubscriptionContext.prototype, 'subscribedEvents', {\n  get: function () {\n    if (!this._subscribedEvents) {\n      this._subscribedEvents = new SubscribedEventList(this._version, this._solution.sid);\n    }\n    return this._subscribedEvents;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SubscriptionContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSubscriptionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nSubscriptionContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  SubscriptionList: SubscriptionList,\n  SubscriptionPage: SubscriptionPage,\n  SubscriptionInstance: SubscriptionInstance,\n  SubscriptionContext: SubscriptionContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","SubscribedEventList","deserialize","serialize","values","SubscriptionList","SubscriptionPage","SubscriptionInstance","SubscriptionContext","version","SubscriptionListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","description","sinkSid","types","map","e","object","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","sink_sid","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","subscribedEvents","_subscribedEvents","module","exports"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/events/v1/subscription.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar SubscribedEventList = require(\n    './subscription/subscribedEvent').SubscribedEventList;\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar SubscriptionList;\nvar SubscriptionPage;\nvar SubscriptionInstance;\nvar SubscriptionContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the SubscriptionList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SubscriptionList\n *\n * @param {Twilio.Events.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nSubscriptionList = function SubscriptionList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function subscriptions\n   * @memberof Twilio.Events.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Events.V1.SubscriptionContext}\n   */\n  /* jshint ignore:end */\n  function SubscriptionListInstance(sid) {\n    return SubscriptionListInstance.get(sid);\n  }\n\n  SubscriptionListInstance._version = version;\n  // Path Solution\n  SubscriptionListInstance._solution = {};\n  SubscriptionListInstance._uri = `/Subscriptions`;\n  /* jshint ignore:start */\n  /**\n   * Streams SubscriptionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Events.V1.SubscriptionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sinkSid] - Sink SID.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  SubscriptionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists SubscriptionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Events.V1.SubscriptionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sinkSid] - Sink SID.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SubscriptionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of SubscriptionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Events.V1.SubscriptionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sinkSid] - Sink SID.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SubscriptionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'SinkSid': _.get(opts, 'sinkSid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SubscriptionPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of SubscriptionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Events.V1.SubscriptionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SubscriptionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SubscriptionPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a SubscriptionInstance\n   *\n   * @function create\n   * @memberof Twilio.Events.V1.SubscriptionList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.description - Subscription description\n   * @param {string} opts.sinkSid - Sink SID.\n   * @param {object|list} opts.types - Subscribed Event Types\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SubscriptionInstance\n   */\n  /* jshint ignore:end */\n  SubscriptionListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.description)) {\n      throw new Error('Required parameter \"opts.description\" missing.');\n    }\n    if (_.isUndefined(opts.sinkSid)) {\n      throw new Error('Required parameter \"opts.sinkSid\" missing.');\n    }\n    if (_.isUndefined(opts.types)) {\n      throw new Error('Required parameter \"opts.types\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Description': _.get(opts, 'description'),\n      'SinkSid': _.get(opts, 'sinkSid'),\n      'Types': serialize.map(_.get(opts, 'types'), function(e) { return serialize.object(e); })\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SubscriptionInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a subscription\n   *\n   * @function get\n   * @memberof Twilio.Events.V1.SubscriptionList#\n   *\n   * @param {string} sid - A string that uniquely identifies this Subscription.\n   *\n   * @returns {Twilio.Events.V1.SubscriptionContext}\n   */\n  /* jshint ignore:end */\n  SubscriptionListInstance.get = function get(sid) {\n    return new SubscriptionContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Events.V1.SubscriptionList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  SubscriptionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  SubscriptionListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return SubscriptionListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SubscriptionPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SubscriptionPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SubscriptionSolution} solution - Path solution\n *\n * @returns SubscriptionPage\n */\n/* jshint ignore:end */\nSubscriptionPage = function SubscriptionPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(SubscriptionPage.prototype, Page.prototype);\nSubscriptionPage.prototype.constructor = SubscriptionPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of SubscriptionInstance\n *\n * @function getInstance\n * @memberof Twilio.Events.V1.SubscriptionPage#\n *\n * @param {SubscriptionPayload} payload - Payload response from the API\n *\n * @returns SubscriptionInstance\n */\n/* jshint ignore:end */\nSubscriptionPage.prototype.getInstance = function getInstance(payload) {\n  return new SubscriptionInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SubscriptionPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSubscriptionPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSubscriptionPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SubscriptionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SubscriptionInstance\n *\n * @property {string} accountSid - Account SID.\n * @property {string} sid - A string that uniquely identifies this Subscription.\n * @property {Date} dateCreated - The date this Subscription was created\n * @property {Date} dateUpdated - The date this Subscription was updated\n * @property {string} description - Subscription description\n * @property {string} sinkSid - Sink SID.\n * @property {string} url - The URL of this resource.\n * @property {string} links - Nested resource URLs.\n *\n * @param {V1} version - Version of the resource\n * @param {SubscriptionPayload} payload - The instance payload\n * @param {sid} sid - A string that uniquely identifies this Subscription.\n */\n/* jshint ignore:end */\nSubscriptionInstance = function SubscriptionInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.description = payload.description; // jshint ignore:line\n  this.sinkSid = payload.sink_sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(SubscriptionInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new SubscriptionContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a SubscriptionInstance\n *\n * @function fetch\n * @memberof Twilio.Events.V1.SubscriptionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscriptionInstance\n */\n/* jshint ignore:end */\nSubscriptionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a SubscriptionInstance\n *\n * @function update\n * @memberof Twilio.Events.V1.SubscriptionInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.description] - Subscription description.\n * @param {string} [opts.sinkSid] - Sink SID.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscriptionInstance\n */\n/* jshint ignore:end */\nSubscriptionInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a SubscriptionInstance\n *\n * @function remove\n * @memberof Twilio.Events.V1.SubscriptionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscriptionInstance\n */\n/* jshint ignore:end */\nSubscriptionInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the subscribedEvents\n *\n * @function subscribedEvents\n * @memberof Twilio.Events.V1.SubscriptionInstance#\n *\n * @returns {Twilio.Events.V1.SubscriptionContext.SubscribedEventList}\n */\n/* jshint ignore:end */\nSubscriptionInstance.prototype.subscribedEvents = function subscribedEvents() {\n  return this._proxy.subscribedEvents;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SubscriptionInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSubscriptionInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSubscriptionInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SubscriptionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SubscriptionContext\n *\n * @property {Twilio.Events.V1.SubscriptionContext.SubscribedEventList} subscribedEvents -\n *          subscribedEvents resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - A string that uniquely identifies this Subscription.\n */\n/* jshint ignore:end */\nSubscriptionContext = function SubscriptionContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/Subscriptions/${sid}`;\n\n  // Dependents\n  this._subscribedEvents = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a SubscriptionInstance\n *\n * @function fetch\n * @memberof Twilio.Events.V1.SubscriptionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscriptionInstance\n */\n/* jshint ignore:end */\nSubscriptionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new SubscriptionInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a SubscriptionInstance\n *\n * @function update\n * @memberof Twilio.Events.V1.SubscriptionContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.description] - Subscription description.\n * @param {string} [opts.sinkSid] - Sink SID.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscriptionInstance\n */\n/* jshint ignore:end */\nSubscriptionContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Description': _.get(opts, 'description'),\n    'SinkSid': _.get(opts, 'sinkSid')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new SubscriptionInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a SubscriptionInstance\n *\n * @function remove\n * @memberof Twilio.Events.V1.SubscriptionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscriptionInstance\n */\n/* jshint ignore:end */\nSubscriptionContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(SubscriptionContext.prototype,\n  'subscribedEvents', {\n    get: function() {\n      if (!this._subscribedEvents) {\n        this._subscribedEvents = new SubscribedEventList(this._version, this._solution.sid);\n      }\n      return this._subscribedEvents;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SubscriptionContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSubscriptionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nSubscriptionContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  SubscriptionList: SubscriptionList,\n  SubscriptionPage: SubscriptionPage,\n  SubscriptionInstance: SubscriptionInstance,\n  SubscriptionContext: SubscriptionContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}