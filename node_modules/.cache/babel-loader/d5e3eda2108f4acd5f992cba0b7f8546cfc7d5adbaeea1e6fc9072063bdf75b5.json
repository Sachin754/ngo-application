{"ast":null,"code":"\"use strict\";\n\n/*\n * This code was generated by\n * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __\n *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\\ | |___ |__/ |__|  | |  | |__/\n *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \\| |___ |  \\ |  |  | |__| |  \\\n *\n * Twilio - Verify\n * This is the public Twilio REST API.\n *\n * NOTE: This class is auto generated by OpenAPI Generator.\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FormListInstance = exports.FormInstance = exports.FormContextImpl = void 0;\nconst util_1 = require(\"util\");\nconst deserialize = require(\"../../../base/deserialize\");\nconst serialize = require(\"../../../base/serialize\");\nconst utility_1 = require(\"../../../base/utility\");\nclass FormContextImpl {\n  constructor(_version, formType) {\n    this._version = _version;\n    if (!(0, utility_1.isValidPathParam)(formType)) {\n      throw new Error(\"Parameter 'formType' is not valid.\");\n    }\n    this._solution = {\n      formType\n    };\n    this._uri = `/Forms/${formType}`;\n  }\n  fetch(callback) {\n    const instance = this;\n    let operationVersion = instance._version,\n      operationPromise = operationVersion.fetch({\n        uri: instance._uri,\n        method: \"get\"\n      });\n    operationPromise = operationPromise.then(payload => new FormInstance(operationVersion, payload, instance._solution.formType));\n    operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n    return operationPromise;\n  }\n  /**\n   * Provide a user-friendly representation\n   *\n   * @returns Object\n   */\n  toJSON() {\n    return this._solution;\n  }\n  [util_1.inspect.custom](_depth, options) {\n    return (0, util_1.inspect)(this.toJSON(), options);\n  }\n}\nexports.FormContextImpl = FormContextImpl;\nclass FormInstance {\n  constructor(_version, payload, formType) {\n    this._version = _version;\n    this.formType = payload.form_type;\n    this.forms = payload.forms;\n    this.formMeta = payload.form_meta;\n    this.url = payload.url;\n    this._solution = {\n      formType: formType || this.formType\n    };\n  }\n  get _proxy() {\n    this._context = this._context || new FormContextImpl(this._version, this._solution.formType);\n    return this._context;\n  }\n  /**\n   * Fetch a FormInstance\n   *\n   * @param callback - Callback to handle processed record\n   *\n   * @returns Resolves to processed FormInstance\n   */\n  fetch(callback) {\n    return this._proxy.fetch(callback);\n  }\n  /**\n   * Provide a user-friendly representation\n   *\n   * @returns Object\n   */\n  toJSON() {\n    return {\n      formType: this.formType,\n      forms: this.forms,\n      formMeta: this.formMeta,\n      url: this.url\n    };\n  }\n  [util_1.inspect.custom](_depth, options) {\n    return (0, util_1.inspect)(this.toJSON(), options);\n  }\n}\nexports.FormInstance = FormInstance;\nfunction FormListInstance(version) {\n  const instance = formType => instance.get(formType);\n  instance.get = function get(formType) {\n    return new FormContextImpl(version, formType);\n  };\n  instance._version = version;\n  instance._solution = {};\n  instance._uri = ``;\n  instance.toJSON = function toJSON() {\n    return instance._solution;\n  };\n  instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {\n    return (0, util_1.inspect)(instance.toJSON(), options);\n  };\n  return instance;\n}\nexports.FormListInstance = FormListInstance;","map":{"version":3,"names":["Object","defineProperty","exports","value","FormListInstance","FormInstance","FormContextImpl","util_1","require","deserialize","serialize","utility_1","constructor","_version","formType","isValidPathParam","Error","_solution","_uri","fetch","callback","instance","operationVersion","operationPromise","uri","method","then","payload","setPromiseCallback","toJSON","inspect","custom","_depth","options","form_type","forms","formMeta","form_meta","url","_proxy","_context","version","get","inspectImpl"],"sources":["/Users/sachin/Desktop/Assignment/cpf/node_modules/twilio/lib/rest/verify/v2/form.js"],"sourcesContent":["\"use strict\";\n/*\n * This code was generated by\n * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __\n *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\\ | |___ |__/ |__|  | |  | |__/\n *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \\| |___ |  \\ |  |  | |__| |  \\\n *\n * Twilio - Verify\n * This is the public Twilio REST API.\n *\n * NOTE: This class is auto generated by OpenAPI Generator.\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FormListInstance = exports.FormInstance = exports.FormContextImpl = void 0;\nconst util_1 = require(\"util\");\nconst deserialize = require(\"../../../base/deserialize\");\nconst serialize = require(\"../../../base/serialize\");\nconst utility_1 = require(\"../../../base/utility\");\nclass FormContextImpl {\n    constructor(_version, formType) {\n        this._version = _version;\n        if (!(0, utility_1.isValidPathParam)(formType)) {\n            throw new Error(\"Parameter 'formType' is not valid.\");\n        }\n        this._solution = { formType };\n        this._uri = `/Forms/${formType}`;\n    }\n    fetch(callback) {\n        const instance = this;\n        let operationVersion = instance._version, operationPromise = operationVersion.fetch({\n            uri: instance._uri,\n            method: \"get\",\n        });\n        operationPromise = operationPromise.then((payload) => new FormInstance(operationVersion, payload, instance._solution.formType));\n        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n        return operationPromise;\n    }\n    /**\n     * Provide a user-friendly representation\n     *\n     * @returns Object\n     */\n    toJSON() {\n        return this._solution;\n    }\n    [util_1.inspect.custom](_depth, options) {\n        return (0, util_1.inspect)(this.toJSON(), options);\n    }\n}\nexports.FormContextImpl = FormContextImpl;\nclass FormInstance {\n    constructor(_version, payload, formType) {\n        this._version = _version;\n        this.formType = payload.form_type;\n        this.forms = payload.forms;\n        this.formMeta = payload.form_meta;\n        this.url = payload.url;\n        this._solution = { formType: formType || this.formType };\n    }\n    get _proxy() {\n        this._context =\n            this._context ||\n                new FormContextImpl(this._version, this._solution.formType);\n        return this._context;\n    }\n    /**\n     * Fetch a FormInstance\n     *\n     * @param callback - Callback to handle processed record\n     *\n     * @returns Resolves to processed FormInstance\n     */\n    fetch(callback) {\n        return this._proxy.fetch(callback);\n    }\n    /**\n     * Provide a user-friendly representation\n     *\n     * @returns Object\n     */\n    toJSON() {\n        return {\n            formType: this.formType,\n            forms: this.forms,\n            formMeta: this.formMeta,\n            url: this.url,\n        };\n    }\n    [util_1.inspect.custom](_depth, options) {\n        return (0, util_1.inspect)(this.toJSON(), options);\n    }\n}\nexports.FormInstance = FormInstance;\nfunction FormListInstance(version) {\n    const instance = ((formType) => instance.get(formType));\n    instance.get = function get(formType) {\n        return new FormContextImpl(version, formType);\n    };\n    instance._version = version;\n    instance._solution = {};\n    instance._uri = ``;\n    instance.toJSON = function toJSON() {\n        return instance._solution;\n    };\n    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {\n        return (0, util_1.inspect)(instance.toJSON(), options);\n    };\n    return instance;\n}\nexports.FormListInstance = FormListInstance;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}